
build/test:     file format elf64-x86-64


Disassembly of section .init:

0000000000400de0 <_init>:
  400de0:	48 83 ec 08          	sub    rsp,0x8
  400de4:	48 8b 05 0d 82 20 00 	mov    rax,QWORD PTR [rip+0x20820d]        # 608ff8 <__gmon_start__>
  400deb:	48 85 c0             	test   rax,rax
  400dee:	74 02                	je     400df2 <_init+0x12>
  400df0:	ff d0                	call   rax
  400df2:	48 83 c4 08          	add    rsp,0x8
  400df6:	c3                   	ret    

Disassembly of section .plt:

0000000000400e00 <.plt>:
  400e00:	ff 35 02 82 20 00    	push   QWORD PTR [rip+0x208202]        # 609008 <_GLOBAL_OFFSET_TABLE_+0x8>
  400e06:	ff 25 04 82 20 00    	jmp    QWORD PTR [rip+0x208204]        # 609010 <_GLOBAL_OFFSET_TABLE_+0x10>
  400e0c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]

0000000000400e10 <printf@plt>:
  400e10:	ff 25 02 82 20 00    	jmp    QWORD PTR [rip+0x208202]        # 609018 <printf@GLIBC_2.2.5>
  400e16:	68 00 00 00 00       	push   0x0
  400e1b:	e9 e0 ff ff ff       	jmp    400e00 <.plt>

0000000000400e20 <std::chrono::_V2::system_clock::now()@plt>:
  400e20:	ff 25 fa 81 20 00    	jmp    QWORD PTR [rip+0x2081fa]        # 609020 <std::chrono::_V2::system_clock::now()@GLIBCXX_3.4.19>
  400e26:	68 01 00 00 00       	push   0x1
  400e2b:	e9 d0 ff ff ff       	jmp    400e00 <.plt>

0000000000400e30 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>:
  400e30:	ff 25 f2 81 20 00    	jmp    QWORD PTR [rip+0x2081f2]        # 609028 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@GLIBCXX_3.4>
  400e36:	68 02 00 00 00       	push   0x2
  400e3b:	e9 c0 ff ff ff       	jmp    400e00 <.plt>

0000000000400e40 <std::_Hash_bytes(void const*, unsigned long, unsigned long)@plt>:
  400e40:	ff 25 ea 81 20 00    	jmp    QWORD PTR [rip+0x2081ea]        # 609030 <std::_Hash_bytes(void const*, unsigned long, unsigned long)@CXXABI_1.3.5>
  400e46:	68 03 00 00 00       	push   0x3
  400e4b:	e9 b0 ff ff ff       	jmp    400e00 <.plt>

0000000000400e50 <memset@plt>:
  400e50:	ff 25 e2 81 20 00    	jmp    QWORD PTR [rip+0x2081e2]        # 609038 <memset@GLIBC_2.2.5>
  400e56:	68 04 00 00 00       	push   0x4
  400e5b:	e9 a0 ff ff ff       	jmp    400e00 <.plt>

0000000000400e60 <__assert_fail@plt>:
  400e60:	ff 25 da 81 20 00    	jmp    QWORD PTR [rip+0x2081da]        # 609040 <__assert_fail@GLIBC_2.2.5>
  400e66:	68 05 00 00 00       	push   0x5
  400e6b:	e9 90 ff ff ff       	jmp    400e00 <.plt>

0000000000400e70 <calloc@plt>:
  400e70:	ff 25 d2 81 20 00    	jmp    QWORD PTR [rip+0x2081d2]        # 609048 <calloc@GLIBC_2.2.5>
  400e76:	68 06 00 00 00       	push   0x6
  400e7b:	e9 80 ff ff ff       	jmp    400e00 <.plt>

0000000000400e80 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>:
  400e80:	ff 25 ca 81 20 00    	jmp    QWORD PTR [rip+0x2081ca]        # 609050 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@GLIBCXX_3.4.9>
  400e86:	68 07 00 00 00       	push   0x7
  400e8b:	e9 70 ff ff ff       	jmp    400e00 <.plt>

0000000000400e90 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>:
  400e90:	ff 25 c2 81 20 00    	jmp    QWORD PTR [rip+0x2081c2]        # 609058 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
  400e96:	68 08 00 00 00       	push   0x8
  400e9b:	e9 60 ff ff ff       	jmp    400e00 <.plt>

0000000000400ea0 <nextafterf@plt>:
  400ea0:	ff 25 ba 81 20 00    	jmp    QWORD PTR [rip+0x2081ba]        # 609060 <nextafterf@GLIBC_2.2.5>
  400ea6:	68 09 00 00 00       	push   0x9
  400eab:	e9 50 ff ff ff       	jmp    400e00 <.plt>

0000000000400eb0 <__cxa_atexit@plt>:
  400eb0:	ff 25 b2 81 20 00    	jmp    QWORD PTR [rip+0x2081b2]        # 609068 <__cxa_atexit@GLIBC_2.2.5>
  400eb6:	68 0a 00 00 00       	push   0xa
  400ebb:	e9 40 ff ff ff       	jmp    400e00 <.plt>

0000000000400ec0 <time@plt>:
  400ec0:	ff 25 aa 81 20 00    	jmp    QWORD PTR [rip+0x2081aa]        # 609070 <time@GLIBC_2.2.5>
  400ec6:	68 0b 00 00 00       	push   0xb
  400ecb:	e9 30 ff ff ff       	jmp    400e00 <.plt>

0000000000400ed0 <operator delete(void*)@plt>:
  400ed0:	ff 25 a2 81 20 00    	jmp    QWORD PTR [rip+0x2081a2]        # 609078 <operator delete(void*)@GLIBCXX_3.4>
  400ed6:	68 0c 00 00 00       	push   0xc
  400edb:	e9 20 ff ff ff       	jmp    400e00 <.plt>

0000000000400ee0 <operator new(unsigned long)@plt>:
  400ee0:	ff 25 9a 81 20 00    	jmp    QWORD PTR [rip+0x20819a]        # 609080 <operator new(unsigned long)@GLIBCXX_3.4>
  400ee6:	68 0d 00 00 00       	push   0xd
  400eeb:	e9 10 ff ff ff       	jmp    400e00 <.plt>

0000000000400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>:
  400ef0:	ff 25 92 81 20 00    	jmp    QWORD PTR [rip+0x208192]        # 609088 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@GLIBCXX_3.4>
  400ef6:	68 0e 00 00 00       	push   0xe
  400efb:	e9 00 ff ff ff       	jmp    400e00 <.plt>

0000000000400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>:
  400f00:	ff 25 8a 81 20 00    	jmp    QWORD PTR [rip+0x20818a]        # 609090 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@GLIBCXX_3.4.9>
  400f06:	68 0f 00 00 00       	push   0xf
  400f0b:	e9 f0 fe ff ff       	jmp    400e00 <.plt>

0000000000400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>:
  400f10:	ff 25 82 81 20 00    	jmp    QWORD PTR [rip+0x208182]        # 609098 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@GLIBCXX_3.4>
  400f16:	68 10 00 00 00       	push   0x10
  400f1b:	e9 e0 fe ff ff       	jmp    400e00 <.plt>

0000000000400f20 <free@plt>:
  400f20:	ff 25 7a 81 20 00    	jmp    QWORD PTR [rip+0x20817a]        # 6090a0 <free@GLIBC_2.2.5>
  400f26:	68 11 00 00 00       	push   0x11
  400f2b:	e9 d0 fe ff ff       	jmp    400e00 <.plt>

0000000000400f30 <exit@plt>:
  400f30:	ff 25 72 81 20 00    	jmp    QWORD PTR [rip+0x208172]        # 6090a8 <exit@GLIBC_2.2.5>
  400f36:	68 12 00 00 00       	push   0x12
  400f3b:	e9 c0 fe ff ff       	jmp    400e00 <.plt>

0000000000400f40 <malloc@plt>:
  400f40:	ff 25 6a 81 20 00    	jmp    QWORD PTR [rip+0x20816a]        # 6090b0 <malloc@GLIBC_2.2.5>
  400f46:	68 13 00 00 00       	push   0x13
  400f4b:	e9 b0 fe ff ff       	jmp    400e00 <.plt>

0000000000400f50 <fprintf@plt>:
  400f50:	ff 25 62 81 20 00    	jmp    QWORD PTR [rip+0x208162]        # 6090b8 <fprintf@GLIBC_2.2.5>
  400f56:	68 14 00 00 00       	push   0x14
  400f5b:	e9 a0 fe ff ff       	jmp    400e00 <.plt>

0000000000400f60 <std::ios_base::Init::Init()@plt>:
  400f60:	ff 25 5a 81 20 00    	jmp    QWORD PTR [rip+0x20815a]        # 6090c0 <std::ios_base::Init::Init()@GLIBCXX_3.4>
  400f66:	68 15 00 00 00       	push   0x15
  400f6b:	e9 90 fe ff ff       	jmp    400e00 <.plt>

0000000000400f70 <puts@plt>:
  400f70:	ff 25 52 81 20 00    	jmp    QWORD PTR [rip+0x208152]        # 6090c8 <puts@GLIBC_2.2.5>
  400f76:	68 16 00 00 00       	push   0x16
  400f7b:	e9 80 fe ff ff       	jmp    400e00 <.plt>

0000000000400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>:
  400f80:	ff 25 4a 81 20 00    	jmp    QWORD PTR [rip+0x20814a]        # 6090d0 <std::ostream& std::ostream::_M_insert<double>(double)@GLIBCXX_3.4.9>
  400f86:	68 17 00 00 00       	push   0x17
  400f8b:	e9 70 fe ff ff       	jmp    400e00 <.plt>

0000000000400f90 <memmove@plt>:
  400f90:	ff 25 42 81 20 00    	jmp    QWORD PTR [rip+0x208142]        # 6090d8 <memmove@GLIBC_2.2.5>
  400f96:	68 18 00 00 00       	push   0x18
  400f9b:	e9 60 fe ff ff       	jmp    400e00 <.plt>

0000000000400fa0 <realloc@plt>:
  400fa0:	ff 25 3a 81 20 00    	jmp    QWORD PTR [rip+0x20813a]        # 6090e0 <realloc@GLIBC_2.2.5>
  400fa6:	68 19 00 00 00       	push   0x19
  400fab:	e9 50 fe ff ff       	jmp    400e00 <.plt>

0000000000400fb0 <__gxx_personality_v0@plt>:
  400fb0:	ff 25 32 81 20 00    	jmp    QWORD PTR [rip+0x208132]        # 6090e8 <__gxx_personality_v0@CXXABI_1.3>
  400fb6:	68 1a 00 00 00       	push   0x1a
  400fbb:	e9 40 fe ff ff       	jmp    400e00 <.plt>

0000000000400fc0 <hypotf@plt>:
  400fc0:	ff 25 2a 81 20 00    	jmp    QWORD PTR [rip+0x20812a]        # 6090f0 <hypotf@GLIBC_2.2.5>
  400fc6:	68 1b 00 00 00       	push   0x1b
  400fcb:	e9 30 fe ff ff       	jmp    400e00 <.plt>

0000000000400fd0 <_Unwind_Resume@plt>:
  400fd0:	ff 25 22 81 20 00    	jmp    QWORD PTR [rip+0x208122]        # 6090f8 <_Unwind_Resume@GCC_3.0>
  400fd6:	68 1c 00 00 00       	push   0x1c
  400fdb:	e9 20 fe ff ff       	jmp    400e00 <.plt>

0000000000400fe0 <std::ios_base::Init::~Init()@plt>:
  400fe0:	ff 25 1a 81 20 00    	jmp    QWORD PTR [rip+0x20811a]        # 609100 <std::ios_base::Init::~Init()@GLIBCXX_3.4>
  400fe6:	68 1d 00 00 00       	push   0x1d
  400feb:	e9 10 fe ff ff       	jmp    400e00 <.plt>

Disassembly of section .text:

0000000000400ff0 <testPool() [clone .cold.69]>:
  400ff0:	4c 89 e7             	mov    rdi,r12
  400ff3:	e8 28 ff ff ff       	call   400f20 <free@plt>
  400ff8:	48 89 ef             	mov    rdi,rbp
  400ffb:	e8 20 ff ff ff       	call   400f20 <free@plt>
  401000:	48 89 df             	mov    rdi,rbx
  401003:	e8 c8 ff ff ff       	call   400fd0 <_Unwind_Resume@plt>

0000000000401008 <testQTreePathological() [clone .cold.70]>:
  401008:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
  40100d:	48 85 ff             	test   rdi,rdi
  401010:	74 05                	je     401017 <testQTreePathological() [clone .cold.70]+0xf>
  401012:	e8 b9 fe ff ff       	call   400ed0 <operator delete(void*)@plt>
  401017:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
  40101e:	00 
  40101f:	e8 fc fe ff ff       	call   400f20 <free@plt>
  401024:	48 8b bc 24 88 00 00 	mov    rdi,QWORD PTR [rsp+0x88]
  40102b:	00 
  40102c:	e8 ef fe ff ff       	call   400f20 <free@plt>
  401031:	48 89 df             	mov    rdi,rbx
  401034:	e8 97 ff ff ff       	call   400fd0 <_Unwind_Resume@plt>

0000000000401039 <testQTree() [clone .cold.71]>:
  401039:	48 8b b4 24 40 01 00 	mov    rsi,QWORD PTR [rsp+0x140]
  401040:	00 
  401041:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  401048:	00 
  401049:	e8 82 44 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  40104e:	48 8b b4 24 10 01 00 	mov    rsi,QWORD PTR [rsp+0x110]
  401055:	00 
  401056:	48 89 df             	mov    rdi,rbx
  401059:	48 89 eb             	mov    rbx,rbp
  40105c:	e8 6f 44 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  401061:	48 8b b4 24 e0 00 00 	mov    rsi,QWORD PTR [rsp+0xe0]
  401068:	00 
  401069:	48 8b 7c 24 48       	mov    rdi,QWORD PTR [rsp+0x48]
  40106e:	e8 5d 44 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  401073:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
  40107a:	00 
  40107b:	48 85 ff             	test   rdi,rdi
  40107e:	74 05                	je     401085 <testQTree() [clone .cold.71]+0x4c>
  401080:	e8 4b fe ff ff       	call   400ed0 <operator delete(void*)@plt>
  401085:	48 8b b4 24 b0 00 00 	mov    rsi,QWORD PTR [rsp+0xb0]
  40108c:	00 
  40108d:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
  401094:	00 
  401095:	e8 36 44 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  40109a:	48 8b bc 24 70 01 00 	mov    rdi,QWORD PTR [rsp+0x170]
  4010a1:	00 
  4010a2:	e8 79 fe ff ff       	call   400f20 <free@plt>
  4010a7:	48 8b bc 24 78 01 00 	mov    rdi,QWORD PTR [rsp+0x178]
  4010ae:	00 
  4010af:	e8 6c fe ff ff       	call   400f20 <free@plt>
  4010b4:	48 89 df             	mov    rdi,rbx
  4010b7:	e8 14 ff ff ff       	call   400fd0 <_Unwind_Resume@plt>
  4010bc:	48 8b bc 24 30 01 00 	mov    rdi,QWORD PTR [rsp+0x130]
  4010c3:	00 
  4010c4:	48 85 ff             	test   rdi,rdi
  4010c7:	74 98                	je     401061 <testQTree() [clone .cold.71]+0x28>
  4010c9:	e8 02 fe ff ff       	call   400ed0 <operator delete(void*)@plt>
  4010ce:	eb 91                	jmp    401061 <testQTree() [clone .cold.71]+0x28>

00000000004010d0 <main>:
  4010d0:	48 83 ec 08          	sub    rsp,0x8
  4010d4:	bf 19 79 40 00       	mov    edi,0x407919
  4010d9:	e8 92 fe ff ff       	call   400f70 <puts@plt>
  4010de:	e8 3d 03 00 00       	call   401420 <testPool()>
  4010e3:	e8 b8 1a 00 00       	call   402ba0 <testQTree()>
  4010e8:	e8 03 05 00 00       	call   4015f0 <testQTreePathological()>
  4010ed:	31 c0                	xor    eax,eax
  4010ef:	48 83 c4 08          	add    rsp,0x8
  4010f3:	c3                   	ret    
  4010f4:	66 90                	xchg   ax,ax
  4010f6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4010fd:	00 00 00 

0000000000401100 <_GLOBAL__sub_I__Z8testPoolv>:
  401100:	48 83 ec 08          	sub    rsp,0x8
  401104:	bf 51 92 60 00       	mov    edi,0x609251
  401109:	e8 52 fe ff ff       	call   400f60 <std::ios_base::Init::Init()@plt>
  40110e:	ba 10 91 60 00       	mov    edx,0x609110
  401113:	be 51 92 60 00       	mov    esi,0x609251
  401118:	bf e0 0f 40 00       	mov    edi,0x400fe0
  40111d:	48 83 c4 08          	add    rsp,0x8
  401121:	e9 8a fd ff ff       	jmp    400eb0 <__cxa_atexit@plt>
  401126:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40112d:	00 00 00 

0000000000401130 <_start>:
  401130:	31 ed                	xor    ebp,ebp
  401132:	49 89 d1             	mov    r9,rdx
  401135:	5e                   	pop    rsi
  401136:	48 89 e2             	mov    rdx,rsp
  401139:	48 83 e4 f0          	and    rsp,0xfffffffffffffff0
  40113d:	50                   	push   rax
  40113e:	54                   	push   rsp
  40113f:	49 c7 c0 d0 76 40 00 	mov    r8,0x4076d0
  401146:	48 c7 c1 60 76 40 00 	mov    rcx,0x407660
  40114d:	48 c7 c7 d0 10 40 00 	mov    rdi,0x4010d0
  401154:	ff 15 96 7e 20 00    	call   QWORD PTR [rip+0x207e96]        # 608ff0 <__libc_start_main@GLIBC_2.2.5>
  40115a:	f4                   	hlt    
  40115b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000401160 <deregister_tm_clones>:
  401160:	b8 18 91 60 00       	mov    eax,0x609118
  401165:	48 3d 18 91 60 00    	cmp    rax,0x609118
  40116b:	74 13                	je     401180 <deregister_tm_clones+0x20>
  40116d:	b8 00 00 00 00       	mov    eax,0x0
  401172:	48 85 c0             	test   rax,rax
  401175:	74 09                	je     401180 <deregister_tm_clones+0x20>
  401177:	bf 18 91 60 00       	mov    edi,0x609118
  40117c:	ff e0                	jmp    rax
  40117e:	66 90                	xchg   ax,ax
  401180:	f3 c3                	repz ret 
  401182:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  401186:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40118d:	00 00 00 

0000000000401190 <register_tm_clones>:
  401190:	be 18 91 60 00       	mov    esi,0x609118
  401195:	48 81 ee 18 91 60 00 	sub    rsi,0x609118
  40119c:	48 c1 fe 03          	sar    rsi,0x3
  4011a0:	48 89 f0             	mov    rax,rsi
  4011a3:	48 c1 e8 3f          	shr    rax,0x3f
  4011a7:	48 01 c6             	add    rsi,rax
  4011aa:	48 d1 fe             	sar    rsi,1
  4011ad:	74 11                	je     4011c0 <register_tm_clones+0x30>
  4011af:	b8 00 00 00 00       	mov    eax,0x0
  4011b4:	48 85 c0             	test   rax,rax
  4011b7:	74 07                	je     4011c0 <register_tm_clones+0x30>
  4011b9:	bf 18 91 60 00       	mov    edi,0x609118
  4011be:	ff e0                	jmp    rax
  4011c0:	f3 c3                	repz ret 
  4011c2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4011c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4011cd:	00 00 00 

00000000004011d0 <__do_global_dtors_aux>:
  4011d0:	f3 0f 1e fa          	endbr64 
  4011d4:	80 3d 75 80 20 00 00 	cmp    BYTE PTR [rip+0x208075],0x0        # 609250 <completed.7174>
  4011db:	75 13                	jne    4011f0 <__do_global_dtors_aux+0x20>
  4011dd:	55                   	push   rbp
  4011de:	48 89 e5             	mov    rbp,rsp
  4011e1:	e8 7a ff ff ff       	call   401160 <deregister_tm_clones>
  4011e6:	c6 05 63 80 20 00 01 	mov    BYTE PTR [rip+0x208063],0x1        # 609250 <completed.7174>
  4011ed:	5d                   	pop    rbp
  4011ee:	c3                   	ret    
  4011ef:	90                   	nop
  4011f0:	f3 c3                	repz ret 
  4011f2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4011f6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4011fd:	00 00 00 

0000000000401200 <frame_dummy>:
  401200:	f3 0f 1e fa          	endbr64 
  401204:	eb 8a                	jmp    401190 <register_tm_clones>
  401206:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40120d:	00 00 00 

0000000000401210 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]>:
  401210:	48 8b 87 c0 09 00 00 	mov    rax,QWORD PTR [rdi+0x9c0]
  401217:	48 3d 37 01 00 00    	cmp    rax,0x137
  40121d:	48 8d 50 01          	lea    rdx,[rax+0x1]
  401221:	0f 87 a9 00 00 00    	ja     4012d0 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0xc0>
  401227:	48 8b 04 c7          	mov    rax,QWORD PTR [rdi+rax*8]
  40122b:	48 89 97 c0 09 00 00 	mov    QWORD PTR [rdi+0x9c0],rdx
  401232:	48 b9 55 55 55 55 55 	movabs rcx,0x5555555555555555
  401239:	55 55 55 
  40123c:	48 89 c2             	mov    rdx,rax
  40123f:	48 c1 ea 1d          	shr    rdx,0x1d
  401243:	48 21 ca             	and    rdx,rcx
  401246:	48 b9 00 00 a6 ed ff 	movabs rcx,0x71d67fffeda60000
  40124d:	7f d6 71 
  401250:	48 31 d0             	xor    rax,rdx
  401253:	48 89 c2             	mov    rdx,rax
  401256:	48 c1 e2 11          	shl    rdx,0x11
  40125a:	48 21 ca             	and    rdx,rcx
  40125d:	48 b9 00 00 00 00 e0 	movabs rcx,0xfff7eee000000000
  401264:	ee f7 ff 
  401267:	48 31 d0             	xor    rax,rdx
  40126a:	48 89 c2             	mov    rdx,rax
  40126d:	48 c1 e2 25          	shl    rdx,0x25
  401271:	48 21 ca             	and    rdx,rcx
  401274:	48 31 d0             	xor    rax,rdx
  401277:	48 89 c2             	mov    rdx,rax
  40127a:	48 c1 ea 2b          	shr    rdx,0x2b
  40127e:	48 31 d0             	xor    rax,rdx
  401281:	78 2d                	js     4012b0 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0xa0>
  401283:	66 0f ef c0          	pxor   xmm0,xmm0
  401287:	f3 48 0f 2a c0       	cvtsi2ss xmm0,rax
  40128c:	66 0f ef c9          	pxor   xmm1,xmm1
  401290:	f3 0f 10 15 68 67 00 	movss  xmm2,DWORD PTR [rip+0x6768]        # 407a00 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc0>
  401297:	00 
  401298:	f3 0f 58 c1          	addss  xmm0,xmm1
  40129c:	f3 0f 59 05 58 67 00 	mulss  xmm0,DWORD PTR [rip+0x6758]        # 4079fc <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xbc>
  4012a3:	00 
  4012a4:	0f 2f c2             	comiss xmm0,xmm2
  4012a7:	0f 83 6b 01 00 00    	jae    401418 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x208>
  4012ad:	f3 c3                	repz ret 
  4012af:	90                   	nop
  4012b0:	48 89 c2             	mov    rdx,rax
  4012b3:	66 0f ef c0          	pxor   xmm0,xmm0
  4012b7:	48 d1 ea             	shr    rdx,1
  4012ba:	83 e0 01             	and    eax,0x1
  4012bd:	48 09 c2             	or     rdx,rax
  4012c0:	f3 48 0f 2a c2       	cvtsi2ss xmm0,rdx
  4012c5:	f3 0f 58 c0          	addss  xmm0,xmm0
  4012c9:	eb c1                	jmp    40128c <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x7c>
  4012cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  4012d0:	4c 8b 07             	mov    r8,QWORD PTR [rdi]
  4012d3:	4c 8d 8f e0 04 00 00 	lea    r9,[rdi+0x4e0]
  4012da:	48 89 f8             	mov    rax,rdi
  4012dd:	48 89 fa             	mov    rdx,rdi
  4012e0:	49 ba e9 19 66 a9 5a 	movabs r10,0xb5026f5aa96619e9
  4012e7:	6f 02 b5 
  4012ea:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  4012f0:	4c 89 c1             	mov    rcx,r8
  4012f3:	4c 8b 42 08          	mov    r8,QWORD PTR [rdx+0x8]
  4012f7:	48 81 e1 00 00 00 80 	and    rcx,0xffffffff80000000
  4012fe:	4c 89 c6             	mov    rsi,r8
  401301:	81 e6 ff ff ff 7f    	and    esi,0x7fffffff
  401307:	48 09 ce             	or     rsi,rcx
  40130a:	48 89 f1             	mov    rcx,rsi
  40130d:	48 d1 e9             	shr    rcx,1
  401310:	48 33 8a e0 04 00 00 	xor    rcx,QWORD PTR [rdx+0x4e0]
  401317:	83 e6 01             	and    esi,0x1
  40131a:	0f 84 e0 00 00 00    	je     401400 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x1f0>
  401320:	4c 31 d1             	xor    rcx,r10
  401323:	48 83 c2 08          	add    rdx,0x8
  401327:	48 89 4a f8          	mov    QWORD PTR [rdx-0x8],rcx
  40132b:	49 39 d1             	cmp    r9,rdx
  40132e:	75 c0                	jne    4012f0 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0xe0>
  401330:	48 8b b7 e0 04 00 00 	mov    rsi,QWORD PTR [rdi+0x4e0]
  401337:	4c 8d 87 d8 04 00 00 	lea    r8,[rdi+0x4d8]
  40133e:	49 b9 e9 19 66 a9 5a 	movabs r9,0xb5026f5aa96619e9
  401345:	6f 02 b5 
  401348:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40134f:	00 
  401350:	48 81 e6 00 00 00 80 	and    rsi,0xffffffff80000000
  401357:	48 89 f2             	mov    rdx,rsi
  40135a:	48 8b b0 e8 04 00 00 	mov    rsi,QWORD PTR [rax+0x4e8]
  401361:	48 89 f1             	mov    rcx,rsi
  401364:	81 e1 ff ff ff 7f    	and    ecx,0x7fffffff
  40136a:	48 09 d1             	or     rcx,rdx
  40136d:	48 89 ca             	mov    rdx,rcx
  401370:	48 d1 ea             	shr    rdx,1
  401373:	48 33 10             	xor    rdx,QWORD PTR [rax]
  401376:	83 e1 01             	and    ecx,0x1
  401379:	74 65                	je     4013e0 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x1d0>
  40137b:	4c 31 ca             	xor    rdx,r9
  40137e:	48 83 c0 08          	add    rax,0x8
  401382:	48 89 90 d8 04 00 00 	mov    QWORD PTR [rax+0x4d8],rdx
  401389:	4c 39 c0             	cmp    rax,r8
  40138c:	75 c2                	jne    401350 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x140>
  40138e:	48 8b 87 b8 09 00 00 	mov    rax,QWORD PTR [rdi+0x9b8]
  401395:	48 8b 17             	mov    rdx,QWORD PTR [rdi]
  401398:	48 25 00 00 00 80    	and    rax,0xffffffff80000000
  40139e:	81 e2 ff ff ff 7f    	and    edx,0x7fffffff
  4013a4:	48 09 d0             	or     rax,rdx
  4013a7:	48 89 c2             	mov    rdx,rax
  4013aa:	48 d1 ea             	shr    rdx,1
  4013ad:	48 33 97 d8 04 00 00 	xor    rdx,QWORD PTR [rdi+0x4d8]
  4013b4:	a8 01                	test   al,0x1
  4013b6:	74 0d                	je     4013c5 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x1b5>
  4013b8:	48 b8 e9 19 66 a9 5a 	movabs rax,0xb5026f5aa96619e9
  4013bf:	6f 02 b5 
  4013c2:	48 31 c2             	xor    rdx,rax
  4013c5:	48 89 97 b8 09 00 00 	mov    QWORD PTR [rdi+0x9b8],rdx
  4013cc:	31 c0                	xor    eax,eax
  4013ce:	ba 01 00 00 00       	mov    edx,0x1
  4013d3:	e9 4f fe ff ff       	jmp    401227 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x17>
  4013d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4013df:	00 
  4013e0:	48 89 90 e0 04 00 00 	mov    QWORD PTR [rax+0x4e0],rdx
  4013e7:	48 83 c0 08          	add    rax,0x8
  4013eb:	4c 39 c0             	cmp    rax,r8
  4013ee:	0f 85 5c ff ff ff    	jne    401350 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x140>
  4013f4:	eb 98                	jmp    40138e <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x17e>
  4013f6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4013fd:	00 00 00 
  401400:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  401403:	48 83 c2 08          	add    rdx,0x8
  401407:	4c 39 ca             	cmp    rdx,r9
  40140a:	0f 85 e0 fe ff ff    	jne    4012f0 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0xe0>
  401410:	e9 1b ff ff ff       	jmp    401330 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]+0x120>
  401415:	0f 1f 00             	nop    DWORD PTR [rax]
  401418:	0f 28 c2             	movaps xmm0,xmm2
  40141b:	e9 80 fa ff ff       	jmp    400ea0 <nextafterf@plt>

0000000000401420 <testPool()>:
  401420:	41 57                	push   r15
  401422:	41 56                	push   r14
  401424:	bf 00 02 00 00       	mov    edi,0x200
  401429:	41 55                	push   r13
  40142b:	41 54                	push   r12
  40142d:	41 bf 04 00 00 00    	mov    r15d,0x4
  401433:	55                   	push   rbp
  401434:	53                   	push   rbx
  401435:	41 be 40 00 00 00    	mov    r14d,0x40
  40143b:	48 81 ec 18 00 08 00 	sub    rsp,0x80018
  401442:	e8 f9 fa ff ff       	call   400f40 <malloc@plt>
  401447:	be 01 00 00 00       	mov    esi,0x1
  40144c:	bf 40 00 00 00       	mov    edi,0x40
  401451:	49 89 c4             	mov    r12,rax
  401454:	e8 17 fa ff ff       	call   400e70 <calloc@plt>
  401459:	31 ff                	xor    edi,edi
  40145b:	48 89 c5             	mov    rbp,rax
  40145e:	e8 5d fa ff ff       	call   400ec0 <time@plt>
  401463:	48 bf 05 00 00 00 02 	movabs rdi,0x200000005
  40146a:	00 00 00 
  40146d:	48 89 c1             	mov    rcx,rax
  401470:	be 3f 00 00 00       	mov    esi,0x3f
  401475:	48 f7 e7             	mul    rdi
  401478:	48 89 cb             	mov    rbx,rcx
  40147b:	48 89 3c 24          	mov    QWORD PTR [rsp],rdi
  40147f:	48 29 d3             	sub    rbx,rdx
  401482:	48 d1 eb             	shr    rbx,1
  401485:	48 01 d3             	add    rbx,rdx
  401488:	48 c1 eb 1e          	shr    rbx,0x1e
  40148c:	48 89 d8             	mov    rax,rbx
  40148f:	48 c1 e0 1f          	shl    rax,0x1f
  401493:	48 29 d8             	sub    rax,rbx
  401496:	48 29 c1             	sub    rcx,rax
  401499:	b8 01 00 00 00       	mov    eax,0x1
  40149e:	48 89 cb             	mov    rbx,rcx
  4014a1:	48 0f 44 d8          	cmove  rbx,rax
  4014a5:	45 31 ed             	xor    r13d,r13d
  4014a8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4014af:	00 
  4014b0:	48 69 fb 8f bc 00 00 	imul   rdi,rbx,0xbc8f
  4014b7:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4014bb:	48 f7 e7             	mul    rdi
  4014be:	48 89 fb             	mov    rbx,rdi
  4014c1:	48 29 d3             	sub    rbx,rdx
  4014c4:	48 d1 eb             	shr    rbx,1
  4014c7:	48 01 d3             	add    rbx,rdx
  4014ca:	48 c1 eb 1e          	shr    rbx,0x1e
  4014ce:	48 89 d8             	mov    rax,rbx
  4014d1:	48 c1 e0 1f          	shl    rax,0x1f
  4014d5:	48 29 d8             	sub    rax,rbx
  4014d8:	48 29 c7             	sub    rdi,rax
  4014db:	48 89 f0             	mov    rax,rsi
  4014de:	48 89 fb             	mov    rbx,rdi
  4014e1:	48 21 f8             	and    rax,rdi
  4014e4:	eb 1b                	jmp    401501 <testPool()+0xe1>
  4014e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4014ed:	00 00 00 
  4014f0:	48 83 c0 01          	add    rax,0x1
  4014f4:	48 89 c7             	mov    rdi,rax
  4014f7:	4c 29 f7             	sub    rdi,r14
  4014fa:	49 39 c6             	cmp    r14,rax
  4014fd:	48 0f 46 c7          	cmovbe rax,rdi
  401501:	80 7c 05 00 00       	cmp    BYTE PTR [rbp+rax*1+0x0],0x0
  401506:	48 8d 54 05 00       	lea    rdx,[rbp+rax*1+0x0]
  40150b:	75 e3                	jne    4014f0 <testPool()+0xd0>
  40150d:	49 81 ff 00 00 04 00 	cmp    r15,0x40000
  401514:	c6 02 01             	mov    BYTE PTR [rdx],0x1
  401517:	4d 89 2c c4          	mov    QWORD PTR [r12+rax*8],r13
  40151b:	4a 89 44 7c 08       	mov    QWORD PTR [rsp+r15*2+0x8],rax
  401520:	74 5e                	je     401580 <testPool()+0x160>
  401522:	4f 8d 04 36          	lea    r8,[r14+r14*1]
  401526:	4b 8d 04 30          	lea    rax,[r8+r14*1]
  40152a:	4c 39 f8             	cmp    rax,r15
  40152d:	77 44                	ja     401573 <testPool()+0x153>
  40152f:	4c 89 f6             	mov    rsi,r14
  401532:	4c 89 e7             	mov    rdi,r12
  401535:	4c 89 44 24 08       	mov    QWORD PTR [rsp+0x8],r8
  40153a:	48 c1 e6 04          	shl    rsi,0x4
  40153e:	e8 5d fa ff ff       	call   400fa0 <realloc@plt>
  401543:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
  401548:	48 89 ef             	mov    rdi,rbp
  40154b:	49 89 c4             	mov    r12,rax
  40154e:	4c 89 c6             	mov    rsi,r8
  401551:	e8 4a fa ff ff       	call   400fa0 <realloc@plt>
  401556:	4a 8d 3c 30          	lea    rdi,[rax+r14*1]
  40155a:	4c 89 f2             	mov    rdx,r14
  40155d:	31 f6                	xor    esi,esi
  40155f:	48 89 c5             	mov    rbp,rax
  401562:	e8 e9 f8 ff ff       	call   400e50 <memset@plt>
  401567:	4c 8b 44 24 08       	mov    r8,QWORD PTR [rsp+0x8]
  40156c:	49 8d 70 ff          	lea    rsi,[r8-0x1]
  401570:	4d 89 c6             	mov    r14,r8
  401573:	49 83 c7 04          	add    r15,0x4
  401577:	49 83 c5 23          	add    r13,0x23
  40157b:	e9 30 ff ff ff       	jmp    4014b0 <testPool()+0x90>
  401580:	45 31 ed             	xor    r13d,r13d
  401583:	31 db                	xor    ebx,ebx
  401585:	0f 1f 00             	nop    DWORD PTR [rax]
  401588:	48 8b 44 dc 10       	mov    rax,QWORD PTR [rsp+rbx*8+0x10]
  40158d:	49 8b 14 c4          	mov    rdx,QWORD PTR [r12+rax*8]
  401591:	4c 39 ea             	cmp    rdx,r13
  401594:	74 12                	je     4015a8 <testPool()+0x188>
  401596:	4c 89 e9             	mov    rcx,r13
  401599:	48 89 de             	mov    rsi,rbx
  40159c:	bf e8 76 40 00       	mov    edi,0x4076e8
  4015a1:	31 c0                	xor    eax,eax
  4015a3:	e8 68 f8 ff ff       	call   400e10 <printf@plt>
  4015a8:	48 83 c3 01          	add    rbx,0x1
  4015ac:	49 83 c5 23          	add    r13,0x23
  4015b0:	48 81 fb 00 00 01 00 	cmp    rbx,0x10000
  4015b7:	75 cf                	jne    401588 <testPool()+0x168>
  4015b9:	4c 89 e7             	mov    rdi,r12
  4015bc:	e8 5f f9 ff ff       	call   400f20 <free@plt>
  4015c1:	48 81 c4 18 00 08 00 	add    rsp,0x80018
  4015c8:	48 89 ef             	mov    rdi,rbp
  4015cb:	5b                   	pop    rbx
  4015cc:	5d                   	pop    rbp
  4015cd:	41 5c                	pop    r12
  4015cf:	41 5d                	pop    r13
  4015d1:	41 5e                	pop    r14
  4015d3:	41 5f                	pop    r15
  4015d5:	e9 46 f9 ff ff       	jmp    400f20 <free@plt>
  4015da:	48 89 c3             	mov    rbx,rax
  4015dd:	e9 0e fa ff ff       	jmp    400ff0 <testPool() [clone .cold.69]>
  4015e2:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4015e6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4015ed:	00 00 00 

00000000004015f0 <testQTreePathological()>:
  4015f0:	41 57                	push   r15
  4015f2:	41 56                	push   r14
  4015f4:	ba 17 00 00 00       	mov    edx,0x17
  4015f9:	41 55                	push   r13
  4015fb:	41 54                	push   r12
  4015fd:	be 0f 78 40 00       	mov    esi,0x40780f
  401602:	55                   	push   rbp
  401603:	53                   	push   rbx
  401604:	bf 40 91 60 00       	mov    edi,0x609140
  401609:	48 81 ec b8 00 00 00 	sub    rsp,0xb8
  401610:	e8 eb f8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401615:	66 0f 6f 05 03 64 00 	movdqa xmm0,XMMWORD PTR [rip+0x6403]        # 407a20 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xe0>
  40161c:	00 
  40161d:	bf 00 0e 00 00       	mov    edi,0xe00
  401622:	0f 29 44 24 70       	movaps XMMWORD PTR [rsp+0x70],xmm0
  401627:	e8 14 f9 ff ff       	call   400f40 <malloc@plt>
  40162c:	bf 40 00 00 00       	mov    edi,0x40
  401631:	48 89 84 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rax
  401638:	00 
  401639:	e8 02 f9 ff ff       	call   400f40 <malloc@plt>
  40163e:	31 ff                	xor    edi,edi
  401640:	48 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rax
  401647:	00 
  401648:	48 c7 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],0x1
  40164f:	00 01 00 00 00 
  401654:	e8 67 f8 ff ff       	call   400ec0 <time@plt>
  401659:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  401660:	00 00 00 
  401663:	48 89 c1             	mov    rcx,rax
  401666:	48 f7 e2             	mul    rdx
  401669:	48 89 c8             	mov    rax,rcx
  40166c:	66 0f ef c0          	pxor   xmm0,xmm0
  401670:	48 29 d0             	sub    rax,rdx
  401673:	48 d1 e8             	shr    rax,1
  401676:	48 01 c2             	add    rdx,rax
  401679:	48 c1 ea 1e          	shr    rdx,0x1e
  40167d:	48 89 d0             	mov    rax,rdx
  401680:	48 c1 e0 1f          	shl    rax,0x1f
  401684:	48 29 d0             	sub    rax,rdx
  401687:	48 29 c1             	sub    rcx,rax
  40168a:	b8 01 00 00 00       	mov    eax,0x1
  40168f:	48 89 ca             	mov    rdx,rcx
  401692:	48 0f 44 d0          	cmove  rdx,rax
  401696:	48 8b 84 24 88 00 00 	mov    rax,QWORD PTR [rsp+0x88]
  40169d:	00 
  40169e:	48 89 94 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rdx
  4016a5:	00 
  4016a6:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
  4016a9:	48 8b 4c 24 78       	mov    rcx,QWORD PTR [rsp+0x78]
  4016ae:	4c 8b 44 24 70       	mov    r8,QWORD PTR [rsp+0x70]
  4016b3:	0f 11 40 10          	movups XMMWORD PTR [rax+0x10],xmm0
  4016b7:	0f 11 40 20          	movups XMMWORD PTR [rax+0x20],xmm0
  4016bb:	4a 8d 34 85 00 00 00 	lea    rsi,[r8*4+0x0]
  4016c2:	00 
  4016c3:	0f 11 40 30          	movups XMMWORD PTR [rax+0x30],xmm0
  4016c7:	48 8d 04 09          	lea    rax,[rcx+rcx*1]
  4016cb:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
  4016cf:	48 39 d6             	cmp    rsi,rdx
  4016d2:	0f 83 3d 02 00 00    	jae    401915 <testQTreePathological()+0x325>
  4016d8:	48 69 b4 24 90 00 00 	imul   rsi,QWORD PTR [rsp+0x90],0xbc8f
  4016df:	00 8f bc 00 00 
  4016e4:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  4016eb:	00 00 00 
  4016ee:	48 89 f0             	mov    rax,rsi
  4016f1:	48 f7 e2             	mul    rdx
  4016f4:	48 89 f0             	mov    rax,rsi
  4016f7:	48 29 d0             	sub    rax,rdx
  4016fa:	48 d1 e8             	shr    rax,1
  4016fd:	48 01 d0             	add    rax,rdx
  401700:	48 c1 e8 1e          	shr    rax,0x1e
  401704:	48 89 c2             	mov    rdx,rax
  401707:	48 c1 e0 1f          	shl    rax,0x1f
  40170b:	48 29 d0             	sub    rax,rdx
  40170e:	48 8b 94 24 88 00 00 	mov    rdx,QWORD PTR [rsp+0x88]
  401715:	00 
  401716:	48 29 c6             	sub    rsi,rax
  401719:	48 8d 41 ff          	lea    rax,[rcx-0x1]
  40171d:	48 89 b4 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rsi
  401724:	00 
  401725:	48 21 f0             	and    rax,rsi
  401728:	eb 17                	jmp    401741 <testQTreePathological()+0x151>
  40172a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  401730:	48 83 c0 01          	add    rax,0x1
  401734:	48 89 c7             	mov    rdi,rax
  401737:	48 29 cf             	sub    rdi,rcx
  40173a:	48 39 c8             	cmp    rax,rcx
  40173d:	48 0f 43 c7          	cmovae rax,rdi
  401741:	80 3c 02 00          	cmp    BYTE PTR [rdx+rax*1],0x0
  401745:	48 8d 34 02          	lea    rsi,[rdx+rax*1]
  401749:	75 e5                	jne    401730 <testQTreePathological()+0x140>
  40174b:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  401752:	00 
  401753:	48 8b 8c 24 80 00 00 	mov    rcx,QWORD PTR [rsp+0x80]
  40175a:	00 
  40175b:	49 83 c0 01          	add    r8,0x1
  40175f:	0f 28 05 ca 62 00 00 	movaps xmm0,XMMWORD PTR [rip+0x62ca]        # 407a30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xf0>
  401766:	66 0f ef c9          	pxor   xmm1,xmm1
  40176a:	48 29 c2             	sub    rdx,rax
  40176d:	4c 89 44 24 70       	mov    QWORD PTR [rsp+0x70],r8
  401772:	48 8d 14 d1          	lea    rdx,[rcx+rdx*8]
  401776:	c6 06 01             	mov    BYTE PTR [rsi],0x1
  401779:	31 f6                	xor    esi,esi
  40177b:	f3 0f 10 25 81 62 00 	movss  xmm4,DWORD PTR [rip+0x6281]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  401782:	00 
  401783:	48 c7 42 20 ff ff ff 	mov    QWORD PTR [rdx+0x20],0xffffffffffffffff
  40178a:	ff 
  40178b:	66 89 72 28          	mov    WORD PTR [rdx+0x28],si
  40178f:	0f 28 d1             	movaps xmm2,xmm1
  401792:	48 c7 42 30 00 00 00 	mov    QWORD PTR [rdx+0x30],0x0
  401799:	00 
  40179a:	66 89 84 24 98 00 00 	mov    WORD PTR [rsp+0x98],ax
  4017a1:	00 
  4017a2:	0f 11 84 24 9c 00 00 	movups XMMWORD PTR [rsp+0x9c],xmm0
  4017a9:	00 
  4017aa:	48 b8 00 00 80 3f 00 	movabs rax,0x3f0000003f800000
  4017b1:	00 00 3f 
  4017b4:	f3 0f 10 84 24 a8 00 	movss  xmm0,DWORD PTR [rsp+0xa8]
  4017bb:	00 00 
  4017bd:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
  4017c2:	f3 0f 5c d0          	subss  xmm2,xmm0
  4017c6:	0f 2f e2             	comiss xmm4,xmm2
  4017c9:	72 15                	jb     4017e0 <testQTreePathological()+0x1f0>
  4017cb:	f3 0f 58 c1          	addss  xmm0,xmm1
  4017cf:	0f 2f c4             	comiss xmm0,xmm4
  4017d2:	0f 83 a7 01 00 00    	jae    40197f <testQTreePathological()+0x38f>
  4017d8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4017df:	00 
  4017e0:	ba 01 00 00 00       	mov    edx,0x1
  4017e5:	be 4d 78 40 00       	mov    esi,0x40784d
  4017ea:	bf 40 91 60 00       	mov    edi,0x609140
  4017ef:	e8 0c f7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4017f4:	f2 0f 10 05 44 62 00 	movsd  xmm0,QWORD PTR [rip+0x6244]        # 407a40 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0x100>
  4017fb:	00 
  4017fc:	bf 40 91 60 00       	mov    edi,0x609140
  401801:	e8 7a f7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401806:	ba 02 00 00 00       	mov    edx,0x2
  40180b:	be e0 77 40 00       	mov    esi,0x4077e0
  401810:	48 89 c7             	mov    rdi,rax
  401813:	48 89 c3             	mov    rbx,rax
  401816:	e8 e5 f6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40181b:	f2 0f 10 05 25 62 00 	movsd  xmm0,QWORD PTR [rip+0x6225]        # 407a48 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0x108>
  401822:	00 
  401823:	48 89 df             	mov    rdi,rbx
  401826:	e8 55 f7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40182b:	ba 13 00 00 00       	mov    edx,0x13
  401830:	be 27 78 40 00       	mov    esi,0x407827
  401835:	48 89 c7             	mov    rdi,rax
  401838:	e8 c3 f6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40183d:	ba 13 00 00 00       	mov    edx,0x13
  401842:	be 3b 78 40 00       	mov    esi,0x40783b
  401847:	bf 40 91 60 00       	mov    edi,0x609140
  40184c:	e8 af f6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401851:	66 0f ef c0          	pxor   xmm0,xmm0
  401855:	bf 40 91 60 00       	mov    edi,0x609140
  40185a:	f3 0f 5a 84 24 9c 00 	cvtss2sd xmm0,DWORD PTR [rsp+0x9c]
  401861:	00 00 
  401863:	e8 18 f7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401868:	ba 02 00 00 00       	mov    edx,0x2
  40186d:	be e0 77 40 00       	mov    esi,0x4077e0
  401872:	48 89 c7             	mov    rdi,rax
  401875:	48 89 c3             	mov    rbx,rax
  401878:	e8 83 f6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40187d:	66 0f ef c0          	pxor   xmm0,xmm0
  401881:	48 89 df             	mov    rdi,rbx
  401884:	f3 0f 5a 84 24 a0 00 	cvtss2sd xmm0,DWORD PTR [rsp+0xa0]
  40188b:	00 00 
  40188d:	e8 ee f6 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401892:	ba 02 00 00 00       	mov    edx,0x2
  401897:	be 02 78 40 00       	mov    esi,0x407802
  40189c:	48 89 c7             	mov    rdi,rax
  40189f:	e8 5c f6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4018a4:	ba 09 00 00 00       	mov    edx,0x9
  4018a9:	be 4f 78 40 00       	mov    esi,0x40784f
  4018ae:	bf 40 91 60 00       	mov    edi,0x609140
  4018b3:	e8 48 f6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4018b8:	66 0f ef c0          	pxor   xmm0,xmm0
  4018bc:	bf 40 91 60 00       	mov    edi,0x609140
  4018c1:	f3 0f 5a 84 24 a4 00 	cvtss2sd xmm0,DWORD PTR [rsp+0xa4]
  4018c8:	00 00 
  4018ca:	e8 b1 f6 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4018cf:	ba 09 00 00 00       	mov    edx,0x9
  4018d4:	be 59 78 40 00       	mov    esi,0x407859
  4018d9:	48 89 c7             	mov    rdi,rax
  4018dc:	48 89 c3             	mov    rbx,rax
  4018df:	e8 1c f6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4018e4:	66 0f ef c0          	pxor   xmm0,xmm0
  4018e8:	48 89 df             	mov    rdi,rbx
  4018eb:	f3 0f 5a 84 24 a8 00 	cvtss2sd xmm0,DWORD PTR [rsp+0xa8]
  4018f2:	00 00 
  4018f4:	e8 87 f6 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4018f9:	ba 01 00 00 00       	mov    edx,0x1
  4018fe:	be 39 78 40 00       	mov    esi,0x407839
  401903:	48 89 c7             	mov    rdi,rax
  401906:	e8 f5 f5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40190b:	bf ff ff ff ff       	mov    edi,0xffffffff
  401910:	e8 1b f6 ff ff       	call   400f30 <exit@plt>
  401915:	48 c1 e1 04          	shl    rcx,0x4
  401919:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
  401920:	00 
  401921:	48 29 c1             	sub    rcx,rax
  401924:	48 8d 34 cd 00 00 00 	lea    rsi,[rcx*8+0x0]
  40192b:	00 
  40192c:	e8 6f f6 ff ff       	call   400fa0 <realloc@plt>
  401931:	48 89 84 24 80 00 00 	mov    QWORD PTR [rsp+0x80],rax
  401938:	00 
  401939:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
  40193e:	48 8b bc 24 88 00 00 	mov    rdi,QWORD PTR [rsp+0x88]
  401945:	00 
  401946:	48 8d 34 00          	lea    rsi,[rax+rax*1]
  40194a:	e8 51 f6 ff ff       	call   400fa0 <realloc@plt>
  40194f:	48 8b 54 24 78       	mov    rdx,QWORD PTR [rsp+0x78]
  401954:	31 f6                	xor    esi,esi
  401956:	48 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rax
  40195d:	00 
  40195e:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
  401962:	e8 e9 f4 ff ff       	call   400e50 <memset@plt>
  401967:	48 8b 44 24 78       	mov    rax,QWORD PTR [rsp+0x78]
  40196c:	4c 8b 44 24 70       	mov    r8,QWORD PTR [rsp+0x70]
  401971:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
  401975:	48 89 4c 24 78       	mov    QWORD PTR [rsp+0x78],rcx
  40197a:	e9 59 fd ff ff       	jmp    4016d8 <testQTreePathological()+0xe8>
  40197f:	bd 32 00 00 00       	mov    ebp,0x32
  401984:	48 89 c3             	mov    rbx,rax
  401987:	0f b7 94 24 98 00 00 	movzx  edx,WORD PTR [rsp+0x98]
  40198e:	00 
  40198f:	48 8d 74 24 50       	lea    rsi,[rsp+0x50]
  401994:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  401999:	f3 0f 7e 8c 24 9c 00 	movq   xmm1,QWORD PTR [rsp+0x9c]
  4019a0:	00 00 
  4019a2:	f3 0f 7e 94 24 a4 00 	movq   xmm2,QWORD PTR [rsp+0xa4]
  4019a9:	00 00 
  4019ab:	f3 0f 7e 05 9d 60 00 	movq   xmm0,QWORD PTR [rip+0x609d]        # 407a50 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0x110>
  4019b2:	00 
  4019b3:	e8 78 42 00 00       	call   405c30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)>
  4019b8:	48 81 7c 24 78 ff ff 	cmp    QWORD PTR [rsp+0x78],0xffff
  4019bf:	00 00 
  4019c1:	0f 87 c2 0a 00 00    	ja     402489 <testQTreePathological()+0xe99>
  4019c7:	48 83 ed 01          	sub    rbp,0x1
  4019cb:	74 78                	je     401a45 <testQTreePathological()+0x455>
  4019cd:	f3 0f 10 84 24 9c 00 	movss  xmm0,DWORD PTR [rsp+0x9c]
  4019d4:	00 00 
  4019d6:	48 89 5c 24 50       	mov    QWORD PTR [rsp+0x50],rbx
  4019db:	0f 28 d8             	movaps xmm3,xmm0
  4019de:	f3 0f 10 94 24 a4 00 	movss  xmm2,DWORD PTR [rsp+0xa4]
  4019e5:	00 00 
  4019e7:	f3 0f 10 0d 11 60 00 	movss  xmm1,DWORD PTR [rip+0x6011]        # 407a00 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc0>
  4019ee:	00 
  4019ef:	f3 0f 5c da          	subss  xmm3,xmm2
  4019f3:	0f 2f cb             	comiss xmm1,xmm3
  4019f6:	0f 82 e4 fd ff ff    	jb     4017e0 <testQTreePathological()+0x1f0>
  4019fc:	f3 0f 58 c2          	addss  xmm0,xmm2
  401a00:	0f 2f c1             	comiss xmm0,xmm1
  401a03:	0f 82 d7 fd ff ff    	jb     4017e0 <testQTreePathological()+0x1f0>
  401a09:	f3 0f 10 84 24 a0 00 	movss  xmm0,DWORD PTR [rsp+0xa0]
  401a10:	00 00 
  401a12:	0f 28 d0             	movaps xmm2,xmm0
  401a15:	f3 0f 10 8c 24 a8 00 	movss  xmm1,DWORD PTR [rsp+0xa8]
  401a1c:	00 00 
  401a1e:	f3 0f 10 2d de 5f 00 	movss  xmm5,DWORD PTR [rip+0x5fde]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  401a25:	00 
  401a26:	f3 0f 5c d1          	subss  xmm2,xmm1
  401a2a:	0f 2f ea             	comiss xmm5,xmm2
  401a2d:	0f 82 ad fd ff ff    	jb     4017e0 <testQTreePathological()+0x1f0>
  401a33:	f3 0f 58 c1          	addss  xmm0,xmm1
  401a37:	0f 2f c5             	comiss xmm0,xmm5
  401a3a:	0f 83 47 ff ff ff    	jae    401987 <testQTreePathological()+0x397>
  401a40:	e9 9b fd ff ff       	jmp    4017e0 <testQTreePathological()+0x1f0>
  401a45:	ba 0a 00 00 00       	mov    edx,0xa
  401a4a:	be 7c 78 40 00       	mov    esi,0x40787c
  401a4f:	bf 40 91 60 00       	mov    edi,0x609140
  401a54:	e8 a7 f4 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401a59:	0f b7 94 24 98 00 00 	movzx  edx,WORD PTR [rsp+0x98]
  401a60:	00 
  401a61:	f3 0f 10 ac 24 9c 00 	movss  xmm5,DWORD PTR [rsp+0x9c]
  401a68:	00 00 
  401a6a:	66 0f ef c0          	pxor   xmm0,xmm0
  401a6e:	f3 0f 11 6c 24 20    	movss  DWORD PTR [rsp+0x20],xmm5
  401a74:	f3 0f 10 ac 24 a0 00 	movss  xmm5,DWORD PTR [rsp+0xa0]
  401a7b:	00 00 
  401a7d:	48 c7 44 24 60 00 00 	mov    QWORD PTR [rsp+0x60],0x0
  401a84:	00 00 
  401a86:	f3 0f 11 6c 24 1c    	movss  DWORD PTR [rsp+0x1c],xmm5
  401a8c:	f3 0f 10 ac 24 a4 00 	movss  xmm5,DWORD PTR [rsp+0xa4]
  401a93:	00 00 
  401a95:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  401a9c:	00 
  401a9d:	49 89 d6             	mov    r14,rdx
  401aa0:	f3 0f 11 6c 24 28    	movss  DWORD PTR [rsp+0x28],xmm5
  401aa6:	48 29 d0             	sub    rax,rdx
  401aa9:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
  401ab0:	00 
  401ab1:	f3 0f 10 ac 24 a8 00 	movss  xmm5,DWORD PTR [rsp+0xa8]
  401ab8:	00 00 
  401aba:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
  401abf:	48 8d 2c c2          	lea    rbp,[rdx+rax*8]
  401ac3:	f3 0f 11 6c 24 30    	movss  DWORD PTR [rsp+0x30],xmm5
  401ac9:	0f b7 45 28          	movzx  eax,WORD PTR [rbp+0x28]
  401acd:	66 83 f8 ff          	cmp    ax,0xffff
  401ad1:	0f 84 ea 07 00 00    	je     4022c1 <testQTreePathological()+0xcd1>
  401ad7:	66 83 f8 fe          	cmp    ax,0xfffe
  401adb:	0f 84 2f 07 00 00    	je     402210 <testQTreePathological()+0xc20>
  401ae1:	31 d2                	xor    edx,edx
  401ae3:	66 85 c0             	test   ax,ax
  401ae6:	0f 84 fa 00 00 00    	je     401be6 <testQTreePathological()+0x5f6>
  401aec:	45 31 e4             	xor    r12d,r12d
  401aef:	45 31 ff             	xor    r15d,r15d
  401af2:	31 c9                	xor    ecx,ecx
  401af4:	45 31 ed             	xor    r13d,r13d
  401af7:	eb 21                	jmp    401b1a <testQTreePathological()+0x52a>
  401af9:	66 44 89 31          	mov    WORD PTR [rcx],r14w
  401afd:	66 44 89 69 02       	mov    WORD PTR [rcx+0x2],r13w
  401b02:	48 83 c1 04          	add    rcx,0x4
  401b06:	48 89 4c 24 58       	mov    QWORD PTR [rsp+0x58],rcx
  401b0b:	41 83 c5 01          	add    r13d,0x1
  401b0f:	66 44 39 6d 28       	cmp    WORD PTR [rbp+0x28],r13w
  401b14:	0f 86 25 03 00 00    	jbe    401e3f <testQTreePathological()+0x84f>
  401b1a:	49 39 cf             	cmp    r15,rcx
  401b1d:	4c 89 e3             	mov    rbx,r12
  401b20:	75 d7                	jne    401af9 <testQTreePathological()+0x509>
  401b22:	4c 89 f8             	mov    rax,r15
  401b25:	4c 89 3c 24          	mov    QWORD PTR [rsp],r15
  401b29:	4c 29 e0             	sub    rax,r12
  401b2c:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  401b31:	48 c1 f8 02          	sar    rax,0x2
  401b35:	48 85 c0             	test   rax,rax
  401b38:	0f 84 2b 04 00 00    	je     401f69 <testQTreePathological()+0x979>
  401b3e:	48 8d 14 00          	lea    rdx,[rax+rax*1]
  401b42:	49 c7 c7 fc ff ff ff 	mov    r15,0xfffffffffffffffc
  401b49:	48 39 d0             	cmp    rax,rdx
  401b4c:	77 13                	ja     401b61 <testQTreePathological()+0x571>
  401b4e:	48 bb ff ff ff ff ff 	movabs rbx,0x3fffffffffffffff
  401b55:	ff ff 3f 
  401b58:	48 39 da             	cmp    rdx,rbx
  401b5b:	0f 86 42 07 00 00    	jbe    4022a3 <testQTreePathological()+0xcb3>
  401b61:	4c 89 ff             	mov    rdi,r15
  401b64:	e8 77 f3 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  401b69:	49 89 c1             	mov    r9,rax
  401b6c:	49 01 c7             	add    r15,rax
  401b6f:	48 89 c3             	mov    rbx,rax
  401b72:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
  401b77:	4c 39 24 24          	cmp    QWORD PTR [rsp],r12
  401b7b:	49 8d 04 11          	lea    rax,[r9+rdx*1]
  401b7f:	49 8d 4c 11 04       	lea    rcx,[r9+rdx*1+0x4]
  401b84:	66 44 89 30          	mov    WORD PTR [rax],r14w
  401b88:	66 44 89 68 02       	mov    WORD PTR [rax+0x2],r13w
  401b8d:	0f 84 c8 03 00 00    	je     401f5b <testQTreePathological()+0x96b>
  401b93:	4c 89 cf             	mov    rdi,r9
  401b96:	4c 89 e6             	mov    rsi,r12
  401b99:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
  401b9d:	e8 ee f3 ff ff       	call   400f90 <memmove@plt>
  401ba2:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
  401ba6:	49 89 c1             	mov    r9,rax
  401ba9:	4c 89 e7             	mov    rdi,r12
  401bac:	4c 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],r9
  401bb1:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
  401bb5:	e8 16 f3 ff ff       	call   400ed0 <operator delete(void*)@plt>
  401bba:	4c 8b 4c 24 10       	mov    r9,QWORD PTR [rsp+0x10]
  401bbf:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
  401bc3:	4c 89 0c 24          	mov    QWORD PTR [rsp],r9
  401bc7:	4c 89 7c 24 60       	mov    QWORD PTR [rsp+0x60],r15
  401bcc:	4d 89 cc             	mov    r12,r9
  401bcf:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  401bd4:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
  401bd8:	0f 16 04 24          	movhps xmm0,QWORD PTR [rsp]
  401bdc:	0f 29 44 24 50       	movaps XMMWORD PTR [rsp+0x50],xmm0
  401be1:	e9 25 ff ff ff       	jmp    401b0b <testQTreePathological()+0x51b>
  401be6:	48 8b 3d 33 75 20 00 	mov    rdi,QWORD PTR [rip+0x207533]        # 609120 <stderr@@GLIBC_2.2.5>
  401bed:	b9 32 00 00 00       	mov    ecx,0x32
  401bf2:	be 40 77 40 00       	mov    esi,0x407740
  401bf7:	31 c0                	xor    eax,eax
  401bf9:	e8 52 f3 ff ff       	call   400f50 <fprintf@plt>
  401bfe:	0f b7 94 24 98 00 00 	movzx  edx,WORD PTR [rsp+0x98]
  401c05:	00 
  401c06:	48 8b 8c 24 80 00 00 	mov    rcx,QWORD PTR [rsp+0x80]
  401c0d:	00 
  401c0e:	f3 0f 10 ac 24 9c 00 	movss  xmm5,DWORD PTR [rsp+0x9c]
  401c15:	00 00 
  401c17:	f3 0f 11 6c 24 20    	movss  DWORD PTR [rsp+0x20],xmm5
  401c1d:	f3 0f 10 bc 24 a0 00 	movss  xmm7,DWORD PTR [rsp+0xa0]
  401c24:	00 00 
  401c26:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  401c2d:	00 
  401c2e:	f3 0f 10 ac 24 a4 00 	movss  xmm5,DWORD PTR [rsp+0xa4]
  401c35:	00 00 
  401c37:	f3 0f 10 b4 24 a8 00 	movss  xmm6,DWORD PTR [rsp+0xa8]
  401c3e:	00 00 
  401c40:	48 29 d0             	sub    rax,rdx
  401c43:	f3 0f 11 7c 24 10    	movss  DWORD PTR [rsp+0x10],xmm7
  401c49:	48 8d 2c c1          	lea    rbp,[rcx+rax*8]
  401c4d:	f3 0f 11 6c 24 1c    	movss  DWORD PTR [rsp+0x1c],xmm5
  401c53:	f3 0f 11 34 24       	movss  DWORD PTR [rsp],xmm6
  401c58:	0f b7 45 28          	movzx  eax,WORD PTR [rbp+0x28]
  401c5c:	66 83 f8 ff          	cmp    ax,0xffff
  401c60:	0f 84 85 03 00 00    	je     401feb <testQTreePathological()+0x9fb>
  401c66:	66 83 f8 fe          	cmp    ax,0xfffe
  401c6a:	75 2a                	jne    401c96 <testQTreePathological()+0x6a6>
  401c6c:	48 89 e8             	mov    rax,rbp
  401c6f:	0f b7 50 20          	movzx  edx,WORD PTR [rax+0x20]
  401c73:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  401c7a:	00 
  401c7b:	48 29 d0             	sub    rax,rdx
  401c7e:	48 8d 04 c1          	lea    rax,[rcx+rax*8]
  401c82:	0f b7 50 28          	movzx  edx,WORD PTR [rax+0x28]
  401c86:	66 83 fa fe          	cmp    dx,0xfffe
  401c8a:	74 e3                	je     401c6f <testQTreePathological()+0x67f>
  401c8c:	66 83 fa ff          	cmp    dx,0xffff
  401c90:	0f 84 de 02 00 00    	je     401f74 <testQTreePathological()+0x984>
  401c96:	ba 05 00 00 00       	mov    edx,0x5
  401c9b:	be 07 78 40 00       	mov    esi,0x407807
  401ca0:	bf 40 91 60 00       	mov    edi,0x609140
  401ca5:	e8 56 f2 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401caa:	ba 01 00 00 00       	mov    edx,0x1
  401caf:	be de 77 40 00       	mov    esi,0x4077de
  401cb4:	bf 40 91 60 00       	mov    edi,0x609140
  401cb9:	e8 42 f2 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401cbe:	f3 0f 10 44 24 20    	movss  xmm0,DWORD PTR [rsp+0x20]
  401cc4:	bf 40 91 60 00       	mov    edi,0x609140
  401cc9:	f3 0f 5c 44 24 1c    	subss  xmm0,DWORD PTR [rsp+0x1c]
  401ccf:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  401cd3:	e8 a8 f2 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401cd8:	ba 02 00 00 00       	mov    edx,0x2
  401cdd:	be e0 77 40 00       	mov    esi,0x4077e0
  401ce2:	48 89 c7             	mov    rdi,rax
  401ce5:	48 89 c3             	mov    rbx,rax
  401ce8:	e8 13 f2 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401ced:	f3 0f 10 5c 24 10    	movss  xmm3,DWORD PTR [rsp+0x10]
  401cf3:	48 89 df             	mov    rdi,rbx
  401cf6:	f3 0f 5c 1c 24       	subss  xmm3,DWORD PTR [rsp]
  401cfb:	66 0f ef c0          	pxor   xmm0,xmm0
  401cff:	f3 0f 5a c3          	cvtss2sd xmm0,xmm3
  401d03:	e8 78 f2 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401d08:	ba 02 00 00 00       	mov    edx,0x2
  401d0d:	be e3 77 40 00       	mov    esi,0x4077e3
  401d12:	48 89 c7             	mov    rdi,rax
  401d15:	48 89 c3             	mov    rbx,rax
  401d18:	e8 e3 f1 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401d1d:	f3 0f 10 7c 24 1c    	movss  xmm7,DWORD PTR [rsp+0x1c]
  401d23:	48 89 df             	mov    rdi,rbx
  401d26:	f3 0f 58 7c 24 20    	addss  xmm7,DWORD PTR [rsp+0x20]
  401d2c:	66 0f ef c0          	pxor   xmm0,xmm0
  401d30:	f3 0f 5a c7          	cvtss2sd xmm0,xmm7
  401d34:	e8 47 f2 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401d39:	ba 02 00 00 00       	mov    edx,0x2
  401d3e:	be e0 77 40 00       	mov    esi,0x4077e0
  401d43:	48 89 c7             	mov    rdi,rax
  401d46:	48 89 c3             	mov    rbx,rax
  401d49:	e8 b2 f1 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401d4e:	f3 0f 10 04 24       	movss  xmm0,DWORD PTR [rsp]
  401d53:	48 89 df             	mov    rdi,rbx
  401d56:	f3 0f 58 44 24 10    	addss  xmm0,DWORD PTR [rsp+0x10]
  401d5c:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  401d60:	e8 1b f2 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401d65:	ba 02 00 00 00       	mov    edx,0x2
  401d6a:	be e6 77 40 00       	mov    esi,0x4077e6
  401d6f:	48 89 c7             	mov    rdi,rax
  401d72:	e8 89 f1 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401d77:	ba 01 00 00 00       	mov    edx,0x1
  401d7c:	be 05 78 40 00       	mov    esi,0x407805
  401d81:	bf 40 91 60 00       	mov    edi,0x609140
  401d86:	e8 75 f1 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401d8b:	0f b7 45 28          	movzx  eax,WORD PTR [rbp+0x28]
  401d8f:	66 83 f8 fe          	cmp    ax,0xfffe
  401d93:	0f 85 0c 01 00 00    	jne    401ea5 <testQTreePathological()+0x8b5>
  401d99:	4c 8d 6d 20          	lea    r13,[rbp+0x20]
  401d9d:	48 89 eb             	mov    rbx,rbp
  401da0:	f3 0f 10 33          	movss  xmm6,DWORD PTR [rbx]
  401da4:	ba 02 00 00 00       	mov    edx,0x2
  401da9:	be 4c 78 40 00       	mov    esi,0x40784c
  401dae:	f3 0f 10 5b 04       	movss  xmm3,DWORD PTR [rbx+0x4]
  401db3:	bf 40 91 60 00       	mov    edi,0x609140
  401db8:	f3 0f 11 74 24 28    	movss  DWORD PTR [rsp+0x28],xmm6
  401dbe:	f3 0f 11 5c 24 30    	movss  DWORD PTR [rsp+0x30],xmm3
  401dc4:	e8 37 f1 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401dc9:	66 0f ef c0          	pxor   xmm0,xmm0
  401dcd:	bf 40 91 60 00       	mov    edi,0x609140
  401dd2:	f3 0f 5a 44 24 28    	cvtss2sd xmm0,DWORD PTR [rsp+0x28]
  401dd8:	e8 a3 f1 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401ddd:	ba 02 00 00 00       	mov    edx,0x2
  401de2:	be e0 77 40 00       	mov    esi,0x4077e0
  401de7:	48 89 c7             	mov    rdi,rax
  401dea:	49 89 c4             	mov    r12,rax
  401ded:	e8 0e f1 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401df2:	66 0f ef c0          	pxor   xmm0,xmm0
  401df6:	4c 89 e7             	mov    rdi,r12
  401df9:	f3 0f 5a 44 24 30    	cvtss2sd xmm0,DWORD PTR [rsp+0x30]
  401dff:	e8 7c f1 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401e04:	ba 01 00 00 00       	mov    edx,0x1
  401e09:	be 0d 78 40 00       	mov    esi,0x40780d
  401e0e:	48 89 c7             	mov    rdi,rax
  401e11:	e8 ea f0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401e16:	48 83 c3 08          	add    rbx,0x8
  401e1a:	49 39 dd             	cmp    r13,rbx
  401e1d:	75 81                	jne    401da0 <testQTreePathological()+0x7b0>
  401e1f:	0f b7 55 20          	movzx  edx,WORD PTR [rbp+0x20]
  401e23:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  401e2a:	00 
  401e2b:	48 29 d0             	sub    rax,rdx
  401e2e:	48 8b 94 24 80 00 00 	mov    rdx,QWORD PTR [rsp+0x80]
  401e35:	00 
  401e36:	48 8d 2c c2          	lea    rbp,[rdx+rax*8]
  401e3a:	e9 4c ff ff ff       	jmp    401d8b <testQTreePathological()+0x79b>
  401e3f:	48 29 d9             	sub    rcx,rbx
  401e42:	48 89 ca             	mov    rdx,rcx
  401e45:	48 c1 fa 02          	sar    rdx,0x2
  401e49:	48 81 f9 c8 00 00 00 	cmp    rcx,0xc8
  401e50:	0f 85 90 fd ff ff    	jne    401be6 <testQTreePathological()+0x5f6>
  401e56:	ba 14 00 00 00       	mov    edx,0x14
  401e5b:	be 87 78 40 00       	mov    esi,0x407887
  401e60:	bf 40 91 60 00       	mov    edi,0x609140
  401e65:	e8 96 f0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401e6a:	48 8b 7c 24 50       	mov    rdi,QWORD PTR [rsp+0x50]
  401e6f:	48 85 ff             	test   rdi,rdi
  401e72:	74 05                	je     401e79 <testQTreePathological()+0x889>
  401e74:	e8 57 f0 ff ff       	call   400ed0 <operator delete(void*)@plt>
  401e79:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
  401e80:	00 
  401e81:	e8 9a f0 ff ff       	call   400f20 <free@plt>
  401e86:	48 8b bc 24 88 00 00 	mov    rdi,QWORD PTR [rsp+0x88]
  401e8d:	00 
  401e8e:	e8 8d f0 ff ff       	call   400f20 <free@plt>
  401e93:	48 81 c4 b8 00 00 00 	add    rsp,0xb8
  401e9a:	5b                   	pop    rbx
  401e9b:	5d                   	pop    rbp
  401e9c:	41 5c                	pop    r12
  401e9e:	41 5d                	pop    r13
  401ea0:	41 5e                	pop    r14
  401ea2:	41 5f                	pop    r15
  401ea4:	c3                   	ret    
  401ea5:	66 83 f8 ff          	cmp    ax,0xffff
  401ea9:	0f 84 f9 05 00 00    	je     4024a8 <testQTreePathological()+0xeb8>
  401eaf:	66 85 c0             	test   ax,ax
  401eb2:	0f 84 8a 00 00 00    	je     401f42 <testQTreePathological()+0x952>
  401eb8:	31 db                	xor    ebx,ebx
  401eba:	f3 0f 10 7c dd 00    	movss  xmm7,DWORD PTR [rbp+rbx*8+0x0]
  401ec0:	ba 02 00 00 00       	mov    edx,0x2
  401ec5:	be 4c 78 40 00       	mov    esi,0x40784c
  401eca:	f3 0f 10 64 dd 04    	movss  xmm4,DWORD PTR [rbp+rbx*8+0x4]
  401ed0:	bf 40 91 60 00       	mov    edi,0x609140
  401ed5:	f3 0f 11 3c 24       	movss  DWORD PTR [rsp],xmm7
  401eda:	f3 0f 11 64 24 10    	movss  DWORD PTR [rsp+0x10],xmm4
  401ee0:	e8 1b f0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401ee5:	66 0f ef c0          	pxor   xmm0,xmm0
  401ee9:	bf 40 91 60 00       	mov    edi,0x609140
  401eee:	f3 0f 5a 04 24       	cvtss2sd xmm0,DWORD PTR [rsp]
  401ef3:	e8 88 f0 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401ef8:	ba 02 00 00 00       	mov    edx,0x2
  401efd:	be e0 77 40 00       	mov    esi,0x4077e0
  401f02:	48 89 c7             	mov    rdi,rax
  401f05:	49 89 c4             	mov    r12,rax
  401f08:	e8 f3 ef ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401f0d:	66 0f ef c0          	pxor   xmm0,xmm0
  401f11:	4c 89 e7             	mov    rdi,r12
  401f14:	f3 0f 5a 44 24 10    	cvtss2sd xmm0,DWORD PTR [rsp+0x10]
  401f1a:	e8 61 f0 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401f1f:	ba 01 00 00 00       	mov    edx,0x1
  401f24:	be 0d 78 40 00       	mov    esi,0x40780d
  401f29:	48 89 c7             	mov    rdi,rax
  401f2c:	e8 cf ef ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401f31:	0f b7 45 28          	movzx  eax,WORD PTR [rbp+0x28]
  401f35:	48 83 c3 01          	add    rbx,0x1
  401f39:	48 39 d8             	cmp    rax,rbx
  401f3c:	0f 87 78 ff ff ff    	ja     401eba <testQTreePathological()+0x8ca>
  401f42:	ba 01 00 00 00       	mov    edx,0x1
  401f47:	be 39 78 40 00       	mov    esi,0x407839
  401f4c:	bf 40 91 60 00       	mov    edi,0x609140
  401f51:	e8 aa ef ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401f56:	e9 0f ff ff ff       	jmp    401e6a <testQTreePathological()+0x87a>
  401f5b:	4d 85 e4             	test   r12,r12
  401f5e:	0f 84 5f fc ff ff    	je     401bc3 <testQTreePathological()+0x5d3>
  401f64:	e9 40 fc ff ff       	jmp    401ba9 <testQTreePathological()+0x5b9>
  401f69:	41 bf 04 00 00 00    	mov    r15d,0x4
  401f6f:	e9 ed fb ff ff       	jmp    401b61 <testQTreePathological()+0x571>
  401f74:	ba 1b 00 00 00       	mov    edx,0x1b
  401f79:	be e9 77 40 00       	mov    esi,0x4077e9
  401f7e:	bf 40 91 60 00       	mov    edi,0x609140
  401f83:	e8 78 ef ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401f88:	ba 01 00 00 00       	mov    edx,0x1
  401f8d:	be de 77 40 00       	mov    esi,0x4077de
  401f92:	bf 40 91 60 00       	mov    edi,0x609140
  401f97:	e8 64 ef ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401f9c:	f3 0f 10 44 24 20    	movss  xmm0,DWORD PTR [rsp+0x20]
  401fa2:	bf 40 91 60 00       	mov    edi,0x609140
  401fa7:	f3 0f 5c 44 24 1c    	subss  xmm0,DWORD PTR [rsp+0x1c]
  401fad:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  401fb1:	e8 ca ef ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401fb6:	ba 02 00 00 00       	mov    edx,0x2
  401fbb:	be e0 77 40 00       	mov    esi,0x4077e0
  401fc0:	48 89 c7             	mov    rdi,rax
  401fc3:	48 89 c3             	mov    rbx,rax
  401fc6:	e8 35 ef ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401fcb:	f3 0f 10 74 24 10    	movss  xmm6,DWORD PTR [rsp+0x10]
  401fd1:	48 89 df             	mov    rdi,rbx
  401fd4:	f3 0f 5c 34 24       	subss  xmm6,DWORD PTR [rsp]
  401fd9:	66 0f ef c0          	pxor   xmm0,xmm0
  401fdd:	f3 0f 5a c6          	cvtss2sd xmm0,xmm6
  401fe1:	e8 9a ef ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  401fe6:	e9 1d fd ff ff       	jmp    401d08 <testQTreePathological()+0x718>
  401feb:	ba 05 00 00 00       	mov    edx,0x5
  401ff0:	be d8 77 40 00       	mov    esi,0x4077d8
  401ff5:	bf 40 91 60 00       	mov    edi,0x609140
  401ffa:	e8 01 ef ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  401fff:	ba 01 00 00 00       	mov    edx,0x1
  402004:	be de 77 40 00       	mov    esi,0x4077de
  402009:	bf 40 91 60 00       	mov    edi,0x609140
  40200e:	e8 ed ee ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  402013:	f3 0f 10 44 24 20    	movss  xmm0,DWORD PTR [rsp+0x20]
  402019:	bf 40 91 60 00       	mov    edi,0x609140
  40201e:	f3 0f 5c 44 24 1c    	subss  xmm0,DWORD PTR [rsp+0x1c]
  402024:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  402028:	e8 53 ef ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40202d:	ba 02 00 00 00       	mov    edx,0x2
  402032:	be e0 77 40 00       	mov    esi,0x4077e0
  402037:	48 89 c7             	mov    rdi,rax
  40203a:	48 89 c3             	mov    rbx,rax
  40203d:	e8 be ee ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  402042:	f3 0f 10 74 24 10    	movss  xmm6,DWORD PTR [rsp+0x10]
  402048:	48 89 df             	mov    rdi,rbx
  40204b:	f3 0f 5c 34 24       	subss  xmm6,DWORD PTR [rsp]
  402050:	66 0f ef c0          	pxor   xmm0,xmm0
  402054:	f3 0f 5a c6          	cvtss2sd xmm0,xmm6
  402058:	e8 23 ef ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40205d:	ba 02 00 00 00       	mov    edx,0x2
  402062:	be e3 77 40 00       	mov    esi,0x4077e3
  402067:	48 89 c7             	mov    rdi,rax
  40206a:	48 89 c3             	mov    rbx,rax
  40206d:	e8 8e ee ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  402072:	f3 0f 10 7c 24 1c    	movss  xmm7,DWORD PTR [rsp+0x1c]
  402078:	48 89 df             	mov    rdi,rbx
  40207b:	f3 0f 58 7c 24 20    	addss  xmm7,DWORD PTR [rsp+0x20]
  402081:	66 0f ef c0          	pxor   xmm0,xmm0
  402085:	f3 0f 5a c7          	cvtss2sd xmm0,xmm7
  402089:	e8 f2 ee ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40208e:	ba 02 00 00 00       	mov    edx,0x2
  402093:	be e0 77 40 00       	mov    esi,0x4077e0
  402098:	48 89 c7             	mov    rdi,rax
  40209b:	48 89 c3             	mov    rbx,rax
  40209e:	e8 5d ee ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4020a3:	f3 0f 10 04 24       	movss  xmm0,DWORD PTR [rsp]
  4020a8:	48 89 df             	mov    rdi,rbx
  4020ab:	f3 0f 58 44 24 10    	addss  xmm0,DWORD PTR [rsp+0x10]
  4020b1:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  4020b5:	e8 c6 ee ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4020ba:	ba 02 00 00 00       	mov    edx,0x2
  4020bf:	be e6 77 40 00       	mov    esi,0x4077e6
  4020c4:	48 89 c7             	mov    rdi,rax
  4020c7:	e8 34 ee ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4020cc:	ba 02 00 00 00       	mov    edx,0x2
  4020d1:	be b6 78 40 00       	mov    esi,0x4078b6
  4020d6:	bf 40 91 60 00       	mov    edi,0x609140
  4020db:	e8 20 ee ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4020e0:	45 31 e4             	xor    r12d,r12d
  4020e3:	45 31 ed             	xor    r13d,r13d
  4020e6:	b8 4e 00 00 00       	mov    eax,0x4e
  4020eb:	48 8d 74 24 47       	lea    rsi,[rsp+0x47]
  4020f0:	ba 01 00 00 00       	mov    edx,0x1
  4020f5:	bf 40 91 60 00       	mov    edi,0x609140
  4020fa:	88 44 24 47          	mov    BYTE PTR [rsp+0x47],al
  4020fe:	e8 fd ed ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  402103:	4c 89 e3             	mov    rbx,r12
  402106:	48 8d 74 24 45       	lea    rsi,[rsp+0x45]
  40210b:	48 89 c7             	mov    rdi,rax
  40210e:	83 e3 01             	and    ebx,0x1
  402111:	48 83 fb 01          	cmp    rbx,0x1
  402115:	19 d2                	sbb    edx,edx
  402117:	83 e2 12             	and    edx,0x12
  40211a:	83 c2 45             	add    edx,0x45
  40211d:	88 54 24 45          	mov    BYTE PTR [rsp+0x45],dl
  402121:	ba 01 00 00 00       	mov    edx,0x1
  402126:	e8 d5 ed ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40212b:	48 8d 74 24 46       	lea    rsi,[rsp+0x46]
  402130:	ba 01 00 00 00       	mov    edx,0x1
  402135:	48 89 c7             	mov    rdi,rax
  402138:	c6 44 24 46 20       	mov    BYTE PTR [rsp+0x46],0x20
  40213d:	e8 be ed ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  402142:	8d 04 1b             	lea    eax,[rbx+rbx*1]
  402145:	66 0f ef c0          	pxor   xmm0,xmm0
  402149:	b9 ff ff ff ff       	mov    ecx,0xffffffff
  40214e:	66 0f ef d2          	pxor   xmm2,xmm2
  402152:	83 e8 01             	sub    eax,0x1
  402155:	f3 0f 10 1d a7 58 00 	movss  xmm3,DWORD PTR [rip+0x58a7]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  40215c:	00 
  40215d:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
  402161:	31 c0                	xor    eax,eax
  402163:	4d 85 ed             	test   r13,r13
  402166:	42 0f b7 74 65 20    	movzx  esi,WORD PTR [rbp+r12*2+0x20]
  40216c:	0f 95 c0             	setne  al
  40216f:	f3 0f 59 1c 24       	mulss  xmm3,DWORD PTR [rsp]
  402174:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  402179:	8d 04 41             	lea    eax,[rcx+rax*2]
  40217c:	f3 0f 10 0d 80 58 00 	movss  xmm1,DWORD PTR [rip+0x5880]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  402183:	00 
  402184:	f3 0f 59 4c 24 1c    	mulss  xmm1,DWORD PTR [rsp+0x1c]
  40218a:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
  40218e:	f3 0f 59 c1          	mulss  xmm0,xmm1
  402192:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  402198:	f3 0f 59 d3          	mulss  xmm2,xmm3
  40219c:	f3 0f 58 54 24 10    	addss  xmm2,DWORD PTR [rsp+0x10]
  4021a2:	66 0f 7e c0          	movd   eax,xmm0
  4021a6:	f3 0f 11 54 24 28    	movss  DWORD PTR [rsp+0x28],xmm2
  4021ac:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  4021b1:	48 c1 e2 20          	shl    rdx,0x20
  4021b5:	48 09 d0             	or     rax,rdx
  4021b8:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  4021bd:	66 0f 7e d8          	movd   eax,xmm3
  4021c1:	f3 0f 7e 44 24 28    	movq   xmm0,QWORD PTR [rsp+0x28]
  4021c7:	48 89 c2             	mov    rdx,rax
  4021ca:	66 0f 7e c8          	movd   eax,xmm1
  4021ce:	48 c1 e2 20          	shl    rdx,0x20
  4021d2:	48 09 d0             	or     rax,rdx
  4021d5:	ba 01 00 00 00       	mov    edx,0x1
  4021da:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  4021df:	f3 0f 7e 4c 24 28    	movq   xmm1,QWORD PTR [rsp+0x28]
  4021e5:	e8 26 33 00 00       	call   405510 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const>
  4021ea:	49 83 c4 01          	add    r12,0x1
  4021ee:	49 83 fc 04          	cmp    r12,0x4
  4021f2:	0f 84 72 fc ff ff    	je     401e6a <testQTreePathological()+0x87a>
  4021f8:	4d 89 e5             	mov    r13,r12
  4021fb:	41 83 e5 02          	and    r13d,0x2
  4021ff:	49 83 fd 01          	cmp    r13,0x1
  402203:	19 c0                	sbb    eax,eax
  402205:	83 e0 fb             	and    eax,0xfffffffb
  402208:	83 c0 53             	add    eax,0x53
  40220b:	e9 db fe ff ff       	jmp    4020eb <testQTreePathological()+0xafb>
  402210:	48 8d 5c 24 4c       	lea    rbx,[rsp+0x4c]
  402215:	45 31 e4             	xor    r12d,r12d
  402218:	48 8d 7c 24 50       	lea    rdi,[rsp+0x50]
  40221d:	48 89 de             	mov    rsi,rbx
  402220:	66 44 89 74 24 4c    	mov    WORD PTR [rsp+0x4c],r14w
  402226:	66 44 89 64 24 4e    	mov    WORD PTR [rsp+0x4e],r12w
  40222c:	e8 1f 44 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  402231:	41 83 c4 01          	add    r12d,0x1
  402235:	66 41 83 fc 04       	cmp    r12w,0x4
  40223a:	75 dc                	jne    402218 <testQTreePathological()+0xc28>
  40223c:	f3 0f 10 7c 24 1c    	movss  xmm7,DWORD PTR [rsp+0x1c]
  402242:	0f b7 4d 20          	movzx  ecx,WORD PTR [rbp+0x20]
  402246:	f3 0f 10 44 24 20    	movss  xmm0,DWORD PTR [rsp+0x20]
  40224c:	0f 14 c7             	unpcklps xmm0,xmm7
  40224f:	f3 0f 10 4c 24 28    	movss  xmm1,DWORD PTR [rsp+0x28]
  402255:	f3 0f 10 6c 24 30    	movss  xmm5,DWORD PTR [rsp+0x30]
  40225b:	0f 14 cd             	unpcklps xmm1,xmm5
  40225e:	0f 28 f8             	movaps xmm7,xmm0
  402261:	0f 16 f9             	movlhps xmm7,xmm1
  402264:	0f 29 3c 24          	movaps XMMWORD PTR [rsp],xmm7
  402268:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  40226d:	48 8d 54 24 50       	lea    rdx,[rsp+0x50]
  402272:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  402277:	48 89 de             	mov    rsi,rbx
  40227a:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  40227f:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  402283:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  402288:	e8 d3 44 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  40228d:	48 8b 4c 24 58       	mov    rcx,QWORD PTR [rsp+0x58]
  402292:	48 2b 4c 24 50       	sub    rcx,QWORD PTR [rsp+0x50]
  402297:	48 89 ca             	mov    rdx,rcx
  40229a:	48 c1 fa 02          	sar    rdx,0x2
  40229e:	e9 a6 fb ff ff       	jmp    401e49 <testQTreePathological()+0x859>
  4022a3:	48 85 d2             	test   rdx,rdx
  4022a6:	4c 8d 3c c5 00 00 00 	lea    r15,[rax*8+0x0]
  4022ad:	00 
  4022ae:	0f 85 ad f8 ff ff    	jne    401b61 <testQTreePathological()+0x571>
  4022b4:	31 db                	xor    ebx,ebx
  4022b6:	45 31 ff             	xor    r15d,r15d
  4022b9:	45 31 c9             	xor    r9d,r9d
  4022bc:	e9 b1 f8 ff ff       	jmp    401b72 <testQTreePathological()+0x582>
  4022c1:	f3 0f 10 3d 3b 57 00 	movss  xmm7,DWORD PTR [rip+0x573b]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  4022c8:	00 
  4022c9:	0f b7 4d 20          	movzx  ecx,WORD PTR [rbp+0x20]
  4022cd:	f3 0f 59 fd          	mulss  xmm7,xmm5
  4022d1:	f3 0f 10 2d 2b 57 00 	movss  xmm5,DWORD PTR [rip+0x572b]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  4022d8:	00 
  4022d9:	f3 0f 59 6c 24 28    	mulss  xmm5,DWORD PTR [rsp+0x28]
  4022df:	f3 0f 10 74 24 20    	movss  xmm6,DWORD PTR [rsp+0x20]
  4022e5:	48 8d 5c 24 4c       	lea    rbx,[rsp+0x4c]
  4022ea:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  4022ef:	48 89 de             	mov    rsi,rbx
  4022f2:	f3 0f 5c f5          	subss  xmm6,xmm5
  4022f6:	f3 0f 11 6c 24 10    	movss  DWORD PTR [rsp+0x10],xmm5
  4022fc:	0f 28 c6             	movaps xmm0,xmm6
  4022ff:	f3 0f 10 74 24 1c    	movss  xmm6,DWORD PTR [rsp+0x1c]
  402305:	f3 0f 5c f7          	subss  xmm6,xmm7
  402309:	66 0f 7e c0          	movd   eax,xmm0
  40230d:	f3 0f 11 34 24       	movss  DWORD PTR [rsp],xmm6
  402312:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  402316:	48 c1 e2 20          	shl    rdx,0x20
  40231a:	48 09 d0             	or     rax,rdx
  40231d:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  402321:	66 0f 7e f8          	movd   eax,xmm7
  402325:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  40232a:	48 89 c2             	mov    rdx,rax
  40232d:	66 0f 7e e8          	movd   eax,xmm5
  402331:	48 c1 e2 20          	shl    rdx,0x20
  402335:	f3 0f 11 3c 24       	movss  DWORD PTR [rsp],xmm7
  40233a:	48 09 d0             	or     rax,rdx
  40233d:	48 8d 54 24 50       	lea    rdx,[rsp+0x50]
  402342:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
  402347:	f3 0f 7e 4c 24 38    	movq   xmm1,QWORD PTR [rsp+0x38]
  40234d:	e8 0e 44 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  402352:	f3 0f 10 0d ae 56 00 	movss  xmm1,DWORD PTR [rip+0x56ae]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  402359:	00 
  40235a:	0f b7 4d 22          	movzx  ecx,WORD PTR [rbp+0x22]
  40235e:	f3 0f 59 4c 24 30    	mulss  xmm1,DWORD PTR [rsp+0x30]
  402364:	f3 0f 10 6c 24 10    	movss  xmm5,DWORD PTR [rsp+0x10]
  40236a:	f3 0f 10 74 24 20    	movss  xmm6,DWORD PTR [rsp+0x20]
  402370:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  402375:	f3 0f 58 f5          	addss  xmm6,xmm5
  402379:	48 89 de             	mov    rsi,rbx
  40237c:	f3 0f 58 4c 24 1c    	addss  xmm1,DWORD PTR [rsp+0x1c]
  402382:	66 0f 7e f0          	movd   eax,xmm6
  402386:	f3 0f 11 74 24 38    	movss  DWORD PTR [rsp+0x38],xmm6
  40238c:	f3 0f 11 4c 24 10    	movss  DWORD PTR [rsp+0x10],xmm1
  402392:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
  402397:	48 c1 e2 20          	shl    rdx,0x20
  40239b:	48 09 d0             	or     rax,rdx
  40239e:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4023a3:	8b 04 24             	mov    eax,DWORD PTR [rsp]
  4023a6:	f3 0f 7e 44 24 10    	movq   xmm0,QWORD PTR [rsp+0x10]
  4023ac:	f3 0f 11 6c 24 10    	movss  DWORD PTR [rsp+0x10],xmm5
  4023b2:	48 89 c2             	mov    rdx,rax
  4023b5:	66 0f 7e e8          	movd   eax,xmm5
  4023b9:	48 c1 e2 20          	shl    rdx,0x20
  4023bd:	48 09 d0             	or     rax,rdx
  4023c0:	48 8d 54 24 50       	lea    rdx,[rsp+0x50]
  4023c5:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  4023ca:	f3 0f 7e 4c 24 30    	movq   xmm1,QWORD PTR [rsp+0x30]
  4023d0:	e8 8b 43 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  4023d5:	f3 0f 10 05 2b 56 00 	movss  xmm0,DWORD PTR [rip+0x562b]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  4023dc:	00 
  4023dd:	0f b7 4d 24          	movzx  ecx,WORD PTR [rbp+0x24]
  4023e1:	f3 0f 59 44 24 28    	mulss  xmm0,DWORD PTR [rsp+0x28]
  4023e7:	f3 0f 10 3c 24       	movss  xmm7,DWORD PTR [rsp]
  4023ec:	f3 0f 10 5c 24 1c    	movss  xmm3,DWORD PTR [rsp+0x1c]
  4023f2:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  4023f7:	f3 0f 58 df          	addss  xmm3,xmm7
  4023fb:	f3 0f 10 4c 24 10    	movss  xmm1,DWORD PTR [rsp+0x10]
  402401:	48 89 de             	mov    rsi,rbx
  402404:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  40240a:	66 0f 7e da          	movd   edx,xmm3
  40240e:	f3 0f 11 5c 24 1c    	movss  DWORD PTR [rsp+0x1c],xmm3
  402414:	48 c1 e2 20          	shl    rdx,0x20
  402418:	66 0f 7e c0          	movd   eax,xmm0
  40241c:	48 09 d0             	or     rax,rdx
  40241f:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  402423:	66 0f 7e f8          	movd   eax,xmm7
  402427:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  40242c:	48 89 c2             	mov    rdx,rax
  40242f:	66 0f 7e c8          	movd   eax,xmm1
  402433:	48 c1 e2 20          	shl    rdx,0x20
  402437:	f3 0f 11 3c 24       	movss  DWORD PTR [rsp],xmm7
  40243c:	48 09 d0             	or     rax,rdx
  40243f:	48 8d 54 24 50       	lea    rdx,[rsp+0x50]
  402444:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
  402449:	f3 0f 7e 4c 24 20    	movq   xmm1,QWORD PTR [rsp+0x20]
  40244f:	e8 0c 43 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  402454:	f3 0f 10 4c 24 38    	movss  xmm1,DWORD PTR [rsp+0x38]
  40245a:	0f b7 4d 26          	movzx  ecx,WORD PTR [rbp+0x26]
  40245e:	f3 0f 10 5c 24 1c    	movss  xmm3,DWORD PTR [rsp+0x1c]
  402464:	0f 14 cb             	unpcklps xmm1,xmm3
  402467:	f3 0f 10 3c 24       	movss  xmm7,DWORD PTR [rsp]
  40246c:	f3 0f 10 44 24 10    	movss  xmm0,DWORD PTR [rsp+0x10]
  402472:	0f 14 c7             	unpcklps xmm0,xmm7
  402475:	0f 28 e9             	movaps xmm5,xmm1
  402478:	0f 16 e8             	movlhps xmm5,xmm0
  40247b:	0f 29 2c 24          	movaps XMMWORD PTR [rsp],xmm5
  40247f:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  402484:	e9 e4 fd ff ff       	jmp    40226d <testQTreePathological()+0xc7d>
  402489:	b9 40 79 40 00       	mov    ecx,0x407940
  40248e:	ba aa 00 00 00       	mov    edx,0xaa
  402493:	be 63 78 40 00       	mov    esi,0x407863
  402498:	bf 08 77 40 00       	mov    edi,0x407708
  40249d:	e8 be e9 ff ff       	call   400e60 <__assert_fail@plt>
  4024a2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  4024a8:	48 8d 74 24 48       	lea    rsi,[rsp+0x48]
  4024ad:	ba 01 00 00 00       	mov    edx,0x1
  4024b2:	bf 40 91 60 00       	mov    edi,0x609140
  4024b7:	c6 44 24 48 0a       	mov    BYTE PTR [rsp+0x48],0xa
  4024bc:	e8 3f ea ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4024c1:	45 31 e4             	xor    r12d,r12d
  4024c4:	45 31 ed             	xor    r13d,r13d
  4024c7:	b8 4e 00 00 00       	mov    eax,0x4e
  4024cc:	48 8d 74 24 4b       	lea    rsi,[rsp+0x4b]
  4024d1:	ba 01 00 00 00       	mov    edx,0x1
  4024d6:	bf 40 91 60 00       	mov    edi,0x609140
  4024db:	88 44 24 4b          	mov    BYTE PTR [rsp+0x4b],al
  4024df:	e8 1c ea ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4024e4:	4c 89 e3             	mov    rbx,r12
  4024e7:	48 8d 74 24 49       	lea    rsi,[rsp+0x49]
  4024ec:	48 89 c7             	mov    rdi,rax
  4024ef:	83 e3 01             	and    ebx,0x1
  4024f2:	48 83 fb 01          	cmp    rbx,0x1
  4024f6:	19 d2                	sbb    edx,edx
  4024f8:	83 e2 12             	and    edx,0x12
  4024fb:	83 c2 45             	add    edx,0x45
  4024fe:	88 54 24 49          	mov    BYTE PTR [rsp+0x49],dl
  402502:	ba 01 00 00 00       	mov    edx,0x1
  402507:	e8 f4 e9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40250c:	48 8d 74 24 4a       	lea    rsi,[rsp+0x4a]
  402511:	ba 01 00 00 00       	mov    edx,0x1
  402516:	48 89 c7             	mov    rdi,rax
  402519:	c6 44 24 4a 20       	mov    BYTE PTR [rsp+0x4a],0x20
  40251e:	e8 dd e9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  402523:	8d 04 1b             	lea    eax,[rbx+rbx*1]
  402526:	66 0f ef c0          	pxor   xmm0,xmm0
  40252a:	ba ff ff ff ff       	mov    edx,0xffffffff
  40252f:	66 0f ef d2          	pxor   xmm2,xmm2
  402533:	83 e8 01             	sub    eax,0x1
  402536:	f3 0f 10 1d c6 54 00 	movss  xmm3,DWORD PTR [rip+0x54c6]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  40253d:	00 
  40253e:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
  402542:	31 c0                	xor    eax,eax
  402544:	4d 85 ed             	test   r13,r13
  402547:	42 0f b7 74 65 20    	movzx  esi,WORD PTR [rbp+r12*2+0x20]
  40254d:	0f 95 c0             	setne  al
  402550:	f3 0f 59 1c 24       	mulss  xmm3,DWORD PTR [rsp]
  402555:	48 8d 7c 24 70       	lea    rdi,[rsp+0x70]
  40255a:	8d 04 42             	lea    eax,[rdx+rax*2]
  40255d:	f3 0f 10 0d 9f 54 00 	movss  xmm1,DWORD PTR [rip+0x549f]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  402564:	00 
  402565:	f3 0f 59 4c 24 1c    	mulss  xmm1,DWORD PTR [rsp+0x1c]
  40256b:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
  40256f:	f3 0f 59 c1          	mulss  xmm0,xmm1
  402573:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  402579:	f3 0f 59 d3          	mulss  xmm2,xmm3
  40257d:	f3 0f 58 54 24 10    	addss  xmm2,DWORD PTR [rsp+0x10]
  402583:	66 0f 7e c0          	movd   eax,xmm0
  402587:	f3 0f 11 54 24 28    	movss  DWORD PTR [rsp+0x28],xmm2
  40258d:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  402592:	48 c1 e2 20          	shl    rdx,0x20
  402596:	48 09 d0             	or     rax,rdx
  402599:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  40259e:	66 0f 7e d8          	movd   eax,xmm3
  4025a2:	f3 0f 7e 44 24 28    	movq   xmm0,QWORD PTR [rsp+0x28]
  4025a8:	48 89 c2             	mov    rdx,rax
  4025ab:	66 0f 7e c8          	movd   eax,xmm1
  4025af:	48 c1 e2 20          	shl    rdx,0x20
  4025b3:	48 09 d0             	or     rax,rdx
  4025b6:	ba 01 00 00 00       	mov    edx,0x1
  4025bb:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  4025c0:	f3 0f 7e 4c 24 28    	movq   xmm1,QWORD PTR [rsp+0x28]
  4025c6:	e8 45 2f 00 00       	call   405510 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const>
  4025cb:	49 83 c4 01          	add    r12,0x1
  4025cf:	49 83 fc 04          	cmp    r12,0x4
  4025d3:	0f 84 69 f9 ff ff    	je     401f42 <testQTreePathological()+0x952>
  4025d9:	4d 89 e5             	mov    r13,r12
  4025dc:	41 83 e5 02          	and    r13d,0x2
  4025e0:	49 83 fd 01          	cmp    r13,0x1
  4025e4:	19 c0                	sbb    eax,eax
  4025e6:	83 e0 fb             	and    eax,0xfffffffb
  4025e9:	83 c0 53             	add    eax,0x53
  4025ec:	e9 db fe ff ff       	jmp    4024cc <testQTreePathological()+0xedc>
  4025f1:	48 89 c3             	mov    rbx,rax
  4025f4:	e9 1e ea ff ff       	jmp    401017 <testQTreePathological() [clone .cold.70]+0xf>
  4025f9:	48 89 c3             	mov    rbx,rax
  4025fc:	e9 07 ea ff ff       	jmp    401008 <testQTreePathological() [clone .cold.70]>
  402601:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  402606:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  40260d:	00 00 00 

0000000000402610 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]>:
  402610:	41 57                	push   r15
  402612:	41 56                	push   r14
  402614:	41 55                	push   r13
  402616:	41 54                	push   r12
  402618:	55                   	push   rbp
  402619:	53                   	push   rbx
  40261a:	4c 89 c5             	mov    rbp,r8
  40261d:	4c 89 cb             	mov    rbx,r9
  402620:	48 83 ec 38          	sub    rsp,0x38
  402624:	48 39 f7             	cmp    rdi,rsi
  402627:	48 89 34 24          	mov    QWORD PTR [rsp],rsi
  40262b:	0f 84 0a 01 00 00    	je     40273b <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x12b>
  402631:	49 8d 40 08          	lea    rax,[r8+0x8]
  402635:	48 39 ca             	cmp    rdx,rcx
  402638:	49 89 ce             	mov    r14,rcx
  40263b:	49 89 fd             	mov    r13,rdi
  40263e:	49 89 d4             	mov    r12,rdx
  402641:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  402646:	75 69                	jne    4026b1 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0xa1>
  402648:	e9 73 01 00 00       	jmp    4027c0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x1b0>
  40264d:	0f 1f 00             	nop    DWORD PTR [rax]
  402650:	0f 2f c8             	comiss xmm1,xmm0
  402653:	0f 87 17 01 00 00    	ja     402770 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x160>
  402659:	f3 41 0f 10 4d 24    	movss  xmm1,DWORD PTR [r13+0x24]
  40265f:	f3 41 0f 10 44 24 24 	movss  xmm0,DWORD PTR [r12+0x24]
  402666:	0f 2f c1             	comiss xmm0,xmm1
  402669:	77 58                	ja     4026c3 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0xb3>
  40266b:	4c 89 e7             	mov    rdi,r12
  40266e:	f3 0f 11 44 24 24    	movss  DWORD PTR [rsp+0x24],xmm0
  402674:	f3 0f 11 4c 24 18    	movss  DWORD PTR [rsp+0x18],xmm1
  40267a:	e8 91 e8 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  40267f:	f3 0f 10 4c 24 18    	movss  xmm1,DWORD PTR [rsp+0x18]
  402685:	49 89 c4             	mov    r12,rax
  402688:	f3 0f 10 44 24 24    	movss  xmm0,DWORD PTR [rsp+0x24]
  40268e:	0f 2f c8             	comiss xmm1,xmm0
  402691:	77 0b                	ja     40269e <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x8e>
  402693:	4c 89 ef             	mov    rdi,r13
  402696:	e8 75 e8 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  40269b:	49 89 c5             	mov    r13,rax
  40269e:	4c 39 2c 24          	cmp    QWORD PTR [rsp],r13
  4026a2:	0f 84 93 00 00 00    	je     40273b <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x12b>
  4026a8:	4d 39 e6             	cmp    r14,r12
  4026ab:	0f 84 0f 01 00 00    	je     4027c0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x1b0>
  4026b1:	f3 41 0f 10 4d 20    	movss  xmm1,DWORD PTR [r13+0x20]
  4026b7:	f3 41 0f 10 44 24 20 	movss  xmm0,DWORD PTR [r12+0x20]
  4026be:	0f 2f c1             	comiss xmm0,xmm1
  4026c1:	76 8d                	jbe    402650 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x40>
  4026c3:	49 8d 55 20          	lea    rdx,[r13+0x20]
  4026c7:	48 89 de             	mov    rsi,rbx
  4026ca:	48 89 ef             	mov    rdi,rbp
  4026cd:	e8 fe 4b 00 00       	call   4072d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)>
  4026d2:	48 85 d2             	test   rdx,rdx
  4026d5:	49 89 c7             	mov    r15,rax
  4026d8:	74 41                	je     40271b <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x10b>
  4026da:	48 85 c0             	test   rax,rax
  4026dd:	bb 01 00 00 00       	mov    ebx,0x1
  4026e2:	0f 84 98 00 00 00    	je     402780 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x170>
  4026e8:	bf 28 00 00 00       	mov    edi,0x28
  4026ed:	48 89 54 24 18       	mov    QWORD PTR [rsp+0x18],rdx
  4026f2:	e8 e9 e7 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  4026f7:	49 89 c7             	mov    r15,rax
  4026fa:	49 8b 45 20          	mov    rax,QWORD PTR [r13+0x20]
  4026fe:	48 8b 4c 24 28       	mov    rcx,QWORD PTR [rsp+0x28]
  402703:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
  402708:	4c 89 fe             	mov    rsi,r15
  40270b:	89 df                	mov    edi,ebx
  40270d:	49 89 47 20          	mov    QWORD PTR [r15+0x20],rax
  402711:	e8 1a e7 ff ff       	call   400e30 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
  402716:	48 83 45 28 01       	add    QWORD PTR [rbp+0x28],0x1
  40271b:	4c 89 ff             	mov    rdi,r15
  40271e:	e8 ed e7 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  402723:	4c 89 ef             	mov    rdi,r13
  402726:	48 89 c3             	mov    rbx,rax
  402729:	e8 e2 e7 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  40272e:	49 89 c5             	mov    r13,rax
  402731:	4c 39 2c 24          	cmp    QWORD PTR [rsp],r13
  402735:	0f 85 6d ff ff ff    	jne    4026a8 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x98>
  40273b:	48 89 2c 24          	mov    QWORD PTR [rsp],rbp
  40273f:	f3 0f 7e 24 24       	movq   xmm4,QWORD PTR [rsp]
  402744:	48 89 1c 24          	mov    QWORD PTR [rsp],rbx
  402748:	0f 16 24 24          	movhps xmm4,QWORD PTR [rsp]
  40274c:	0f 29 24 24          	movaps XMMWORD PTR [rsp],xmm4
  402750:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  402754:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  402759:	48 83 c4 38          	add    rsp,0x38
  40275d:	5b                   	pop    rbx
  40275e:	5d                   	pop    rbp
  40275f:	41 5c                	pop    r12
  402761:	41 5d                	pop    r13
  402763:	41 5e                	pop    r14
  402765:	41 5f                	pop    r15
  402767:	c3                   	ret    
  402768:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40276f:	00 
  402770:	4c 89 e7             	mov    rdi,r12
  402773:	e8 98 e7 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  402778:	49 89 c4             	mov    r12,rax
  40277b:	e9 1e ff ff ff       	jmp    40269e <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x8e>
  402780:	48 3b 54 24 28       	cmp    rdx,QWORD PTR [rsp+0x28]
  402785:	0f 84 5d ff ff ff    	je     4026e8 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0xd8>
  40278b:	f3 41 0f 10 4d 20    	movss  xmm1,DWORD PTR [r13+0x20]
  402791:	f3 0f 10 42 20       	movss  xmm0,DWORD PTR [rdx+0x20]
  402796:	0f 2f c1             	comiss xmm0,xmm1
  402799:	0f 87 49 ff ff ff    	ja     4026e8 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0xd8>
  40279f:	31 db                	xor    ebx,ebx
  4027a1:	0f 2f c8             	comiss xmm1,xmm0
  4027a4:	0f 87 3e ff ff ff    	ja     4026e8 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0xd8>
  4027aa:	f3 0f 10 42 24       	movss  xmm0,DWORD PTR [rdx+0x24]
  4027af:	31 db                	xor    ebx,ebx
  4027b1:	41 0f 2f 45 24       	comiss xmm0,DWORD PTR [r13+0x24]
  4027b6:	0f 97 c3             	seta   bl
  4027b9:	e9 2a ff ff ff       	jmp    4026e8 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0xd8>
  4027be:	66 90                	xchg   ax,ax
  4027c0:	4c 8d 65 08          	lea    r12,[rbp+0x8]
  4027c4:	49 39 dc             	cmp    r12,rbx
  4027c7:	0f 84 03 01 00 00    	je     4028d0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x2c0>
  4027cd:	0f 1f 00             	nop    DWORD PTR [rax]
  4027d0:	f3 41 0f 10 45 20    	movss  xmm0,DWORD PTR [r13+0x20]
  4027d6:	f3 0f 10 4b 20       	movss  xmm1,DWORD PTR [rbx+0x20]
  4027db:	0f 2f c8             	comiss xmm1,xmm0
  4027de:	0f 87 1c 02 00 00    	ja     402a00 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3f0>
  4027e4:	0f 2f c1             	comiss xmm0,xmm1
  4027e7:	77 1d                	ja     402806 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x1f6>
  4027e9:	f3 41 0f 10 5d 24    	movss  xmm3,DWORD PTR [r13+0x24]
  4027ef:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  4027f4:	0f 2f d3             	comiss xmm2,xmm3
  4027f7:	0f 87 03 02 00 00    	ja     402a00 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3f0>
  4027fd:	0f 2f da             	comiss xmm3,xmm2
  402800:	0f 86 a1 00 00 00    	jbe    4028a7 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x297>
  402806:	48 39 5d 20          	cmp    QWORD PTR [rbp+0x20],rbx
  40280a:	0f 84 70 03 00 00    	je     402b80 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x570>
  402810:	48 89 df             	mov    rdi,rbx
  402813:	f3 0f 11 4c 24 24    	movss  DWORD PTR [rsp+0x24],xmm1
  402819:	f3 0f 11 44 24 18    	movss  DWORD PTR [rsp+0x18],xmm0
  40281f:	e8 6c e6 ff ff       	call   400e90 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
  402824:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  40282a:	49 89 c7             	mov    r15,rax
  40282d:	f3 0f 10 50 20       	movss  xmm2,DWORD PTR [rax+0x20]
  402832:	0f 2f d0             	comiss xmm2,xmm0
  402835:	f3 0f 10 4c 24 24    	movss  xmm1,DWORD PTR [rsp+0x24]
  40283b:	77 19                	ja     402856 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x246>
  40283d:	0f 2f c2             	comiss xmm0,xmm2
  402840:	0f 87 4a 01 00 00    	ja     402990 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x380>
  402846:	f3 0f 10 50 24       	movss  xmm2,DWORD PTR [rax+0x24]
  40284b:	41 0f 2f 55 24       	comiss xmm2,DWORD PTR [r13+0x24]
  402850:	0f 86 3a 01 00 00    	jbe    402990 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x380>
  402856:	48 83 7b 18 00       	cmp    QWORD PTR [rbx+0x18],0x0
  40285b:	0f 84 1f 03 00 00    	je     402b80 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x570>
  402861:	4c 89 fb             	mov    rbx,r15
  402864:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  402868:	4d 39 fc             	cmp    r12,r15
  40286b:	74 09                	je     402876 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x266>
  40286d:	48 85 db             	test   rbx,rbx
  402870:	0f 84 9a 02 00 00    	je     402b10 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x500>
  402876:	41 be 01 00 00 00    	mov    r14d,0x1
  40287c:	bf 28 00 00 00       	mov    edi,0x28
  402881:	e8 5a e6 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  402886:	48 89 c3             	mov    rbx,rax
  402889:	49 8b 45 20          	mov    rax,QWORD PTR [r13+0x20]
  40288d:	4c 89 e1             	mov    rcx,r12
  402890:	4c 89 fa             	mov    rdx,r15
  402893:	48 89 de             	mov    rsi,rbx
  402896:	44 89 f7             	mov    edi,r14d
  402899:	48 89 43 20          	mov    QWORD PTR [rbx+0x20],rax
  40289d:	e8 8e e5 ff ff       	call   400e30 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
  4028a2:	48 83 45 28 01       	add    QWORD PTR [rbp+0x28],0x1
  4028a7:	48 89 df             	mov    rdi,rbx
  4028aa:	e8 61 e6 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  4028af:	4c 89 ef             	mov    rdi,r13
  4028b2:	48 89 c3             	mov    rbx,rax
  4028b5:	e8 56 e6 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  4028ba:	48 3b 04 24          	cmp    rax,QWORD PTR [rsp]
  4028be:	49 89 c5             	mov    r13,rax
  4028c1:	0f 84 74 fe ff ff    	je     40273b <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x12b>
  4028c7:	49 39 dc             	cmp    r12,rbx
  4028ca:	0f 85 00 ff ff ff    	jne    4027d0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x1c0>
  4028d0:	48 83 7d 28 00       	cmp    QWORD PTR [rbp+0x28],0x0
  4028d5:	74 2f                	je     402906 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x2f6>
  4028d7:	4c 8b 7d 20          	mov    r15,QWORD PTR [rbp+0x20]
  4028db:	f3 41 0f 10 45 20    	movss  xmm0,DWORD PTR [r13+0x20]
  4028e1:	f3 41 0f 10 4f 20    	movss  xmm1,DWORD PTR [r15+0x20]
  4028e7:	0f 2f c1             	comiss xmm0,xmm1
  4028ea:	0f 87 cf 01 00 00    	ja     402abf <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4af>
  4028f0:	0f 2f c8             	comiss xmm1,xmm0
  4028f3:	77 11                	ja     402906 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x2f6>
  4028f5:	f3 41 0f 10 45 24    	movss  xmm0,DWORD PTR [r13+0x24]
  4028fb:	41 0f 2f 47 24       	comiss xmm0,DWORD PTR [r15+0x24]
  402900:	0f 87 b9 01 00 00    	ja     402abf <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4af>
  402906:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  40290a:	48 85 db             	test   rbx,rbx
  40290d:	0f 84 cd 01 00 00    	je     402ae0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4d0>
  402913:	f3 41 0f 10 4d 20    	movss  xmm1,DWORD PTR [r13+0x20]
  402919:	eb 24                	jmp    40293f <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x32f>
  40291b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  402920:	0f 2f c8             	comiss xmm1,xmm0
  402923:	77 0c                	ja     402931 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x321>
  402925:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  40292a:	41 0f 2f 55 24       	comiss xmm2,DWORD PTR [r13+0x24]
  40292f:	77 18                	ja     402949 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x339>
  402931:	48 8b 43 18          	mov    rax,QWORD PTR [rbx+0x18]
  402935:	31 d2                	xor    edx,edx
  402937:	48 85 c0             	test   rax,rax
  40293a:	74 1b                	je     402957 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x347>
  40293c:	48 89 c3             	mov    rbx,rax
  40293f:	f3 0f 10 43 20       	movss  xmm0,DWORD PTR [rbx+0x20]
  402944:	0f 2f c1             	comiss xmm0,xmm1
  402947:	76 d7                	jbe    402920 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x310>
  402949:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  40294d:	ba 01 00 00 00       	mov    edx,0x1
  402952:	48 85 c0             	test   rax,rax
  402955:	75 e5                	jne    40293c <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x32c>
  402957:	84 d2                	test   dl,dl
  402959:	49 89 df             	mov    r15,rbx
  40295c:	0f 85 81 01 00 00    	jne    402ae3 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4d3>
  402962:	0f 2f c8             	comiss xmm1,xmm0
  402965:	77 19                	ja     402980 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x370>
  402967:	0f 2f c1             	comiss xmm0,xmm1
  40296a:	0f 87 37 ff ff ff    	ja     4028a7 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x297>
  402970:	f3 41 0f 10 45 24    	movss  xmm0,DWORD PTR [r13+0x24]
  402976:	0f 2f 43 24          	comiss xmm0,DWORD PTR [rbx+0x24]
  40297a:	0f 86 27 ff ff ff    	jbe    4028a7 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x297>
  402980:	31 db                	xor    ebx,ebx
  402982:	4d 85 ff             	test   r15,r15
  402985:	0f 84 1c ff ff ff    	je     4028a7 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x297>
  40298b:	e9 d8 fe ff ff       	jmp    402868 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x258>
  402990:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  402994:	48 85 db             	test   rbx,rbx
  402997:	75 26                	jne    4029bf <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3af>
  402999:	e9 f2 01 00 00       	jmp    402b90 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x580>
  40299e:	66 90                	xchg   ax,ax
  4029a0:	0f 2f c1             	comiss xmm0,xmm1
  4029a3:	77 0c                	ja     4029b1 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3a1>
  4029a5:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  4029aa:	41 0f 2f 55 24       	comiss xmm2,DWORD PTR [r13+0x24]
  4029af:	77 18                	ja     4029c9 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3b9>
  4029b1:	48 8b 43 18          	mov    rax,QWORD PTR [rbx+0x18]
  4029b5:	31 d2                	xor    edx,edx
  4029b7:	48 85 c0             	test   rax,rax
  4029ba:	74 1b                	je     4029d7 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3c7>
  4029bc:	48 89 c3             	mov    rbx,rax
  4029bf:	f3 0f 10 4b 20       	movss  xmm1,DWORD PTR [rbx+0x20]
  4029c4:	0f 2f c8             	comiss xmm1,xmm0
  4029c7:	76 d7                	jbe    4029a0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x390>
  4029c9:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4029cd:	ba 01 00 00 00       	mov    edx,0x1
  4029d2:	48 85 c0             	test   rax,rax
  4029d5:	75 e5                	jne    4029bc <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3ac>
  4029d7:	84 d2                	test   dl,dl
  4029d9:	49 89 df             	mov    r15,rbx
  4029dc:	0f 84 b8 00 00 00    	je     402a9a <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x48a>
  4029e2:	48 39 5d 18          	cmp    QWORD PTR [rbp+0x18],rbx
  4029e6:	f3 0f 11 44 24 18    	movss  DWORD PTR [rsp+0x18],xmm0
  4029ec:	0f 85 6c 01 00 00    	jne    402b5e <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x54e>
  4029f2:	49 89 df             	mov    r15,rbx
  4029f5:	eb 89                	jmp    402980 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x370>
  4029f7:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  4029fe:	00 00 
  402a00:	4c 8b 75 18          	mov    r14,QWORD PTR [rbp+0x18]
  402a04:	f3 0f 11 44 24 18    	movss  DWORD PTR [rsp+0x18],xmm0
  402a0a:	49 39 de             	cmp    r14,rbx
  402a0d:	0f 84 bd 00 00 00    	je     402ad0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4c0>
  402a13:	48 89 df             	mov    rdi,rbx
  402a16:	e8 d5 e4 ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  402a1b:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  402a21:	49 89 c7             	mov    r15,rax
  402a24:	f3 0f 10 48 20       	movss  xmm1,DWORD PTR [rax+0x20]
  402a29:	0f 2f c1             	comiss xmm0,xmm1
  402a2c:	0f 87 86 00 00 00    	ja     402ab8 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4a8>
  402a32:	0f 2f c8             	comiss xmm1,xmm0
  402a35:	77 0c                	ja     402a43 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x433>
  402a37:	f3 41 0f 10 4d 24    	movss  xmm1,DWORD PTR [r13+0x24]
  402a3d:	0f 2f 48 24          	comiss xmm1,DWORD PTR [rax+0x24]
  402a41:	77 75                	ja     402ab8 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4a8>
  402a43:	48 8b 5d 10          	mov    rbx,QWORD PTR [rbp+0x10]
  402a47:	48 85 db             	test   rbx,rbx
  402a4a:	75 2b                	jne    402a77 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x467>
  402a4c:	e9 ff 00 00 00       	jmp    402b50 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x540>
  402a51:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  402a58:	0f 2f c1             	comiss xmm0,xmm1
  402a5b:	77 0c                	ja     402a69 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x459>
  402a5d:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  402a62:	41 0f 2f 55 24       	comiss xmm2,DWORD PTR [r13+0x24]
  402a67:	77 18                	ja     402a81 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x471>
  402a69:	48 8b 43 18          	mov    rax,QWORD PTR [rbx+0x18]
  402a6d:	31 d2                	xor    edx,edx
  402a6f:	48 85 c0             	test   rax,rax
  402a72:	74 1b                	je     402a8f <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x47f>
  402a74:	48 89 c3             	mov    rbx,rax
  402a77:	f3 0f 10 4b 20       	movss  xmm1,DWORD PTR [rbx+0x20]
  402a7c:	0f 2f c8             	comiss xmm1,xmm0
  402a7f:	76 d7                	jbe    402a58 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x448>
  402a81:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  402a85:	ba 01 00 00 00       	mov    edx,0x1
  402a8a:	48 85 c0             	test   rax,rax
  402a8d:	75 e5                	jne    402a74 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x464>
  402a8f:	84 d2                	test   dl,dl
  402a91:	49 89 df             	mov    r15,rbx
  402a94:	0f 85 b9 00 00 00    	jne    402b53 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x543>
  402a9a:	0f 2f c1             	comiss xmm0,xmm1
  402a9d:	0f 87 dd fe ff ff    	ja     402980 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x370>
  402aa3:	0f 2f c8             	comiss xmm1,xmm0
  402aa6:	0f 86 c4 fe ff ff    	jbe    402970 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x360>
  402aac:	e9 f6 fd ff ff       	jmp    4028a7 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x297>
  402ab1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  402ab8:	49 83 7f 18 00       	cmp    QWORD PTR [r15+0x18],0x0
  402abd:	75 11                	jne    402ad0 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x4c0>
  402abf:	31 db                	xor    ebx,ebx
  402ac1:	e9 a2 fd ff ff       	jmp    402868 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x258>
  402ac6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  402acd:	00 00 00 
  402ad0:	49 89 df             	mov    r15,rbx
  402ad3:	e9 90 fd ff ff       	jmp    402868 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x258>
  402ad8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  402adf:	00 
  402ae0:	4c 89 e3             	mov    rbx,r12
  402ae3:	48 39 5d 18          	cmp    QWORD PTR [rbp+0x18],rbx
  402ae7:	0f 84 05 ff ff ff    	je     4029f2 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3e2>
  402aed:	48 89 df             	mov    rdi,rbx
  402af0:	49 89 df             	mov    r15,rbx
  402af3:	e8 f8 e3 ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  402af8:	f3 41 0f 10 4d 20    	movss  xmm1,DWORD PTR [r13+0x20]
  402afe:	48 89 c3             	mov    rbx,rax
  402b01:	f3 0f 10 40 20       	movss  xmm0,DWORD PTR [rax+0x20]
  402b06:	e9 57 fe ff ff       	jmp    402962 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x352>
  402b0b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  402b10:	f3 41 0f 10 45 20    	movss  xmm0,DWORD PTR [r13+0x20]
  402b16:	f3 41 0f 10 4f 20    	movss  xmm1,DWORD PTR [r15+0x20]
  402b1c:	0f 2f c8             	comiss xmm1,xmm0
  402b1f:	41 be 01 00 00 00    	mov    r14d,0x1
  402b25:	0f 87 51 fd ff ff    	ja     40287c <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x26c>
  402b2b:	45 31 f6             	xor    r14d,r14d
  402b2e:	0f 2f c1             	comiss xmm0,xmm1
  402b31:	0f 87 45 fd ff ff    	ja     40287c <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x26c>
  402b37:	f3 41 0f 10 47 24    	movss  xmm0,DWORD PTR [r15+0x24]
  402b3d:	45 31 f6             	xor    r14d,r14d
  402b40:	41 0f 2f 45 24       	comiss xmm0,DWORD PTR [r13+0x24]
  402b45:	41 0f 97 c6          	seta   r14b
  402b49:	e9 2e fd ff ff       	jmp    40287c <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x26c>
  402b4e:	66 90                	xchg   ax,ax
  402b50:	4c 89 e3             	mov    rbx,r12
  402b53:	49 39 de             	cmp    r14,rbx
  402b56:	f3 0f 11 44 24 18    	movss  DWORD PTR [rsp+0x18],xmm0
  402b5c:	74 2a                	je     402b88 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x578>
  402b5e:	48 89 df             	mov    rdi,rbx
  402b61:	49 89 df             	mov    r15,rbx
  402b64:	e8 87 e3 ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  402b69:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  402b6f:	48 89 c3             	mov    rbx,rax
  402b72:	f3 0f 10 48 20       	movss  xmm1,DWORD PTR [rax+0x20]
  402b77:	e9 1e ff ff ff       	jmp    402a9a <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x48a>
  402b7c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  402b80:	49 89 df             	mov    r15,rbx
  402b83:	eb 97                	jmp    402b1c <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x50c>
  402b85:	0f 1f 00             	nop    DWORD PTR [rax]
  402b88:	4d 89 f7             	mov    r15,r14
  402b8b:	e9 f0 fd ff ff       	jmp    402980 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x370>
  402b90:	4c 89 e3             	mov    rbx,r12
  402b93:	e9 4a fe ff ff       	jmp    4029e2 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]+0x3d2>
  402b98:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  402b9f:	00 

0000000000402ba0 <testQTree()>:
  402ba0:	41 57                	push   r15
  402ba2:	41 56                	push   r14
  402ba4:	bf 00 0e 00 00       	mov    edi,0xe00
  402ba9:	41 55                	push   r13
  402bab:	41 54                	push   r12
  402bad:	55                   	push   rbp
  402bae:	53                   	push   rbx
  402baf:	48 81 ec 78 0b 00 00 	sub    rsp,0xb78
  402bb6:	66 0f 6f 05 62 4e 00 	movdqa xmm0,XMMWORD PTR [rip+0x4e62]        # 407a20 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xe0>
  402bbd:	00 
  402bbe:	0f 29 84 24 60 01 00 	movaps XMMWORD PTR [rsp+0x160],xmm0
  402bc5:	00 
  402bc6:	e8 75 e3 ff ff       	call   400f40 <malloc@plt>
  402bcb:	bf 40 00 00 00       	mov    edi,0x40
  402bd0:	48 89 84 24 70 01 00 	mov    QWORD PTR [rsp+0x170],rax
  402bd7:	00 
  402bd8:	e8 63 e3 ff ff       	call   400f40 <malloc@plt>
  402bdd:	31 ff                	xor    edi,edi
  402bdf:	48 89 84 24 78 01 00 	mov    QWORD PTR [rsp+0x178],rax
  402be6:	00 
  402be7:	48 c7 84 24 80 01 00 	mov    QWORD PTR [rsp+0x180],0x1
  402bee:	00 01 00 00 00 
  402bf3:	e8 c8 e2 ff ff       	call   400ec0 <time@plt>
  402bf8:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  402bff:	00 00 00 
  402c02:	48 89 c1             	mov    rcx,rax
  402c05:	48 f7 e2             	mul    rdx
  402c08:	48 89 c8             	mov    rax,rcx
  402c0b:	66 0f ef c0          	pxor   xmm0,xmm0
  402c0f:	48 29 d0             	sub    rax,rdx
  402c12:	48 d1 e8             	shr    rax,1
  402c15:	48 01 d0             	add    rax,rdx
  402c18:	48 c1 e8 1e          	shr    rax,0x1e
  402c1c:	48 89 c2             	mov    rdx,rax
  402c1f:	48 c1 e2 1f          	shl    rdx,0x1f
  402c23:	48 29 c2             	sub    rdx,rax
  402c26:	48 29 d1             	sub    rcx,rdx
  402c29:	ba 01 00 00 00       	mov    edx,0x1
  402c2e:	48 89 c8             	mov    rax,rcx
  402c31:	48 0f 44 c2          	cmove  rax,rdx
  402c35:	48 89 84 24 80 01 00 	mov    QWORD PTR [rsp+0x180],rax
  402c3c:	00 
  402c3d:	48 8b 84 24 78 01 00 	mov    rax,QWORD PTR [rsp+0x178]
  402c44:	00 
  402c45:	0f 11 00             	movups XMMWORD PTR [rax],xmm0
  402c48:	48 8b bc 24 68 01 00 	mov    rdi,QWORD PTR [rsp+0x168]
  402c4f:	00 
  402c50:	4c 8b 84 24 60 01 00 	mov    r8,QWORD PTR [rsp+0x160]
  402c57:	00 
  402c58:	0f 11 40 10          	movups XMMWORD PTR [rax+0x10],xmm0
  402c5c:	0f 11 40 20          	movups XMMWORD PTR [rax+0x20],xmm0
  402c60:	4a 8d 0c 85 00 00 00 	lea    rcx,[r8*4+0x0]
  402c67:	00 
  402c68:	0f 11 40 30          	movups XMMWORD PTR [rax+0x30],xmm0
  402c6c:	48 8d 04 3f          	lea    rax,[rdi+rdi*1]
  402c70:	48 8d 14 38          	lea    rdx,[rax+rdi*1]
  402c74:	48 39 d1             	cmp    rcx,rdx
  402c77:	0f 83 36 0c 00 00    	jae    4038b3 <testQTree()+0xd13>
  402c7d:	48 69 8c 24 80 01 00 	imul   rcx,QWORD PTR [rsp+0x180],0xbc8f
  402c84:	00 8f bc 00 00 
  402c89:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  402c90:	00 00 00 
  402c93:	48 89 c8             	mov    rax,rcx
  402c96:	48 f7 e2             	mul    rdx
  402c99:	48 89 c8             	mov    rax,rcx
  402c9c:	48 29 d0             	sub    rax,rdx
  402c9f:	48 d1 e8             	shr    rax,1
  402ca2:	48 01 d0             	add    rax,rdx
  402ca5:	48 c1 e8 1e          	shr    rax,0x1e
  402ca9:	48 89 c2             	mov    rdx,rax
  402cac:	48 c1 e0 1f          	shl    rax,0x1f
  402cb0:	48 29 d0             	sub    rax,rdx
  402cb3:	48 8b 94 24 78 01 00 	mov    rdx,QWORD PTR [rsp+0x178]
  402cba:	00 
  402cbb:	48 29 c1             	sub    rcx,rax
  402cbe:	48 8d 47 ff          	lea    rax,[rdi-0x1]
  402cc2:	48 89 8c 24 80 01 00 	mov    QWORD PTR [rsp+0x180],rcx
  402cc9:	00 
  402cca:	48 21 c8             	and    rax,rcx
  402ccd:	eb 12                	jmp    402ce1 <testQTree()+0x141>
  402ccf:	90                   	nop
  402cd0:	48 83 c0 01          	add    rax,0x1
  402cd4:	48 89 c6             	mov    rsi,rax
  402cd7:	48 29 fe             	sub    rsi,rdi
  402cda:	48 39 f8             	cmp    rax,rdi
  402cdd:	48 0f 43 c6          	cmovae rax,rsi
  402ce1:	80 3c 02 00          	cmp    BYTE PTR [rdx+rax*1],0x0
  402ce5:	48 8d 0c 02          	lea    rcx,[rdx+rax*1]
  402ce9:	75 e5                	jne    402cd0 <testQTree()+0x130>
  402ceb:	49 8d 50 01          	lea    rdx,[r8+0x1]
  402cef:	0f 28 05 3a 4d 00 00 	movaps xmm0,XMMWORD PTR [rip+0x4d3a]        # 407a30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xf0>
  402cf6:	45 31 c9             	xor    r9d,r9d
  402cf9:	48 be 2d 7f 95 4c 2d 	movabs rsi,0x5851f42d4c957f2d
  402d00:	f4 51 58 
  402d03:	48 89 94 24 60 01 00 	mov    QWORD PTR [rsp+0x160],rdx
  402d0a:	00 
  402d0b:	c6 01 01             	mov    BYTE PTR [rcx],0x1
  402d0e:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
  402d15:	00 
  402d16:	48 8b 8c 24 70 01 00 	mov    rcx,QWORD PTR [rsp+0x170]
  402d1d:	00 
  402d1e:	48 29 c2             	sub    rdx,rax
  402d21:	48 8d 14 d1          	lea    rdx,[rcx+rdx*8]
  402d25:	b9 01 00 00 00       	mov    ecx,0x1
  402d2a:	48 c7 42 20 ff ff ff 	mov    QWORD PTR [rdx+0x20],0xffffffffffffffff
  402d31:	ff 
  402d32:	66 44 89 4a 28       	mov    WORD PTR [rdx+0x28],r9w
  402d37:	48 c7 42 30 00 00 00 	mov    QWORD PTR [rdx+0x30],0x0
  402d3e:	00 
  402d3f:	66 89 84 24 88 01 00 	mov    WORD PTR [rsp+0x188],ax
  402d46:	00 
  402d47:	b8 71 15 00 00       	mov    eax,0x1571
  402d4c:	0f 11 84 24 8c 01 00 	movups XMMWORD PTR [rsp+0x18c],xmm0
  402d53:	00 
  402d54:	48 c7 84 24 a0 01 00 	mov    QWORD PTR [rsp+0x1a0],0x1571
  402d5b:	00 71 15 00 00 
  402d60:	48 89 c2             	mov    rdx,rax
  402d63:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  402d68:	48 89 d0             	mov    rax,rdx
  402d6b:	48 c1 e8 3e          	shr    rax,0x3e
  402d6f:	48 31 d0             	xor    rax,rdx
  402d72:	48 0f af c6          	imul   rax,rsi
  402d76:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
  402d7a:	48 89 94 cc a0 01 00 	mov    QWORD PTR [rsp+rcx*8+0x1a0],rdx
  402d81:	00 
  402d82:	48 83 c1 01          	add    rcx,0x1
  402d86:	48 81 f9 38 01 00 00 	cmp    rcx,0x138
  402d8d:	75 d9                	jne    402d68 <testQTree()+0x1c8>
  402d8f:	31 ff                	xor    edi,edi
  402d91:	48 c7 84 24 60 0b 00 	mov    QWORD PTR [rsp+0xb60],0x138
  402d98:	00 38 01 00 00 
  402d9d:	e8 1e e1 ff ff       	call   400ec0 <time@plt>
  402da2:	b9 01 00 00 00       	mov    ecx,0x1
  402da7:	48 89 84 24 a0 01 00 	mov    QWORD PTR [rsp+0x1a0],rax
  402dae:	00 
  402daf:	48 be 2d 7f 95 4c 2d 	movabs rsi,0x5851f42d4c957f2d
  402db6:	f4 51 58 
  402db9:	48 89 c2             	mov    rdx,rax
  402dbc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  402dc0:	48 89 d0             	mov    rax,rdx
  402dc3:	48 c1 e8 3e          	shr    rax,0x3e
  402dc7:	48 31 d0             	xor    rax,rdx
  402dca:	48 0f af c6          	imul   rax,rsi
  402dce:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
  402dd2:	48 89 94 cc a0 01 00 	mov    QWORD PTR [rsp+rcx*8+0x1a0],rdx
  402dd9:	00 
  402dda:	48 83 c1 01          	add    rcx,0x1
  402dde:	48 81 f9 38 01 00 00 	cmp    rcx,0x138
  402de5:	75 d9                	jne    402dc0 <testQTree()+0x220>
  402de7:	48 8d ac 24 a8 00 00 	lea    rbp,[rsp+0xa8]
  402dee:	00 
  402def:	48 8d bc 24 a0 01 00 	lea    rdi,[rsp+0x1a0]
  402df6:	00 
  402df7:	48 c7 84 24 60 0b 00 	mov    QWORD PTR [rsp+0xb60],0x138
  402dfe:	00 38 01 00 00 
  402e03:	c7 84 24 a8 00 00 00 	mov    DWORD PTR [rsp+0xa8],0x0
  402e0a:	00 00 00 00 
  402e0e:	48 c7 84 24 b0 00 00 	mov    QWORD PTR [rsp+0xb0],0x0
  402e15:	00 00 00 00 00 
  402e1a:	41 bc 10 27 00 00    	mov    r12d,0x2710
  402e20:	48 89 ac 24 b8 00 00 	mov    QWORD PTR [rsp+0xb8],rbp
  402e27:	00 
  402e28:	48 89 ac 24 c0 00 00 	mov    QWORD PTR [rsp+0xc0],rbp
  402e2f:	00 
  402e30:	49 89 ed             	mov    r13,rbp
  402e33:	48 c7 84 24 c8 00 00 	mov    QWORD PTR [rsp+0xc8],0x0
  402e3a:	00 00 00 00 00 
  402e3f:	e8 cc e3 ff ff       	call   401210 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]>
  402e44:	f3 0f 59 05 c8 4b 00 	mulss  xmm0,DWORD PTR [rip+0x4bc8]        # 407a14 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd4>
  402e4b:	00 
  402e4c:	48 8d bc 24 a0 01 00 	lea    rdi,[rsp+0x1a0]
  402e53:	00 
  402e54:	f3 0f 5c 05 bc 4b 00 	subss  xmm0,DWORD PTR [rip+0x4bbc]        # 407a18 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd8>
  402e5b:	00 
  402e5c:	f3 0f 11 44 24 28    	movss  DWORD PTR [rsp+0x28],xmm0
  402e62:	e8 a9 e3 ff ff       	call   401210 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]>
  402e67:	f3 0f 59 05 a5 4b 00 	mulss  xmm0,DWORD PTR [rip+0x4ba5]        # 407a14 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd4>
  402e6e:	00 
  402e6f:	f3 0f 5c 05 a1 4b 00 	subss  xmm0,DWORD PTR [rip+0x4ba1]        # 407a18 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd8>
  402e76:	00 
  402e77:	f3 0f 11 44 24 20    	movss  DWORD PTR [rsp+0x20],xmm0
  402e7d:	48 8d bc 24 a0 01 00 	lea    rdi,[rsp+0x1a0]
  402e84:	00 
  402e85:	e8 86 e3 ff ff       	call   401210 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]>
  402e8a:	f3 0f 59 05 82 4b 00 	mulss  xmm0,DWORD PTR [rip+0x4b82]        # 407a14 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd4>
  402e91:	00 
  402e92:	48 8d bc 24 a0 01 00 	lea    rdi,[rsp+0x1a0]
  402e99:	00 
  402e9a:	f3 0f 5c 05 76 4b 00 	subss  xmm0,DWORD PTR [rip+0x4b76]        # 407a18 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd8>
  402ea1:	00 
  402ea2:	f3 0f 11 04 24       	movss  DWORD PTR [rsp],xmm0
  402ea7:	e8 64 e3 ff ff       	call   401210 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]>
  402eac:	f3 0f 59 05 60 4b 00 	mulss  xmm0,DWORD PTR [rip+0x4b60]        # 407a14 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd4>
  402eb3:	00 
  402eb4:	0f 28 f8             	movaps xmm7,xmm0
  402eb7:	f3 0f 10 04 24       	movss  xmm0,DWORD PTR [rsp]
  402ebc:	f3 0f 5c 3d 54 4b 00 	subss  xmm7,DWORD PTR [rip+0x4b54]        # 407a18 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd8>
  402ec3:	00 
  402ec4:	f3 0f 5c 44 24 28    	subss  xmm0,DWORD PTR [rsp+0x28]
  402eca:	f3 0f 11 7c 24 18    	movss  DWORD PTR [rsp+0x18],xmm7
  402ed0:	f3 0f 5c 7c 24 20    	subss  xmm7,DWORD PTR [rsp+0x20]
  402ed6:	0f 28 cf             	movaps xmm1,xmm7
  402ed9:	e8 e2 e0 ff ff       	call   400fc0 <hypotf@plt>
  402ede:	f3 0f 10 2d 26 4b 00 	movss  xmm5,DWORD PTR [rip+0x4b26]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  402ee5:	00 
  402ee6:	0f 2f e8             	comiss xmm5,xmm0
  402ee9:	0f 86 ce 00 00 00    	jbe    402fbd <testQTree()+0x41d>
  402eef:	48 8b 9c 24 b0 00 00 	mov    rbx,QWORD PTR [rsp+0xb0]
  402ef6:	00 
  402ef7:	48 85 db             	test   rbx,rbx
  402efa:	0f 84 2b 0a 00 00    	je     40392b <testQTree()+0xd8b>
  402f00:	f3 0f 10 5c 24 18    	movss  xmm3,DWORD PTR [rsp+0x18]
  402f06:	f3 0f 10 0c 24       	movss  xmm1,DWORD PTR [rsp]
  402f0b:	eb 20                	jmp    402f2d <testQTree()+0x38d>
  402f0d:	0f 1f 00             	nop    DWORD PTR [rax]
  402f10:	0f 2f c8             	comiss xmm1,xmm0
  402f13:	77 0a                	ja     402f1f <testQTree()+0x37f>
  402f15:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  402f1a:	0f 2f d3             	comiss xmm2,xmm3
  402f1d:	77 18                	ja     402f37 <testQTree()+0x397>
  402f1f:	48 8b 43 18          	mov    rax,QWORD PTR [rbx+0x18]
  402f23:	31 d2                	xor    edx,edx
  402f25:	48 85 c0             	test   rax,rax
  402f28:	74 1b                	je     402f45 <testQTree()+0x3a5>
  402f2a:	48 89 c3             	mov    rbx,rax
  402f2d:	f3 0f 10 43 20       	movss  xmm0,DWORD PTR [rbx+0x20]
  402f32:	0f 2f c1             	comiss xmm0,xmm1
  402f35:	76 d9                	jbe    402f10 <testQTree()+0x370>
  402f37:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  402f3b:	ba 01 00 00 00       	mov    edx,0x1
  402f40:	48 85 c0             	test   rax,rax
  402f43:	75 e5                	jne    402f2a <testQTree()+0x38a>
  402f45:	84 d2                	test   dl,dl
  402f47:	0f 85 4d 0a 00 00    	jne    40399a <testQTree()+0xdfa>
  402f4d:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  402f52:	48 89 da             	mov    rdx,rbx
  402f55:	0f 2f e8             	comiss xmm5,xmm0
  402f58:	77 1a                	ja     402f74 <testQTree()+0x3d4>
  402f5a:	0f 2f 04 24          	comiss xmm0,DWORD PTR [rsp]
  402f5e:	77 5d                	ja     402fbd <testQTree()+0x41d>
  402f60:	f3 0f 10 6c 24 18    	movss  xmm5,DWORD PTR [rsp+0x18]
  402f66:	0f 2f 6b 24          	comiss xmm5,DWORD PTR [rbx+0x24]
  402f6a:	76 51                	jbe    402fbd <testQTree()+0x41d>
  402f6c:	48 89 d3             	mov    rbx,rdx
  402f6f:	48 85 db             	test   rbx,rbx
  402f72:	74 49                	je     402fbd <testQTree()+0x41d>
  402f74:	4c 39 eb             	cmp    rbx,r13
  402f77:	41 be 01 00 00 00    	mov    r14d,0x1
  402f7d:	0f 85 e5 09 00 00    	jne    403968 <testQTree()+0xdc8>
  402f83:	bf 28 00 00 00       	mov    edi,0x28
  402f88:	e8 53 df ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  402f8d:	f3 0f 10 1c 24       	movss  xmm3,DWORD PTR [rsp]
  402f92:	41 0f b6 fe          	movzx  edi,r14b
  402f96:	f3 0f 10 64 24 18    	movss  xmm4,DWORD PTR [rsp+0x18]
  402f9c:	48 89 e9             	mov    rcx,rbp
  402f9f:	f3 0f 11 58 20       	movss  DWORD PTR [rax+0x20],xmm3
  402fa4:	48 89 da             	mov    rdx,rbx
  402fa7:	48 89 c6             	mov    rsi,rax
  402faa:	f3 0f 11 60 24       	movss  DWORD PTR [rax+0x24],xmm4
  402faf:	e8 7c de ff ff       	call   400e30 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
  402fb4:	48 83 84 24 c8 00 00 	add    QWORD PTR [rsp+0xc8],0x1
  402fbb:	00 01 
  402fbd:	f3 0f 10 84 24 8c 01 	movss  xmm0,DWORD PTR [rsp+0x18c]
  402fc4:	00 00 
  402fc6:	0f 28 d0             	movaps xmm2,xmm0
  402fc9:	f3 0f 10 8c 24 94 01 	movss  xmm1,DWORD PTR [rsp+0x194]
  402fd0:	00 00 
  402fd2:	f3 0f 10 34 24       	movss  xmm6,DWORD PTR [rsp]
  402fd7:	f3 0f 5c d1          	subss  xmm2,xmm1
  402fdb:	f3 0f 10 6c 24 18    	movss  xmm5,DWORD PTR [rsp+0x18]
  402fe1:	f3 0f 11 b4 24 30 01 	movss  DWORD PTR [rsp+0x130],xmm6
  402fe8:	00 00 
  402fea:	f3 0f 11 ac 24 34 01 	movss  DWORD PTR [rsp+0x134],xmm5
  402ff1:	00 00 
  402ff3:	0f 2f f2             	comiss xmm6,xmm2
  402ff6:	72 0d                	jb     403005 <testQTree()+0x465>
  402ff8:	f3 0f 58 c1          	addss  xmm0,xmm1
  402ffc:	0f 2f c6             	comiss xmm0,xmm6
  402fff:	0f 83 38 01 00 00    	jae    40313d <testQTree()+0x59d>
  403005:	ba 01 00 00 00       	mov    edx,0x1
  40300a:	be 4d 78 40 00       	mov    esi,0x40784d
  40300f:	bf 40 91 60 00       	mov    edi,0x609140
  403014:	e8 e7 de ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403019:	66 0f ef c0          	pxor   xmm0,xmm0
  40301d:	bf 40 91 60 00       	mov    edi,0x609140
  403022:	f3 0f 5a 04 24       	cvtss2sd xmm0,DWORD PTR [rsp]
  403027:	e8 54 df ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40302c:	ba 02 00 00 00       	mov    edx,0x2
  403031:	be e0 77 40 00       	mov    esi,0x4077e0
  403036:	48 89 c7             	mov    rdi,rax
  403039:	48 89 c3             	mov    rbx,rax
  40303c:	e8 bf de ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403041:	66 0f ef c0          	pxor   xmm0,xmm0
  403045:	48 89 df             	mov    rdi,rbx
  403048:	f3 0f 5a 44 24 18    	cvtss2sd xmm0,DWORD PTR [rsp+0x18]
  40304e:	e8 2d df ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403053:	ba 13 00 00 00       	mov    edx,0x13
  403058:	be 27 78 40 00       	mov    esi,0x407827
  40305d:	48 89 c7             	mov    rdi,rax
  403060:	e8 9b de ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403065:	ba 13 00 00 00       	mov    edx,0x13
  40306a:	be 3b 78 40 00       	mov    esi,0x40783b
  40306f:	bf 40 91 60 00       	mov    edi,0x609140
  403074:	e8 87 de ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403079:	66 0f ef c0          	pxor   xmm0,xmm0
  40307d:	bf 40 91 60 00       	mov    edi,0x609140
  403082:	f3 0f 5a 84 24 8c 01 	cvtss2sd xmm0,DWORD PTR [rsp+0x18c]
  403089:	00 00 
  40308b:	e8 f0 de ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403090:	ba 02 00 00 00       	mov    edx,0x2
  403095:	be e0 77 40 00       	mov    esi,0x4077e0
  40309a:	48 89 c7             	mov    rdi,rax
  40309d:	48 89 c3             	mov    rbx,rax
  4030a0:	e8 5b de ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4030a5:	66 0f ef c0          	pxor   xmm0,xmm0
  4030a9:	48 89 df             	mov    rdi,rbx
  4030ac:	f3 0f 5a 84 24 90 01 	cvtss2sd xmm0,DWORD PTR [rsp+0x190]
  4030b3:	00 00 
  4030b5:	e8 c6 de ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4030ba:	ba 02 00 00 00       	mov    edx,0x2
  4030bf:	be 02 78 40 00       	mov    esi,0x407802
  4030c4:	48 89 c7             	mov    rdi,rax
  4030c7:	e8 34 de ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4030cc:	ba 09 00 00 00       	mov    edx,0x9
  4030d1:	be 4f 78 40 00       	mov    esi,0x40784f
  4030d6:	bf 40 91 60 00       	mov    edi,0x609140
  4030db:	e8 20 de ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4030e0:	66 0f ef c0          	pxor   xmm0,xmm0
  4030e4:	bf 40 91 60 00       	mov    edi,0x609140
  4030e9:	f3 0f 5a 84 24 94 01 	cvtss2sd xmm0,DWORD PTR [rsp+0x194]
  4030f0:	00 00 
  4030f2:	e8 89 de ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4030f7:	ba 09 00 00 00       	mov    edx,0x9
  4030fc:	be 59 78 40 00       	mov    esi,0x407859
  403101:	48 89 c7             	mov    rdi,rax
  403104:	48 89 c3             	mov    rbx,rax
  403107:	e8 f4 dd ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40310c:	66 0f ef c0          	pxor   xmm0,xmm0
  403110:	48 89 df             	mov    rdi,rbx
  403113:	f3 0f 5a 84 24 98 01 	cvtss2sd xmm0,DWORD PTR [rsp+0x198]
  40311a:	00 00 
  40311c:	e8 5f de ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403121:	ba 01 00 00 00       	mov    edx,0x1
  403126:	be 39 78 40 00       	mov    esi,0x407839
  40312b:	48 89 c7             	mov    rdi,rax
  40312e:	e8 cd dd ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403133:	bf ff ff ff ff       	mov    edi,0xffffffff
  403138:	e8 f3 dd ff ff       	call   400f30 <exit@plt>
  40313d:	f3 0f 10 84 24 90 01 	movss  xmm0,DWORD PTR [rsp+0x190]
  403144:	00 00 
  403146:	0f 28 d0             	movaps xmm2,xmm0
  403149:	f3 0f 10 8c 24 98 01 	movss  xmm1,DWORD PTR [rsp+0x198]
  403150:	00 00 
  403152:	f3 0f 5c d1          	subss  xmm2,xmm1
  403156:	0f 2f ea             	comiss xmm5,xmm2
  403159:	0f 82 a6 fe ff ff    	jb     403005 <testQTree()+0x465>
  40315f:	f3 0f 58 c1          	addss  xmm0,xmm1
  403163:	0f 2f c5             	comiss xmm0,xmm5
  403166:	0f 82 99 fe ff ff    	jb     403005 <testQTree()+0x465>
  40316c:	66 0f 7e e9          	movd   ecx,xmm5
  403170:	66 0f 7e f0          	movd   eax,xmm6
  403174:	0f b7 94 24 88 01 00 	movzx  edx,WORD PTR [rsp+0x188]
  40317b:	00 
  40317c:	48 8d b4 24 30 01 00 	lea    rsi,[rsp+0x130]
  403183:	00 
  403184:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  40318b:	00 
  40318c:	48 c1 e1 20          	shl    rcx,0x20
  403190:	f3 0f 7e 8c 24 8c 01 	movq   xmm1,QWORD PTR [rsp+0x18c]
  403197:	00 00 
  403199:	48 09 c8             	or     rax,rcx
  40319c:	f3 0f 7e 94 24 94 01 	movq   xmm2,QWORD PTR [rsp+0x194]
  4031a3:	00 00 
  4031a5:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  4031a9:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  4031ae:	e8 7d 2a 00 00       	call   405c30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)>
  4031b3:	48 81 bc 24 68 01 00 	cmp    QWORD PTR [rsp+0x168],0xffff
  4031ba:	00 ff ff 00 00 
  4031bf:	0f 87 a1 1f 00 00    	ja     405166 <testQTree()+0x25c6>
  4031c5:	49 83 ec 01          	sub    r12,0x1
  4031c9:	0f 85 ae fc ff ff    	jne    402e7d <testQTree()+0x2dd>
  4031cf:	f3 44 0f 10 bc 24 90 	movss  xmm15,DWORD PTR [rsp+0x190]
  4031d6:	01 00 00 
  4031d9:	66 0f ef c0          	pxor   xmm0,xmm0
  4031dd:	41 0f 28 ef          	movaps xmm5,xmm15
  4031e1:	c7 44 24 7c 00 00 a0 	mov    DWORD PTR [rsp+0x7c],0x41a00000
  4031e8:	41 
  4031e9:	f3 44 0f 10 ac 24 8c 	movss  xmm13,DWORD PTR [rsp+0x18c]
  4031f0:	01 00 00 
  4031f3:	48 c7 84 24 90 00 00 	mov    QWORD PTR [rsp+0x90],0x0
  4031fa:	00 00 00 00 00 
  4031ff:	f3 44 0f 10 a4 24 98 	movss  xmm12,DWORD PTR [rsp+0x198]
  403206:	01 00 00 
  403209:	44 0f b7 b4 24 88 01 	movzx  r14d,WORD PTR [rsp+0x188]
  403210:	00 00 
  403212:	f3 41 0f 5c ec       	subss  xmm5,xmm12
  403217:	41 0f 28 dd          	movaps xmm3,xmm13
  40321b:	f3 0f 10 7c 24 20    	movss  xmm7,DWORD PTR [rsp+0x20]
  403221:	f3 44 0f 10 84 24 94 	movss  xmm8,DWORD PTR [rsp+0x194]
  403228:	01 00 00 
  40322b:	44 0f 28 f7          	movaps xmm14,xmm7
  40322f:	f3 41 0f 5c d8       	subss  xmm3,xmm8
  403234:	f3 0f 10 64 24 28    	movss  xmm4,DWORD PTR [rsp+0x28]
  40323a:	f3 44 0f 5c f5       	subss  xmm14,xmm5
  40323f:	0f 28 f4             	movaps xmm6,xmm4
  403242:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
  403249:	00 
  40324a:	f3 0f 5c f3          	subss  xmm6,xmm3
  40324e:	f3 0f 11 64 24 74    	movss  DWORD PTR [rsp+0x74],xmm4
  403254:	41 0f 28 ce          	movaps xmm1,xmm14
  403258:	f3 0f 11 7c 24 78    	movss  DWORD PTR [rsp+0x78],xmm7
  40325e:	f3 44 0f 11 6c 24 40 	movss  DWORD PTR [rsp+0x40],xmm13
  403265:	f3 41 0f 59 ce       	mulss  xmm1,xmm14
  40326a:	f3 44 0f 11 7c 24 38 	movss  DWORD PTR [rsp+0x38],xmm15
  403271:	0f 28 d6             	movaps xmm2,xmm6
  403274:	f3 44 0f 11 44 24 48 	movss  DWORD PTR [rsp+0x48],xmm8
  40327b:	f3 44 0f 11 64 24 30 	movss  DWORD PTR [rsp+0x30],xmm12
  403282:	f3 0f 59 d6          	mulss  xmm2,xmm6
  403286:	f3 0f 10 35 82 47 00 	movss  xmm6,DWORD PTR [rip+0x4782]        # 407a10 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd0>
  40328d:	00 
  40328e:	0f 28 c1             	movaps xmm0,xmm1
  403291:	f3 0f 58 c2          	addss  xmm0,xmm2
  403295:	0f 2f f0             	comiss xmm6,xmm0
  403298:	0f 83 27 15 00 00    	jae    4047c5 <testQTree()+0x1c25>
  40329e:	41 0f 28 f7          	movaps xmm6,xmm15
  4032a2:	0f 28 c7             	movaps xmm0,xmm7
  4032a5:	44 0f 28 f7          	movaps xmm14,xmm7
  4032a9:	f3 41 0f 58 f4       	addss  xmm6,xmm12
  4032ae:	f3 0f 10 3d 5a 47 00 	movss  xmm7,DWORD PTR [rip+0x475a]        # 407a10 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd0>
  4032b5:	00 
  4032b6:	f3 0f 5c c6          	subss  xmm0,xmm6
  4032ba:	f3 0f 59 c0          	mulss  xmm0,xmm0
  4032be:	f3 0f 58 d0          	addss  xmm2,xmm0
  4032c2:	0f 2f fa             	comiss xmm7,xmm2
  4032c5:	0f 83 fa 14 00 00    	jae    4047c5 <testQTree()+0x1c25>
  4032cb:	41 0f 28 d0          	movaps xmm2,xmm8
  4032cf:	44 0f 28 ff          	movaps xmm15,xmm7
  4032d3:	0f 28 fc             	movaps xmm7,xmm4
  4032d6:	f3 41 0f 58 d5       	addss  xmm2,xmm13
  4032db:	f3 0f 5c e2          	subss  xmm4,xmm2
  4032df:	f3 0f 59 e4          	mulss  xmm4,xmm4
  4032e3:	f3 0f 58 cc          	addss  xmm1,xmm4
  4032e7:	44 0f 2f f9          	comiss xmm15,xmm1
  4032eb:	0f 83 d4 14 00 00    	jae    4047c5 <testQTree()+0x1c25>
  4032f1:	f3 0f 58 c4          	addss  xmm0,xmm4
  4032f5:	44 0f 2f f8          	comiss xmm15,xmm0
  4032f9:	0f 83 c6 14 00 00    	jae    4047c5 <testQTree()+0x1c25>
  4032ff:	0f 2f fb             	comiss xmm7,xmm3
  403302:	72 2c                	jb     403330 <testQTree()+0x790>
  403304:	0f 2f d7             	comiss xmm2,xmm7
  403307:	72 27                	jb     403330 <testQTree()+0x790>
  403309:	0f 28 c5             	movaps xmm0,xmm5
  40330c:	f3 0f 5c 05 f8 46 00 	subss  xmm0,DWORD PTR [rip+0x46f8]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  403313:	00 
  403314:	44 0f 2f f0          	comiss xmm14,xmm0
  403318:	72 16                	jb     403330 <testQTree()+0x790>
  40331a:	f3 0f 10 05 ea 46 00 	movss  xmm0,DWORD PTR [rip+0x46ea]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  403321:	00 
  403322:	f3 0f 58 c6          	addss  xmm0,xmm6
  403326:	41 0f 2f c6          	comiss xmm0,xmm14
  40332a:	0f 83 95 14 00 00    	jae    4047c5 <testQTree()+0x1c25>
  403330:	f3 0f 5c 1d d4 46 00 	subss  xmm3,DWORD PTR [rip+0x46d4]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  403337:	00 
  403338:	f3 0f 10 64 24 28    	movss  xmm4,DWORD PTR [rsp+0x28]
  40333e:	0f 2f e3             	comiss xmm4,xmm3
  403341:	72 21                	jb     403364 <testQTree()+0x7c4>
  403343:	f3 0f 58 15 c1 46 00 	addss  xmm2,DWORD PTR [rip+0x46c1]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  40334a:	00 
  40334b:	0f 2f d4             	comiss xmm2,xmm4
  40334e:	72 14                	jb     403364 <testQTree()+0x7c4>
  403350:	f3 0f 10 5c 24 20    	movss  xmm3,DWORD PTR [rsp+0x20]
  403356:	0f 2f dd             	comiss xmm3,xmm5
  403359:	72 09                	jb     403364 <testQTree()+0x7c4>
  40335b:	0f 2f f3             	comiss xmm6,xmm3
  40335e:	0f 83 61 14 00 00    	jae    4047c5 <testQTree()+0x1c25>
  403364:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
  40336b:	00 
  40336c:	48 8d ac 24 d8 00 00 	lea    rbp,[rsp+0xd8]
  403373:	00 
  403374:	c7 84 24 d8 00 00 00 	mov    DWORD PTR [rsp+0xd8],0x0
  40337b:	00 00 00 00 
  40337f:	48 c7 84 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],0x0
  403386:	00 00 00 00 00 
  40338b:	48 c7 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],0x0
  403392:	00 00 00 00 00 
  403397:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
  40339c:	48 89 ac 24 e8 00 00 	mov    QWORD PTR [rsp+0xe8],rbp
  4033a3:	00 
  4033a4:	31 c0                	xor    eax,eax
  4033a6:	48 89 ac 24 f0 00 00 	mov    QWORD PTR [rsp+0xf0],rbp
  4033ad:	00 
  4033ae:	48 39 84 24 c8 00 00 	cmp    QWORD PTR [rsp+0xc8],rax
  4033b5:	00 
  4033b6:	4c 8b b4 24 b8 00 00 	mov    r14,QWORD PTR [rsp+0xb8]
  4033bd:	00 
  4033be:	0f 84 11 1d 00 00    	je     4050d5 <testQTree()+0x2535>
  4033c4:	48 8d 9c 24 00 01 00 	lea    rbx,[rsp+0x100]
  4033cb:	00 
  4033cc:	4c 8b 7c 24 48       	mov    r15,QWORD PTR [rsp+0x48]
  4033d1:	48 8d 94 24 38 01 00 	lea    rdx,[rsp+0x138]
  4033d8:	00 
  4033d9:	48 8d b4 24 a8 00 00 	lea    rsi,[rsp+0xa8]
  4033e0:	00 
  4033e1:	4c 89 f7             	mov    rdi,r14
  4033e4:	c7 84 24 08 01 00 00 	mov    DWORD PTR [rsp+0x108],0x0
  4033eb:	00 00 00 00 
  4033ef:	48 8d 43 08          	lea    rax,[rbx+0x8]
  4033f3:	48 89 1c 24          	mov    QWORD PTR [rsp],rbx
  4033f7:	48 89 94 24 48 01 00 	mov    QWORD PTR [rsp+0x148],rdx
  4033fe:	00 
  4033ff:	f3 0f 7e 1c 24       	movq   xmm3,QWORD PTR [rsp]
  403404:	49 8d 4f 08          	lea    rcx,[r15+0x8]
  403408:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  40340c:	48 89 94 24 50 01 00 	mov    QWORD PTR [rsp+0x150],rdx
  403413:	00 
  403414:	48 89 ea             	mov    rdx,rbp
  403417:	0f 16 1c 24          	movhps xmm3,QWORD PTR [rsp]
  40341b:	48 c7 84 24 10 01 00 	mov    QWORD PTR [rsp+0x110],0x0
  403422:	00 00 00 00 00 
  403427:	48 89 84 24 18 01 00 	mov    QWORD PTR [rsp+0x118],rax
  40342e:	00 
  40342f:	48 89 84 24 20 01 00 	mov    QWORD PTR [rsp+0x120],rax
  403436:	00 
  403437:	48 c7 84 24 28 01 00 	mov    QWORD PTR [rsp+0x128],0x0
  40343e:	00 00 00 00 00 
  403443:	0f 29 1c 24          	movaps XMMWORD PTR [rsp],xmm3
  403447:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
  40344b:	4c 8b 4c 24 08       	mov    r9,QWORD PTR [rsp+0x8]
  403450:	c7 84 24 38 01 00 00 	mov    DWORD PTR [rsp+0x138],0x0
  403457:	00 00 00 00 
  40345b:	48 c7 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],0x0
  403462:	00 00 00 00 00 
  403467:	48 c7 84 24 58 01 00 	mov    QWORD PTR [rsp+0x158],0x0
  40346e:	00 00 00 00 00 
  403473:	e8 98 f1 ff ff       	call   402610 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]>
  403478:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  40347f:	00 
  403480:	48 8d 84 24 38 01 00 	lea    rax,[rsp+0x138]
  403487:	00 
  403488:	48 8b 94 24 b8 00 00 	mov    rdx,QWORD PTR [rsp+0xb8]
  40348f:	00 
  403490:	49 8d 77 08          	lea    rsi,[r15+0x8]
  403494:	48 8d 8c 24 a8 00 00 	lea    rcx,[rsp+0xa8]
  40349b:	00 
  40349c:	48 89 3c 24          	mov    QWORD PTR [rsp],rdi
  4034a0:	48 8b bc 24 e8 00 00 	mov    rdi,QWORD PTR [rsp+0xe8]
  4034a7:	00 
  4034a8:	f3 0f 7e 2c 24       	movq   xmm5,QWORD PTR [rsp]
  4034ad:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  4034b1:	0f 16 2c 24          	movhps xmm5,QWORD PTR [rsp]
  4034b5:	0f 29 2c 24          	movaps XMMWORD PTR [rsp],xmm5
  4034b9:	4c 8b 04 24          	mov    r8,QWORD PTR [rsp]
  4034bd:	4c 8b 4c 24 08       	mov    r9,QWORD PTR [rsp+0x8]
  4034c2:	e8 49 f1 ff ff       	call   402610 <std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > > std::__set_difference<std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter>(std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::_Rb_tree_const_iterator<Pair>, std::insert_iterator<std::set<Pair, std::less<Pair>, std::allocator<Pair> > >, __gnu_cxx::__ops::_Iter_less_iter) [clone .constprop.67]>
  4034c7:	ba 24 00 00 00       	mov    edx,0x24
  4034cc:	be 70 77 40 00       	mov    esi,0x407770
  4034d1:	bf 40 91 60 00       	mov    edi,0x609140
  4034d6:	e8 25 da ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4034db:	48 8b ac 24 18 01 00 	mov    rbp,QWORD PTR [rsp+0x118]
  4034e2:	00 
  4034e3:	48 8d 43 08          	lea    rax,[rbx+0x8]
  4034e7:	49 89 c5             	mov    r13,rax
  4034ea:	48 39 c5             	cmp    rbp,rax
  4034ed:	74 6f                	je     40355e <testQTree()+0x9be>
  4034ef:	ba 02 00 00 00       	mov    edx,0x2
  4034f4:	be 4c 78 40 00       	mov    esi,0x40784c
  4034f9:	bf 40 91 60 00       	mov    edi,0x609140
  4034fe:	e8 fd d9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403503:	66 0f ef c0          	pxor   xmm0,xmm0
  403507:	bf 40 91 60 00       	mov    edi,0x609140
  40350c:	f3 0f 5a 45 20       	cvtss2sd xmm0,DWORD PTR [rbp+0x20]
  403511:	e8 6a da ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403516:	ba 02 00 00 00       	mov    edx,0x2
  40351b:	be e0 77 40 00       	mov    esi,0x4077e0
  403520:	48 89 c7             	mov    rdi,rax
  403523:	49 89 c4             	mov    r12,rax
  403526:	e8 d5 d9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40352b:	66 0f ef c0          	pxor   xmm0,xmm0
  40352f:	4c 89 e7             	mov    rdi,r12
  403532:	f3 0f 5a 45 24       	cvtss2sd xmm0,DWORD PTR [rbp+0x24]
  403537:	e8 44 da ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40353c:	ba 01 00 00 00       	mov    edx,0x1
  403541:	be 0d 78 40 00       	mov    esi,0x40780d
  403546:	48 89 c7             	mov    rdi,rax
  403549:	e8 b2 d9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40354e:	48 89 ef             	mov    rdi,rbp
  403551:	e8 ba d9 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  403556:	4c 39 e8             	cmp    rax,r13
  403559:	48 89 c5             	mov    rbp,rax
  40355c:	75 91                	jne    4034ef <testQTree()+0x94f>
  40355e:	ba 1c 00 00 00       	mov    edx,0x1c
  403563:	be 9c 78 40 00       	mov    esi,0x40789c
  403568:	bf 40 91 60 00       	mov    edi,0x609140
  40356d:	e8 8e d9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403572:	48 8b ac 24 48 01 00 	mov    rbp,QWORD PTR [rsp+0x148]
  403579:	00 
  40357a:	48 8d 84 24 38 01 00 	lea    rax,[rsp+0x138]
  403581:	00 
  403582:	49 89 c5             	mov    r13,rax
  403585:	48 39 c5             	cmp    rbp,rax
  403588:	74 6f                	je     4035f9 <testQTree()+0xa59>
  40358a:	ba 02 00 00 00       	mov    edx,0x2
  40358f:	be 4c 78 40 00       	mov    esi,0x40784c
  403594:	bf 40 91 60 00       	mov    edi,0x609140
  403599:	e8 62 d9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40359e:	66 0f ef c0          	pxor   xmm0,xmm0
  4035a2:	bf 40 91 60 00       	mov    edi,0x609140
  4035a7:	f3 0f 5a 45 20       	cvtss2sd xmm0,DWORD PTR [rbp+0x20]
  4035ac:	e8 cf d9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4035b1:	ba 02 00 00 00       	mov    edx,0x2
  4035b6:	be e0 77 40 00       	mov    esi,0x4077e0
  4035bb:	48 89 c7             	mov    rdi,rax
  4035be:	49 89 c4             	mov    r12,rax
  4035c1:	e8 3a d9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4035c6:	66 0f ef c0          	pxor   xmm0,xmm0
  4035ca:	4c 89 e7             	mov    rdi,r12
  4035cd:	f3 0f 5a 45 24       	cvtss2sd xmm0,DWORD PTR [rbp+0x24]
  4035d2:	e8 a9 d9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4035d7:	ba 01 00 00 00       	mov    edx,0x1
  4035dc:	be 0d 78 40 00       	mov    esi,0x40780d
  4035e1:	48 89 c7             	mov    rdi,rax
  4035e4:	e8 17 d9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4035e9:	48 89 ef             	mov    rdi,rbp
  4035ec:	e8 1f d9 ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  4035f1:	4c 39 e8             	cmp    rax,r13
  4035f4:	48 89 c5             	mov    rbp,rax
  4035f7:	75 91                	jne    40358a <testQTree()+0x9ea>
  4035f9:	ba 11 00 00 00       	mov    edx,0x11
  4035fe:	be b9 78 40 00       	mov    esi,0x4078b9
  403603:	bf 40 91 60 00       	mov    edi,0x609140
  403608:	e8 f3 d8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40360d:	66 0f ef c0          	pxor   xmm0,xmm0
  403611:	bf 40 91 60 00       	mov    edi,0x609140
  403616:	f3 0f 5a 44 24 28    	cvtss2sd xmm0,DWORD PTR [rsp+0x28]
  40361c:	e8 5f d9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403621:	ba 02 00 00 00       	mov    edx,0x2
  403626:	be e0 77 40 00       	mov    esi,0x4077e0
  40362b:	48 89 c7             	mov    rdi,rax
  40362e:	48 89 c5             	mov    rbp,rax
  403631:	e8 ca d8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403636:	66 0f ef c0          	pxor   xmm0,xmm0
  40363a:	48 89 ef             	mov    rdi,rbp
  40363d:	f3 0f 5a 44 24 20    	cvtss2sd xmm0,DWORD PTR [rsp+0x20]
  403643:	e8 38 d9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403648:	ba 02 00 00 00       	mov    edx,0x2
  40364d:	be 16 79 40 00       	mov    esi,0x407916
  403652:	48 89 c7             	mov    rdi,rax
  403655:	e8 a6 d8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40365a:	ba 10 00 00 00       	mov    edx,0x10
  40365f:	be cb 78 40 00       	mov    esi,0x4078cb
  403664:	bf 40 91 60 00       	mov    edi,0x609140
  403669:	e8 92 d8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40366e:	0f b7 94 24 88 01 00 	movzx  edx,WORD PTR [rsp+0x188]
  403675:	00 
  403676:	48 8b 8c 24 70 01 00 	mov    rcx,QWORD PTR [rsp+0x170]
  40367d:	00 
  40367e:	f3 0f 10 bc 24 8c 01 	movss  xmm7,DWORD PTR [rsp+0x18c]
  403685:	00 00 
  403687:	f3 0f 11 7c 24 18    	movss  DWORD PTR [rsp+0x18],xmm7
  40368d:	f3 0f 10 b4 24 90 01 	movss  xmm6,DWORD PTR [rsp+0x190]
  403694:	00 00 
  403696:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  40369d:	00 
  40369e:	f3 0f 10 ac 24 94 01 	movss  xmm5,DWORD PTR [rsp+0x194]
  4036a5:	00 00 
  4036a7:	f3 0f 10 bc 24 98 01 	movss  xmm7,DWORD PTR [rsp+0x198]
  4036ae:	00 00 
  4036b0:	48 29 d0             	sub    rax,rdx
  4036b3:	f3 0f 11 34 24       	movss  DWORD PTR [rsp],xmm6
  4036b8:	4c 8d 24 c1          	lea    r12,[rcx+rax*8]
  4036bc:	f3 0f 11 6c 24 28    	movss  DWORD PTR [rsp+0x28],xmm5
  4036c2:	f3 0f 11 7c 24 20    	movss  DWORD PTR [rsp+0x20],xmm7
  4036c8:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  4036ce:	66 83 f8 ff          	cmp    ax,0xffff
  4036d2:	0f 84 d6 17 00 00    	je     404eae <testQTree()+0x230e>
  4036d8:	66 83 f8 fe          	cmp    ax,0xfffe
  4036dc:	75 2a                	jne    403708 <testQTree()+0xb68>
  4036de:	4c 89 e0             	mov    rax,r12
  4036e1:	0f b7 50 20          	movzx  edx,WORD PTR [rax+0x20]
  4036e5:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  4036ec:	00 
  4036ed:	48 29 d0             	sub    rax,rdx
  4036f0:	48 8d 04 c1          	lea    rax,[rcx+rax*8]
  4036f4:	0f b7 50 28          	movzx  edx,WORD PTR [rax+0x28]
  4036f8:	66 83 fa fe          	cmp    dx,0xfffe
  4036fc:	74 e3                	je     4036e1 <testQTree()+0xb41>
  4036fe:	66 83 fa ff          	cmp    dx,0xffff
  403702:	0f 84 2f 17 00 00    	je     404e37 <testQTree()+0x2297>
  403708:	ba 05 00 00 00       	mov    edx,0x5
  40370d:	be 07 78 40 00       	mov    esi,0x407807
  403712:	bf 40 91 60 00       	mov    edi,0x609140
  403717:	e8 e4 d7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40371c:	ba 01 00 00 00       	mov    edx,0x1
  403721:	be de 77 40 00       	mov    esi,0x4077de
  403726:	bf 40 91 60 00       	mov    edi,0x609140
  40372b:	e8 d0 d7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403730:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  403736:	bf 40 91 60 00       	mov    edi,0x609140
  40373b:	f3 0f 5c 44 24 28    	subss  xmm0,DWORD PTR [rsp+0x28]
  403741:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  403745:	e8 36 d8 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40374a:	ba 02 00 00 00       	mov    edx,0x2
  40374f:	be e0 77 40 00       	mov    esi,0x4077e0
  403754:	48 89 c7             	mov    rdi,rax
  403757:	48 89 c5             	mov    rbp,rax
  40375a:	e8 a1 d7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40375f:	f3 0f 10 1c 24       	movss  xmm3,DWORD PTR [rsp]
  403764:	48 89 ef             	mov    rdi,rbp
  403767:	f3 0f 5c 5c 24 20    	subss  xmm3,DWORD PTR [rsp+0x20]
  40376d:	66 0f ef c0          	pxor   xmm0,xmm0
  403771:	f3 0f 5a c3          	cvtss2sd xmm0,xmm3
  403775:	e8 06 d8 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40377a:	ba 02 00 00 00       	mov    edx,0x2
  40377f:	be e3 77 40 00       	mov    esi,0x4077e3
  403784:	48 89 c7             	mov    rdi,rax
  403787:	48 89 c5             	mov    rbp,rax
  40378a:	e8 71 d7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40378f:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  403795:	48 89 ef             	mov    rdi,rbp
  403798:	f3 0f 58 44 24 28    	addss  xmm0,DWORD PTR [rsp+0x28]
  40379e:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  4037a2:	e8 d9 d7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4037a7:	ba 02 00 00 00       	mov    edx,0x2
  4037ac:	be e0 77 40 00       	mov    esi,0x4077e0
  4037b1:	48 89 c7             	mov    rdi,rax
  4037b4:	48 89 c5             	mov    rbp,rax
  4037b7:	e8 44 d7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4037bc:	f3 0f 10 04 24       	movss  xmm0,DWORD PTR [rsp]
  4037c1:	48 89 ef             	mov    rdi,rbp
  4037c4:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  4037ca:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  4037ce:	e8 ad d7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4037d3:	ba 02 00 00 00       	mov    edx,0x2
  4037d8:	be e6 77 40 00       	mov    esi,0x4077e6
  4037dd:	48 89 c7             	mov    rdi,rax
  4037e0:	e8 1b d7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4037e5:	ba 01 00 00 00       	mov    edx,0x1
  4037ea:	be 05 78 40 00       	mov    esi,0x407805
  4037ef:	bf 40 91 60 00       	mov    edi,0x609140
  4037f4:	e8 07 d7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4037f9:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  4037ff:	66 83 f8 fe          	cmp    ax,0xfffe
  403803:	0f 85 ab 01 00 00    	jne    4039b4 <testQTree()+0xe14>
  403809:	4d 8d 74 24 20       	lea    r14,[r12+0x20]
  40380e:	4c 89 e5             	mov    rbp,r12
  403811:	f3 0f 10 75 00       	movss  xmm6,DWORD PTR [rbp+0x0]
  403816:	ba 02 00 00 00       	mov    edx,0x2
  40381b:	be 4c 78 40 00       	mov    esi,0x40784c
  403820:	f3 0f 10 6d 04       	movss  xmm5,DWORD PTR [rbp+0x4]
  403825:	bf 40 91 60 00       	mov    edi,0x609140
  40382a:	f3 0f 11 74 24 30    	movss  DWORD PTR [rsp+0x30],xmm6
  403830:	f3 0f 11 6c 24 38    	movss  DWORD PTR [rsp+0x38],xmm5
  403836:	e8 c5 d6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40383b:	66 0f ef c0          	pxor   xmm0,xmm0
  40383f:	bf 40 91 60 00       	mov    edi,0x609140
  403844:	f3 0f 5a 44 24 30    	cvtss2sd xmm0,DWORD PTR [rsp+0x30]
  40384a:	e8 31 d7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40384f:	ba 02 00 00 00       	mov    edx,0x2
  403854:	be e0 77 40 00       	mov    esi,0x4077e0
  403859:	48 89 c7             	mov    rdi,rax
  40385c:	49 89 c5             	mov    r13,rax
  40385f:	e8 9c d6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403864:	66 0f ef c0          	pxor   xmm0,xmm0
  403868:	4c 89 ef             	mov    rdi,r13
  40386b:	f3 0f 5a 44 24 38    	cvtss2sd xmm0,DWORD PTR [rsp+0x38]
  403871:	e8 0a d7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403876:	ba 01 00 00 00       	mov    edx,0x1
  40387b:	be 0d 78 40 00       	mov    esi,0x40780d
  403880:	48 89 c7             	mov    rdi,rax
  403883:	e8 78 d6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403888:	48 83 c5 08          	add    rbp,0x8
  40388c:	49 39 ee             	cmp    r14,rbp
  40388f:	75 80                	jne    403811 <testQTree()+0xc71>
  403891:	41 0f b7 54 24 20    	movzx  edx,WORD PTR [r12+0x20]
  403897:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  40389e:	00 
  40389f:	48 29 d0             	sub    rax,rdx
  4038a2:	48 8b 94 24 70 01 00 	mov    rdx,QWORD PTR [rsp+0x170]
  4038a9:	00 
  4038aa:	4c 8d 24 c2          	lea    r12,[rdx+rax*8]
  4038ae:	e9 46 ff ff ff       	jmp    4037f9 <testQTree()+0xc59>
  4038b3:	48 c1 e7 04          	shl    rdi,0x4
  4038b7:	48 89 fe             	mov    rsi,rdi
  4038ba:	48 8b bc 24 70 01 00 	mov    rdi,QWORD PTR [rsp+0x170]
  4038c1:	00 
  4038c2:	48 29 c6             	sub    rsi,rax
  4038c5:	48 c1 e6 03          	shl    rsi,0x3
  4038c9:	e8 d2 d6 ff ff       	call   400fa0 <realloc@plt>
  4038ce:	48 89 84 24 70 01 00 	mov    QWORD PTR [rsp+0x170],rax
  4038d5:	00 
  4038d6:	48 8b 84 24 68 01 00 	mov    rax,QWORD PTR [rsp+0x168]
  4038dd:	00 
  4038de:	48 8b bc 24 78 01 00 	mov    rdi,QWORD PTR [rsp+0x178]
  4038e5:	00 
  4038e6:	48 8d 34 00          	lea    rsi,[rax+rax*1]
  4038ea:	e8 b1 d6 ff ff       	call   400fa0 <realloc@plt>
  4038ef:	48 8b 94 24 68 01 00 	mov    rdx,QWORD PTR [rsp+0x168]
  4038f6:	00 
  4038f7:	31 f6                	xor    esi,esi
  4038f9:	48 89 84 24 78 01 00 	mov    QWORD PTR [rsp+0x178],rax
  403900:	00 
  403901:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
  403905:	e8 46 d5 ff ff       	call   400e50 <memset@plt>
  40390a:	48 8b 84 24 68 01 00 	mov    rax,QWORD PTR [rsp+0x168]
  403911:	00 
  403912:	4c 8b 84 24 60 01 00 	mov    r8,QWORD PTR [rsp+0x160]
  403919:	00 
  40391a:	48 8d 3c 00          	lea    rdi,[rax+rax*1]
  40391e:	48 89 bc 24 68 01 00 	mov    QWORD PTR [rsp+0x168],rdi
  403925:	00 
  403926:	e9 52 f3 ff ff       	jmp    402c7d <testQTree()+0xdd>
  40392b:	4c 39 ac 24 b8 00 00 	cmp    QWORD PTR [rsp+0xb8],r13
  403932:	00 
  403933:	48 89 eb             	mov    rbx,rbp
  403936:	74 71                	je     4039a9 <testQTree()+0xe09>
  403938:	48 89 df             	mov    rdi,rbx
  40393b:	e8 b0 d5 ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  403940:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  403945:	f3 0f 10 40 20       	movss  xmm0,DWORD PTR [rax+0x20]
  40394a:	0f 2f e8             	comiss xmm5,xmm0
  40394d:	0f 87 1c f6 ff ff    	ja     402f6f <testQTree()+0x3cf>
  403953:	0f 2f 04 24          	comiss xmm0,DWORD PTR [rsp]
  403957:	48 89 da             	mov    rdx,rbx
  40395a:	48 89 c3             	mov    rbx,rax
  40395d:	0f 86 fd f5 ff ff    	jbe    402f60 <testQTree()+0x3c0>
  403963:	e9 55 f6 ff ff       	jmp    402fbd <testQTree()+0x41d>
  403968:	f3 0f 10 43 20       	movss  xmm0,DWORD PTR [rbx+0x20]
  40396d:	f3 0f 10 1c 24       	movss  xmm3,DWORD PTR [rsp]
  403972:	0f 2f c3             	comiss xmm0,xmm3
  403975:	0f 87 08 f6 ff ff    	ja     402f83 <testQTree()+0x3e3>
  40397b:	45 31 f6             	xor    r14d,r14d
  40397e:	0f 2f d8             	comiss xmm3,xmm0
  403981:	0f 87 fc f5 ff ff    	ja     402f83 <testQTree()+0x3e3>
  403987:	f3 0f 10 43 24       	movss  xmm0,DWORD PTR [rbx+0x24]
  40398c:	0f 2f 44 24 18       	comiss xmm0,DWORD PTR [rsp+0x18]
  403991:	41 0f 97 c6          	seta   r14b
  403995:	e9 e9 f5 ff ff       	jmp    402f83 <testQTree()+0x3e3>
  40399a:	48 39 9c 24 b8 00 00 	cmp    QWORD PTR [rsp+0xb8],rbx
  4039a1:	00 
  4039a2:	75 94                	jne    403938 <testQTree()+0xd98>
  4039a4:	e9 cb f5 ff ff       	jmp    402f74 <testQTree()+0x3d4>
  4039a9:	41 be 01 00 00 00    	mov    r14d,0x1
  4039af:	e9 cf f5 ff ff       	jmp    402f83 <testQTree()+0x3e3>
  4039b4:	66 83 f8 ff          	cmp    ax,0xffff
  4039b8:	0f 84 c2 17 00 00    	je     405180 <testQTree()+0x25e0>
  4039be:	66 85 c0             	test   ax,ax
  4039c1:	0f 84 8d 00 00 00    	je     403a54 <testQTree()+0xeb4>
  4039c7:	31 ed                	xor    ebp,ebp
  4039c9:	f3 41 0f 10 34 ec    	movss  xmm6,DWORD PTR [r12+rbp*8]
  4039cf:	ba 02 00 00 00       	mov    edx,0x2
  4039d4:	be 4c 78 40 00       	mov    esi,0x40784c
  4039d9:	f3 41 0f 10 6c ec 04 	movss  xmm5,DWORD PTR [r12+rbp*8+0x4]
  4039e0:	bf 40 91 60 00       	mov    edi,0x609140
  4039e5:	f3 0f 11 34 24       	movss  DWORD PTR [rsp],xmm6
  4039ea:	f3 0f 11 6c 24 18    	movss  DWORD PTR [rsp+0x18],xmm5
  4039f0:	e8 0b d5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4039f5:	66 0f ef c0          	pxor   xmm0,xmm0
  4039f9:	bf 40 91 60 00       	mov    edi,0x609140
  4039fe:	f3 0f 5a 04 24       	cvtss2sd xmm0,DWORD PTR [rsp]
  403a03:	e8 78 d5 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403a08:	ba 02 00 00 00       	mov    edx,0x2
  403a0d:	be e0 77 40 00       	mov    esi,0x4077e0
  403a12:	48 89 c7             	mov    rdi,rax
  403a15:	49 89 c5             	mov    r13,rax
  403a18:	e8 e3 d4 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403a1d:	66 0f ef c0          	pxor   xmm0,xmm0
  403a21:	4c 89 ef             	mov    rdi,r13
  403a24:	f3 0f 5a 44 24 18    	cvtss2sd xmm0,DWORD PTR [rsp+0x18]
  403a2a:	e8 51 d5 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  403a2f:	ba 01 00 00 00       	mov    edx,0x1
  403a34:	be 0d 78 40 00       	mov    esi,0x40780d
  403a39:	48 89 c7             	mov    rdi,rax
  403a3c:	e8 bf d4 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403a41:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  403a47:	48 83 c5 01          	add    rbp,0x1
  403a4b:	48 39 e8             	cmp    rax,rbp
  403a4e:	0f 87 75 ff ff ff    	ja     4039c9 <testQTree()+0xe29>
  403a54:	ba 01 00 00 00       	mov    edx,0x1
  403a59:	be 39 78 40 00       	mov    esi,0x407839
  403a5e:	bf 40 91 60 00       	mov    edi,0x609140
  403a63:	e8 98 d4 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403a68:	48 8b 84 24 80 00 00 	mov    rax,QWORD PTR [rsp+0x80]
  403a6f:	00 
  403a70:	48 8b 8c 24 88 00 00 	mov    rcx,QWORD PTR [rsp+0x88]
  403a77:	00 
  403a78:	48 39 c1             	cmp    rcx,rax
  403a7b:	74 0b                	je     403a88 <testQTree()+0xee8>
  403a7d:	48 89 84 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rax
  403a84:	00 
  403a85:	48 89 c1             	mov    rcx,rax
  403a88:	0f b7 94 24 88 01 00 	movzx  edx,WORD PTR [rsp+0x188]
  403a8f:	00 
  403a90:	f3 0f 10 bc 24 8c 01 	movss  xmm7,DWORD PTR [rsp+0x18c]
  403a97:	00 00 
  403a99:	f3 0f 10 a4 24 90 01 	movss  xmm4,DWORD PTR [rsp+0x190]
  403aa0:	00 00 
  403aa2:	f3 0f 11 7c 24 20    	movss  DWORD PTR [rsp+0x20],xmm7
  403aa8:	f3 0f 11 64 24 28    	movss  DWORD PTR [rsp+0x28],xmm4
  403aae:	f3 0f 10 bc 24 94 01 	movss  xmm7,DWORD PTR [rsp+0x194]
  403ab5:	00 00 
  403ab7:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  403abe:	00 
  403abf:	49 89 d7             	mov    r15,rdx
  403ac2:	f3 0f 10 a4 24 98 01 	movss  xmm4,DWORD PTR [rsp+0x198]
  403ac9:	00 00 
  403acb:	48 29 d0             	sub    rax,rdx
  403ace:	48 8b 94 24 70 01 00 	mov    rdx,QWORD PTR [rsp+0x170]
  403ad5:	00 
  403ad6:	f3 0f 11 7c 24 38    	movss  DWORD PTR [rsp+0x38],xmm7
  403adc:	f3 0f 11 64 24 30    	movss  DWORD PTR [rsp+0x30],xmm4
  403ae2:	4c 8d 24 c2          	lea    r12,[rdx+rax*8]
  403ae6:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  403aec:	66 83 f8 ff          	cmp    ax,0xffff
  403af0:	0f 84 12 01 00 00    	je     403c08 <testQTree()+0x1068>
  403af6:	66 83 f8 fe          	cmp    ax,0xfffe
  403afa:	0f 84 a3 12 00 00    	je     404da3 <testQTree()+0x2203>
  403b00:	66 85 c0             	test   ax,ax
  403b03:	0f 84 00 03 00 00    	je     403e09 <testQTree()+0x1269>
  403b09:	48 8b ac 24 90 00 00 	mov    rbp,QWORD PTR [rsp+0x90]
  403b10:	00 
  403b11:	45 31 ed             	xor    r13d,r13d
  403b14:	eb 25                	jmp    403b3b <testQTree()+0xf9b>
  403b16:	66 44 89 39          	mov    WORD PTR [rcx],r15w
  403b1a:	66 44 89 69 02       	mov    WORD PTR [rcx+0x2],r13w
  403b1f:	48 83 c1 04          	add    rcx,0x4
  403b23:	48 89 8c 24 88 00 00 	mov    QWORD PTR [rsp+0x88],rcx
  403b2a:	00 
  403b2b:	41 83 c5 01          	add    r13d,0x1
  403b2f:	66 45 39 6c 24 28    	cmp    WORD PTR [r12+0x28],r13w
  403b35:	0f 86 ce 02 00 00    	jbe    403e09 <testQTree()+0x1269>
  403b3b:	48 39 e9             	cmp    rcx,rbp
  403b3e:	75 d6                	jne    403b16 <testQTree()+0xf76>
  403b40:	4c 8b b4 24 80 00 00 	mov    r14,QWORD PTR [rsp+0x80]
  403b47:	00 
  403b48:	48 89 c8             	mov    rax,rcx
  403b4b:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  403b50:	4c 29 f0             	sub    rax,r14
  403b53:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
  403b58:	48 c1 f8 02          	sar    rax,0x2
  403b5c:	48 85 c0             	test   rax,rax
  403b5f:	0f 84 63 18 00 00    	je     4053c8 <testQTree()+0x2828>
  403b65:	48 8d 2c 00          	lea    rbp,[rax+rax*1]
  403b69:	48 39 c5             	cmp    rbp,rax
  403b6c:	72 13                	jb     403b81 <testQTree()+0xfe1>
  403b6e:	48 bf ff ff ff ff ff 	movabs rdi,0x3fffffffffffffff
  403b75:	ff ff 3f 
  403b78:	48 39 fd             	cmp    rbp,rdi
  403b7b:	0f 86 85 12 00 00    	jbe    404e06 <testQTree()+0x2266>
  403b81:	48 c7 c5 fc ff ff ff 	mov    rbp,0xfffffffffffffffc
  403b88:	48 89 ef             	mov    rdi,rbp
  403b8b:	e8 50 d3 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  403b90:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  403b94:	48 89 c7             	mov    rdi,rax
  403b97:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
  403b9c:	48 89 f8             	mov    rax,rdi
  403b9f:	48 01 d0             	add    rax,rdx
  403ba2:	4c 39 74 24 18       	cmp    QWORD PTR [rsp+0x18],r14
  403ba7:	48 8d 4c 17 04       	lea    rcx,[rdi+rdx*1+0x4]
  403bac:	66 44 89 38          	mov    WORD PTR [rax],r15w
  403bb0:	66 44 89 68 02       	mov    WORD PTR [rax+0x2],r13w
  403bb5:	0f 84 5d 12 00 00    	je     404e18 <testQTree()+0x2278>
  403bbb:	4c 89 f6             	mov    rsi,r14
  403bbe:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  403bc3:	e8 c8 d3 ff ff       	call   400f90 <memmove@plt>
  403bc8:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  403bcd:	4c 89 f7             	mov    rdi,r14
  403bd0:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  403bd5:	e8 f6 d2 ff ff       	call   400ed0 <operator delete(void*)@plt>
  403bda:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  403bdf:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  403be3:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  403be8:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
  403bec:	0f 16 04 24          	movhps xmm0,QWORD PTR [rsp]
  403bf0:	48 01 c5             	add    rbp,rax
  403bf3:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
  403bfa:	00 
  403bfb:	48 89 ac 24 90 00 00 	mov    QWORD PTR [rsp+0x90],rbp
  403c02:	00 
  403c03:	e9 23 ff ff ff       	jmp    403b2b <testQTree()+0xf8b>
  403c08:	f3 0f 10 05 f4 3d 00 	movss  xmm0,DWORD PTR [rip+0x3df4]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  403c0f:	00 
  403c10:	41 0f b7 4c 24 20    	movzx  ecx,WORD PTR [r12+0x20]
  403c16:	0f 28 d8             	movaps xmm3,xmm0
  403c19:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
  403c20:	00 
  403c21:	0f 28 ec             	movaps xmm5,xmm4
  403c24:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  403c29:	f3 0f 59 df          	mulss  xmm3,xmm7
  403c2d:	f3 0f 10 64 24 20    	movss  xmm4,DWORD PTR [rsp+0x20]
  403c33:	f3 0f 59 e8          	mulss  xmm5,xmm0
  403c37:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  403c3e:	00 
  403c3f:	f3 0f 5c e3          	subss  xmm4,xmm3
  403c43:	0f 28 f3             	movaps xmm6,xmm3
  403c46:	f3 0f 11 74 24 18    	movss  DWORD PTR [rsp+0x18],xmm6
  403c4c:	0f 28 c4             	movaps xmm0,xmm4
  403c4f:	f3 0f 10 64 24 28    	movss  xmm4,DWORD PTR [rsp+0x28]
  403c55:	f3 0f 5c e5          	subss  xmm4,xmm5
  403c59:	66 0f 7e c0          	movd   eax,xmm0
  403c5d:	f3 0f 11 24 24       	movss  DWORD PTR [rsp],xmm4
  403c62:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  403c66:	48 c1 e2 20          	shl    rdx,0x20
  403c6a:	48 09 d0             	or     rax,rdx
  403c6d:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  403c71:	66 0f 7e e8          	movd   eax,xmm5
  403c75:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  403c7a:	48 89 c2             	mov    rdx,rax
  403c7d:	66 0f 7e f0          	movd   eax,xmm6
  403c81:	48 c1 e2 20          	shl    rdx,0x20
  403c85:	f3 0f 11 2c 24       	movss  DWORD PTR [rsp],xmm5
  403c8a:	48 09 d0             	or     rax,rdx
  403c8d:	4c 89 ea             	mov    rdx,r13
  403c90:	48 89 44 24 40       	mov    QWORD PTR [rsp+0x40],rax
  403c95:	f3 0f 7e 4c 24 40    	movq   xmm1,QWORD PTR [rsp+0x40]
  403c9b:	e8 c0 2a 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  403ca0:	f3 0f 10 15 60 3d 00 	movss  xmm2,DWORD PTR [rip+0x3d60]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  403ca7:	00 
  403ca8:	41 0f b7 4c 24 22    	movzx  ecx,WORD PTR [r12+0x22]
  403cae:	f3 0f 10 4c 24 30    	movss  xmm1,DWORD PTR [rsp+0x30]
  403cb4:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  403cb9:	f3 0f 59 ca          	mulss  xmm1,xmm2
  403cbd:	f3 0f 10 5c 24 18    	movss  xmm3,DWORD PTR [rsp+0x18]
  403cc3:	f3 0f 10 74 24 20    	movss  xmm6,DWORD PTR [rsp+0x20]
  403cc9:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  403cd0:	00 
  403cd1:	f3 0f 58 f3          	addss  xmm6,xmm3
  403cd5:	f3 0f 11 54 24 30    	movss  DWORD PTR [rsp+0x30],xmm2
  403cdb:	f3 0f 58 4c 24 28    	addss  xmm1,DWORD PTR [rsp+0x28]
  403ce1:	66 0f 7e f0          	movd   eax,xmm6
  403ce5:	f3 0f 11 74 24 40    	movss  DWORD PTR [rsp+0x40],xmm6
  403ceb:	f3 0f 11 4c 24 18    	movss  DWORD PTR [rsp+0x18],xmm1
  403cf1:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
  403cf6:	48 c1 e2 20          	shl    rdx,0x20
  403cfa:	48 09 d0             	or     rax,rdx
  403cfd:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  403d02:	8b 04 24             	mov    eax,DWORD PTR [rsp]
  403d05:	f3 0f 7e 44 24 18    	movq   xmm0,QWORD PTR [rsp+0x18]
  403d0b:	f3 0f 11 5c 24 18    	movss  DWORD PTR [rsp+0x18],xmm3
  403d11:	48 89 c2             	mov    rdx,rax
  403d14:	66 0f 7e d8          	movd   eax,xmm3
  403d18:	48 c1 e2 20          	shl    rdx,0x20
  403d1c:	48 09 d0             	or     rax,rdx
  403d1f:	4c 89 ea             	mov    rdx,r13
  403d22:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
  403d27:	f3 0f 7e 4c 24 50    	movq   xmm1,QWORD PTR [rsp+0x50]
  403d2d:	e8 2e 2a 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  403d32:	f3 0f 10 44 24 38    	movss  xmm0,DWORD PTR [rsp+0x38]
  403d38:	41 0f b7 4c 24 24    	movzx  ecx,WORD PTR [r12+0x24]
  403d3e:	f3 0f 59 44 24 30    	mulss  xmm0,DWORD PTR [rsp+0x30]
  403d44:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  403d49:	f3 0f 10 64 24 28    	movss  xmm4,DWORD PTR [rsp+0x28]
  403d4f:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  403d54:	f3 0f 58 e5          	addss  xmm4,xmm5
  403d58:	f3 0f 10 4c 24 18    	movss  xmm1,DWORD PTR [rsp+0x18]
  403d5e:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  403d65:	00 
  403d66:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  403d6c:	66 0f 7e e2          	movd   edx,xmm4
  403d70:	f3 0f 11 64 24 20    	movss  DWORD PTR [rsp+0x20],xmm4
  403d76:	48 c1 e2 20          	shl    rdx,0x20
  403d7a:	66 0f 7e c0          	movd   eax,xmm0
  403d7e:	48 09 d0             	or     rax,rdx
  403d81:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  403d85:	66 0f 7e e8          	movd   eax,xmm5
  403d89:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  403d8e:	48 89 c2             	mov    rdx,rax
  403d91:	66 0f 7e c8          	movd   eax,xmm1
  403d95:	48 c1 e2 20          	shl    rdx,0x20
  403d99:	f3 0f 11 2c 24       	movss  DWORD PTR [rsp],xmm5
  403d9e:	48 09 d0             	or     rax,rdx
  403da1:	4c 89 ea             	mov    rdx,r13
  403da4:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  403da9:	f3 0f 7e 4c 24 28    	movq   xmm1,QWORD PTR [rsp+0x28]
  403daf:	e8 ac 29 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  403db4:	f3 0f 10 4c 24 40    	movss  xmm1,DWORD PTR [rsp+0x40]
  403dba:	41 0f b7 4c 24 26    	movzx  ecx,WORD PTR [r12+0x26]
  403dc0:	f3 0f 10 64 24 20    	movss  xmm4,DWORD PTR [rsp+0x20]
  403dc6:	0f 14 cc             	unpcklps xmm1,xmm4
  403dc9:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  403dce:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  403dd4:	0f 14 c5             	unpcklps xmm0,xmm5
  403dd7:	0f 28 e9             	movaps xmm5,xmm1
  403dda:	0f 16 e8             	movlhps xmm5,xmm0
  403ddd:	0f 29 2c 24          	movaps XMMWORD PTR [rsp],xmm5
  403de1:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  403de6:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  403deb:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  403df2:	00 
  403df3:	4c 89 ea             	mov    rdx,r13
  403df6:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  403dfb:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  403dff:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  403e04:	e8 57 29 00 00       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  403e09:	ba 06 00 00 00       	mov    edx,0x6
  403e0e:	be dc 78 40 00       	mov    esi,0x4078dc
  403e13:	bf 40 91 60 00       	mov    edi,0x609140
  403e18:	e8 e3 d0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403e1d:	48 8b b4 24 88 00 00 	mov    rsi,QWORD PTR [rsp+0x88]
  403e24:	00 
  403e25:	48 2b b4 24 80 00 00 	sub    rsi,QWORD PTR [rsp+0x80]
  403e2c:	00 
  403e2d:	bf 40 91 60 00       	mov    edi,0x609140
  403e32:	48 c1 fe 02          	sar    rsi,0x2
  403e36:	e8 45 d0 ff ff       	call   400e80 <std::ostream& std::ostream::_M_insert<unsigned long>(unsigned long)@plt>
  403e3b:	ba 0a 00 00 00       	mov    edx,0xa
  403e40:	be e3 78 40 00       	mov    esi,0x4078e3
  403e45:	48 89 c7             	mov    rdi,rax
  403e48:	e8 b3 d0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403e4d:	48 8b ac 24 40 01 00 	mov    rbp,QWORD PTR [rsp+0x140]
  403e54:	00 
  403e55:	48 85 ed             	test   rbp,rbp
  403e58:	74 25                	je     403e7f <testQTree()+0x12df>
  403e5a:	48 8b 75 18          	mov    rsi,QWORD PTR [rbp+0x18]
  403e5e:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  403e65:	00 
  403e66:	e8 65 16 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  403e6b:	4c 8b 65 10          	mov    r12,QWORD PTR [rbp+0x10]
  403e6f:	48 89 ef             	mov    rdi,rbp
  403e72:	e8 59 d0 ff ff       	call   400ed0 <operator delete(void*)@plt>
  403e77:	4d 85 e4             	test   r12,r12
  403e7a:	4c 89 e5             	mov    rbp,r12
  403e7d:	75 db                	jne    403e5a <testQTree()+0x12ba>
  403e7f:	48 8b ac 24 10 01 00 	mov    rbp,QWORD PTR [rsp+0x110]
  403e86:	00 
  403e87:	48 85 ed             	test   rbp,rbp
  403e8a:	74 20                	je     403eac <testQTree()+0x130c>
  403e8c:	48 8b 75 18          	mov    rsi,QWORD PTR [rbp+0x18]
  403e90:	48 89 df             	mov    rdi,rbx
  403e93:	e8 38 16 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  403e98:	4c 8b 65 10          	mov    r12,QWORD PTR [rbp+0x10]
  403e9c:	48 89 ef             	mov    rdi,rbp
  403e9f:	e8 2c d0 ff ff       	call   400ed0 <operator delete(void*)@plt>
  403ea4:	4d 85 e4             	test   r12,r12
  403ea7:	4c 89 e5             	mov    rbp,r12
  403eaa:	75 e0                	jne    403e8c <testQTree()+0x12ec>
  403eac:	ba 17 00 00 00       	mov    edx,0x17
  403eb1:	be ee 78 40 00       	mov    esi,0x4078ee
  403eb6:	bf 40 91 60 00       	mov    edi,0x609140
  403ebb:	e8 40 d0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  403ec0:	e8 5b cf ff ff       	call   400e20 <std::chrono::_V2::system_clock::now()@plt>
  403ec5:	48 ba db 34 b6 d7 82 	movabs rdx,0x431bde82d7b634db
  403ecc:	de 1b 43 
  403ecf:	48 89 c1             	mov    rcx,rax
  403ed2:	41 bf a0 86 01 00    	mov    r15d,0x186a0
  403ed8:	48 f7 ea             	imul   rdx
  403edb:	48 c1 f9 3f          	sar    rcx,0x3f
  403edf:	45 31 f6             	xor    r14d,r14d
  403ee2:	48 c1 fa 12          	sar    rdx,0x12
  403ee6:	48 29 ca             	sub    rdx,rcx
  403ee9:	48 89 54 24 50       	mov    QWORD PTR [rsp+0x50],rdx
  403eee:	66 90                	xchg   ax,ax
  403ef0:	48 8d bc 24 a0 01 00 	lea    rdi,[rsp+0x1a0]
  403ef7:	00 
  403ef8:	e8 13 d3 ff ff       	call   401210 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]>
  403efd:	f3 0f 10 15 0f 3b 00 	movss  xmm2,DWORD PTR [rip+0x3b0f]        # 407a14 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd4>
  403f04:	00 
  403f05:	48 8d bc 24 a0 01 00 	lea    rdi,[rsp+0x1a0]
  403f0c:	00 
  403f0d:	f3 0f 59 d0          	mulss  xmm2,xmm0
  403f11:	f3 0f 5c 15 ff 3a 00 	subss  xmm2,DWORD PTR [rip+0x3aff]        # 407a18 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd8>
  403f18:	00 
  403f19:	f3 0f 11 14 24       	movss  DWORD PTR [rsp],xmm2
  403f1e:	e8 ed d2 ff ff       	call   401210 <float std::generate_canonical<float, 24ul, std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul> >(std::mersenne_twister_engine<unsigned long, 64ul, 312ul, 156ul, 31ul, 13043109905998158313ul, 29ul, 6148914691236517205ul, 17ul, 8202884508482404352ul, 37ul, 18444473444759240704ul, 43ul, 6364136223846793005ul>&) [clone .part.40]>
  403f23:	f3 0f 59 05 e9 3a 00 	mulss  xmm0,DWORD PTR [rip+0x3ae9]        # 407a14 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd4>
  403f2a:	00 
  403f2b:	f3 44 0f 10 8c 24 90 	movss  xmm9,DWORD PTR [rsp+0x190]
  403f32:	01 00 00 
  403f35:	66 0f ef c9          	pxor   xmm1,xmm1
  403f39:	41 0f 28 f1          	movaps xmm6,xmm9
  403f3d:	48 c7 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],0x0
  403f44:	00 00 00 00 00 
  403f49:	f3 44 0f 10 94 24 8c 	movss  xmm10,DWORD PTR [rsp+0x18c]
  403f50:	01 00 00 
  403f53:	c7 84 24 08 01 00 00 	mov    DWORD PTR [rsp+0x108],0x41a00000
  403f5a:	00 00 a0 41 
  403f5e:	f3 0f 10 bc 24 98 01 	movss  xmm7,DWORD PTR [rsp+0x198]
  403f65:	00 00 
  403f67:	44 0f b7 ac 24 88 01 	movzx  r13d,WORD PTR [rsp+0x188]
  403f6e:	00 00 
  403f70:	f3 0f 5c f7          	subss  xmm6,xmm7
  403f74:	41 0f 28 ea          	movaps xmm5,xmm10
  403f78:	f3 0f 5c 05 98 3a 00 	subss  xmm0,DWORD PTR [rip+0x3a98]        # 407a18 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd8>
  403f7f:	00 
  403f80:	f3 44 0f 10 9c 24 94 	movss  xmm11,DWORD PTR [rsp+0x194]
  403f87:	01 00 00 
  403f8a:	f3 41 0f 5c eb       	subss  xmm5,xmm11
  403f8f:	f3 0f 10 14 24       	movss  xmm2,DWORD PTR [rsp]
  403f94:	0f 29 8c 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm1
  403f9b:	00 
  403f9c:	0f 28 ca             	movaps xmm1,xmm2
  403f9f:	f3 0f 11 94 24 00 01 	movss  DWORD PTR [rsp+0x100],xmm2
  403fa6:	00 00 
  403fa8:	f3 0f 5c cd          	subss  xmm1,xmm5
  403fac:	f3 44 0f 11 54 24 18 	movss  DWORD PTR [rsp+0x18],xmm10
  403fb3:	0f 28 d8             	movaps xmm3,xmm0
  403fb6:	f3 44 0f 10 25 51 3a 	movss  xmm12,DWORD PTR [rip+0x3a51]        # 407a10 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd0>
  403fbd:	00 00 
  403fbf:	f3 0f 11 84 24 04 01 	movss  DWORD PTR [rsp+0x104],xmm0
  403fc6:	00 00 
  403fc8:	f3 0f 5c de          	subss  xmm3,xmm6
  403fcc:	f3 44 0f 11 0c 24    	movss  DWORD PTR [rsp],xmm9
  403fd2:	f3 0f 59 c9          	mulss  xmm1,xmm1
  403fd6:	f3 44 0f 11 5c 24 28 	movss  DWORD PTR [rsp+0x28],xmm11
  403fdd:	f3 0f 11 7c 24 20    	movss  DWORD PTR [rsp+0x20],xmm7
  403fe3:	f3 0f 59 db          	mulss  xmm3,xmm3
  403fe7:	0f 28 e3             	movaps xmm4,xmm3
  403fea:	f3 0f 58 e1          	addss  xmm4,xmm1
  403fee:	44 0f 2f e4          	comiss xmm12,xmm4
  403ff2:	0f 83 a9 00 00 00    	jae    4040a1 <testQTree()+0x1501>
  403ff8:	f3 41 0f 58 f9       	addss  xmm7,xmm9
  403ffd:	0f 28 e0             	movaps xmm4,xmm0
  404000:	f3 0f 5c e7          	subss  xmm4,xmm7
  404004:	f3 0f 59 e4          	mulss  xmm4,xmm4
  404008:	f3 0f 58 cc          	addss  xmm1,xmm4
  40400c:	44 0f 2f e1          	comiss xmm12,xmm1
  404010:	0f 83 8b 00 00 00    	jae    4040a1 <testQTree()+0x1501>
  404016:	45 0f 28 c3          	movaps xmm8,xmm11
  40401a:	0f 28 ca             	movaps xmm1,xmm2
  40401d:	f3 45 0f 58 c2       	addss  xmm8,xmm10
  404022:	f3 41 0f 5c c8       	subss  xmm1,xmm8
  404027:	f3 0f 59 c9          	mulss  xmm1,xmm1
  40402b:	f3 0f 58 d9          	addss  xmm3,xmm1
  40402f:	44 0f 2f e3          	comiss xmm12,xmm3
  404033:	73 6c                	jae    4040a1 <testQTree()+0x1501>
  404035:	f3 0f 58 e1          	addss  xmm4,xmm1
  404039:	44 0f 2f e4          	comiss xmm12,xmm4
  40403d:	73 62                	jae    4040a1 <testQTree()+0x1501>
  40403f:	0f 2f d5             	comiss xmm2,xmm5
  404042:	72 27                	jb     40406b <testQTree()+0x14cb>
  404044:	44 0f 2f c2          	comiss xmm8,xmm2
  404048:	72 21                	jb     40406b <testQTree()+0x14cb>
  40404a:	0f 28 ce             	movaps xmm1,xmm6
  40404d:	f3 0f 5c 0d b7 39 00 	subss  xmm1,DWORD PTR [rip+0x39b7]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  404054:	00 
  404055:	0f 2f c1             	comiss xmm0,xmm1
  404058:	72 11                	jb     40406b <testQTree()+0x14cb>
  40405a:	f3 0f 10 0d aa 39 00 	movss  xmm1,DWORD PTR [rip+0x39aa]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  404061:	00 
  404062:	f3 0f 58 cf          	addss  xmm1,xmm7
  404066:	0f 2f c8             	comiss xmm1,xmm0
  404069:	73 36                	jae    4040a1 <testQTree()+0x1501>
  40406b:	f3 0f 5c 2d 99 39 00 	subss  xmm5,DWORD PTR [rip+0x3999]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  404072:	00 
  404073:	0f 2f d5             	comiss xmm2,xmm5
  404076:	0f 82 00 01 00 00    	jb     40417c <testQTree()+0x15dc>
  40407c:	f3 44 0f 58 05 87 39 	addss  xmm8,DWORD PTR [rip+0x3987]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  404083:	00 00 
  404085:	44 0f 2f c2          	comiss xmm8,xmm2
  404089:	0f 82 ed 00 00 00    	jb     40417c <testQTree()+0x15dc>
  40408f:	0f 2f c6             	comiss xmm0,xmm6
  404092:	0f 82 e4 00 00 00    	jb     40417c <testQTree()+0x15dc>
  404098:	0f 2f f8             	comiss xmm7,xmm0
  40409b:	0f 82 db 00 00 00    	jb     40417c <testQTree()+0x15dc>
  4040a1:	41 0f b7 d5          	movzx  edx,r13w
  4040a5:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  4040ac:	00 
  4040ad:	48 29 d0             	sub    rax,rdx
  4040b0:	48 8b 94 24 70 01 00 	mov    rdx,QWORD PTR [rsp+0x170]
  4040b7:	00 
  4040b8:	4c 8d 24 c2          	lea    r12,[rdx+rax*8]
  4040bc:	41 0f b7 54 24 28    	movzx  edx,WORD PTR [r12+0x28]
  4040c2:	66 83 fa ff          	cmp    dx,0xffff
  4040c6:	0f 84 ce 03 00 00    	je     40449a <testQTree()+0x18fa>
  4040cc:	66 83 fa fe          	cmp    dx,0xfffe
  4040d0:	0f 84 8c 02 00 00    	je     404362 <testQTree()+0x17c2>
  4040d6:	66 85 d2             	test   dx,dx
  4040d9:	0f 84 9d 00 00 00    	je     40417c <testQTree()+0x15dc>
  4040df:	31 ed                	xor    ebp,ebp
  4040e1:	31 c9                	xor    ecx,ecx
  4040e3:	31 db                	xor    ebx,ebx
  4040e5:	f3 0f 10 0d 1f 39 00 	movss  xmm1,DWORD PTR [rip+0x391f]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  4040ec:	00 
  4040ed:	eb 24                	jmp    404113 <testQTree()+0x1573>
  4040ef:	90                   	nop
  4040f0:	83 c3 01             	add    ebx,0x1
  4040f3:	66 39 da             	cmp    dx,bx
  4040f6:	76 6d                	jbe    404165 <testQTree()+0x15c5>
  4040f8:	f3 0f 10 84 24 04 01 	movss  xmm0,DWORD PTR [rsp+0x104]
  4040ff:	00 00 
  404101:	f3 0f 10 94 24 00 01 	movss  xmm2,DWORD PTR [rsp+0x100]
  404108:	00 00 
  40410a:	f3 0f 10 8c 24 08 01 	movss  xmm1,DWORD PTR [rsp+0x108]
  404111:	00 00 
  404113:	0f b7 c3             	movzx  eax,bx
  404116:	f3 0f 59 c9          	mulss  xmm1,xmm1
  40411a:	49 8d 04 c4          	lea    rax,[r12+rax*8]
  40411e:	f3 0f 5c 40 04       	subss  xmm0,DWORD PTR [rax+0x4]
  404123:	f3 0f 5c 10          	subss  xmm2,DWORD PTR [rax]
  404127:	48 89 e8             	mov    rax,rbp
  40412a:	f3 0f 59 c0          	mulss  xmm0,xmm0
  40412e:	f3 0f 59 d2          	mulss  xmm2,xmm2
  404132:	f3 0f 58 c2          	addss  xmm0,xmm2
  404136:	0f 2f c8             	comiss xmm1,xmm0
  404139:	72 b5                	jb     4040f0 <testQTree()+0x1550>
  40413b:	48 3b 8c 24 40 01 00 	cmp    rcx,QWORD PTR [rsp+0x140]
  404142:	00 
  404143:	0f 84 27 01 00 00    	je     404270 <testQTree()+0x16d0>
  404149:	66 89 59 02          	mov    WORD PTR [rcx+0x2],bx
  40414d:	83 c3 01             	add    ebx,0x1
  404150:	66 44 89 29          	mov    WORD PTR [rcx],r13w
  404154:	48 83 c1 04          	add    rcx,0x4
  404158:	66 39 da             	cmp    dx,bx
  40415b:	48 89 8c 24 38 01 00 	mov    QWORD PTR [rsp+0x138],rcx
  404162:	00 
  404163:	77 93                	ja     4040f8 <testQTree()+0x1558>
  404165:	48 29 c1             	sub    rcx,rax
  404168:	48 c1 f9 02          	sar    rcx,0x2
  40416c:	49 01 ce             	add    r14,rcx
  40416f:	48 85 ed             	test   rbp,rbp
  404172:	74 08                	je     40417c <testQTree()+0x15dc>
  404174:	48 89 ef             	mov    rdi,rbp
  404177:	e8 54 cd ff ff       	call   400ed0 <operator delete(void*)@plt>
  40417c:	49 83 ef 01          	sub    r15,0x1
  404180:	0f 85 6a fd ff ff    	jne    403ef0 <testQTree()+0x1350>
  404186:	e8 95 cc ff ff       	call   400e20 <std::chrono::_V2::system_clock::now()@plt>
  40418b:	48 ba db 34 b6 d7 82 	movabs rdx,0x431bde82d7b634db
  404192:	de 1b 43 
  404195:	48 89 c1             	mov    rcx,rax
  404198:	48 8b 3d 81 4f 20 00 	mov    rdi,QWORD PTR [rip+0x204f81]        # 609120 <stderr@@GLIBC_2.2.5>
  40419f:	48 f7 ea             	imul   rdx
  4041a2:	48 c1 f9 3f          	sar    rcx,0x3f
  4041a6:	be 98 77 40 00       	mov    esi,0x407798
  4041ab:	31 c0                	xor    eax,eax
  4041ad:	48 c1 fa 12          	sar    rdx,0x12
  4041b1:	48 29 ca             	sub    rdx,rcx
  4041b4:	b9 a0 86 01 00       	mov    ecx,0x186a0
  4041b9:	49 89 d0             	mov    r8,rdx
  4041bc:	4c 2b 44 24 50       	sub    r8,QWORD PTR [rsp+0x50]
  4041c1:	4c 89 f2             	mov    rdx,r14
  4041c4:	e8 87 cd ff ff       	call   400f50 <fprintf@plt>
  4041c9:	48 8b 9c 24 e0 00 00 	mov    rbx,QWORD PTR [rsp+0xe0]
  4041d0:	00 
  4041d1:	48 85 db             	test   rbx,rbx
  4041d4:	74 22                	je     4041f8 <testQTree()+0x1658>
  4041d6:	48 8b 73 18          	mov    rsi,QWORD PTR [rbx+0x18]
  4041da:	48 8b 7c 24 48       	mov    rdi,QWORD PTR [rsp+0x48]
  4041df:	e8 ec 12 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  4041e4:	48 8b 6b 10          	mov    rbp,QWORD PTR [rbx+0x10]
  4041e8:	48 89 df             	mov    rdi,rbx
  4041eb:	e8 e0 cc ff ff       	call   400ed0 <operator delete(void*)@plt>
  4041f0:	48 85 ed             	test   rbp,rbp
  4041f3:	48 89 eb             	mov    rbx,rbp
  4041f6:	75 de                	jne    4041d6 <testQTree()+0x1636>
  4041f8:	48 8b bc 24 80 00 00 	mov    rdi,QWORD PTR [rsp+0x80]
  4041ff:	00 
  404200:	48 85 ff             	test   rdi,rdi
  404203:	74 05                	je     40420a <testQTree()+0x166a>
  404205:	e8 c6 cc ff ff       	call   400ed0 <operator delete(void*)@plt>
  40420a:	48 8b 9c 24 b0 00 00 	mov    rbx,QWORD PTR [rsp+0xb0]
  404211:	00 
  404212:	48 85 db             	test   rbx,rbx
  404215:	74 25                	je     40423c <testQTree()+0x169c>
  404217:	48 8b 73 18          	mov    rsi,QWORD PTR [rbx+0x18]
  40421b:	48 8d bc 24 a0 00 00 	lea    rdi,[rsp+0xa0]
  404222:	00 
  404223:	e8 a8 12 00 00       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  404228:	48 8b 6b 10          	mov    rbp,QWORD PTR [rbx+0x10]
  40422c:	48 89 df             	mov    rdi,rbx
  40422f:	e8 9c cc ff ff       	call   400ed0 <operator delete(void*)@plt>
  404234:	48 85 ed             	test   rbp,rbp
  404237:	48 89 eb             	mov    rbx,rbp
  40423a:	75 db                	jne    404217 <testQTree()+0x1677>
  40423c:	48 8b bc 24 70 01 00 	mov    rdi,QWORD PTR [rsp+0x170]
  404243:	00 
  404244:	e8 d7 cc ff ff       	call   400f20 <free@plt>
  404249:	48 8b bc 24 78 01 00 	mov    rdi,QWORD PTR [rsp+0x178]
  404250:	00 
  404251:	e8 ca cc ff ff       	call   400f20 <free@plt>
  404256:	48 81 c4 78 0b 00 00 	add    rsp,0xb78
  40425d:	5b                   	pop    rbx
  40425e:	5d                   	pop    rbp
  40425f:	41 5c                	pop    r12
  404261:	41 5d                	pop    r13
  404263:	41 5e                	pop    r14
  404265:	41 5f                	pop    r15
  404267:	c3                   	ret    
  404268:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40426f:	00 
  404270:	48 89 c8             	mov    rax,rcx
  404273:	48 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],rcx
  404278:	48 29 e8             	sub    rax,rbp
  40427b:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  404280:	48 c1 f8 02          	sar    rax,0x2
  404284:	48 85 c0             	test   rax,rax
  404287:	0f 84 00 02 00 00    	je     40448d <testQTree()+0x18ed>
  40428d:	48 8d 14 00          	lea    rdx,[rax+rax*1]
  404291:	48 39 c2             	cmp    rdx,rax
  404294:	0f 82 12 04 00 00    	jb     4046ac <testQTree()+0x1b0c>
  40429a:	48 bf ff ff ff ff ff 	movabs rdi,0x3fffffffffffffff
  4042a1:	ff ff 3f 
  4042a4:	48 c7 04 24 fc ff ff 	mov    QWORD PTR [rsp],0xfffffffffffffffc
  4042ab:	ff 
  4042ac:	48 39 fa             	cmp    rdx,rdi
  4042af:	0f 86 fa 04 00 00    	jbe    4047af <testQTree()+0x1c0f>
  4042b5:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
  4042b9:	e8 22 cc ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  4042be:	49 89 c0             	mov    r8,rax
  4042c1:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4042c5:	4c 89 44 24 18       	mov    QWORD PTR [rsp+0x18],r8
  4042ca:	4c 01 c0             	add    rax,r8
  4042cd:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  4042d1:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  4042d6:	48 39 6c 24 20       	cmp    QWORD PTR [rsp+0x20],rbp
  4042db:	49 8d 04 10          	lea    rax,[r8+rdx*1]
  4042df:	49 8d 4c 10 04       	lea    rcx,[r8+rdx*1+0x4]
  4042e4:	66 44 89 28          	mov    WORD PTR [rax],r13w
  4042e8:	66 89 58 02          	mov    WORD PTR [rax+0x2],bx
  4042ec:	0f 84 8d 01 00 00    	je     40447f <testQTree()+0x18df>
  4042f2:	4c 89 c7             	mov    rdi,r8
  4042f5:	48 89 ee             	mov    rsi,rbp
  4042f8:	48 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],rcx
  4042fd:	e8 8e cc ff ff       	call   400f90 <memmove@plt>
  404302:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
  404307:	49 89 c0             	mov    r8,rax
  40430a:	48 89 ef             	mov    rdi,rbp
  40430d:	4c 89 44 24 28       	mov    QWORD PTR [rsp+0x28],r8
  404312:	48 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],rcx
  404317:	e8 b4 cb ff ff       	call   400ed0 <operator delete(void*)@plt>
  40431c:	4c 8b 44 24 28       	mov    r8,QWORD PTR [rsp+0x28]
  404321:	48 8b 4c 24 20       	mov    rcx,QWORD PTR [rsp+0x20]
  404326:	4c 89 44 24 20       	mov    QWORD PTR [rsp+0x20],r8
  40432b:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  40432f:	4c 89 c5             	mov    rbp,r8
  404332:	f3 0f 7e 44 24 20    	movq   xmm0,QWORD PTR [rsp+0x20]
  404338:	48 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],rcx
  40433d:	0f 16 44 24 20       	movhps xmm0,QWORD PTR [rsp+0x20]
  404342:	41 0f b7 54 24 28    	movzx  edx,WORD PTR [r12+0x28]
  404348:	48 89 84 24 40 01 00 	mov    QWORD PTR [rsp+0x140],rax
  40434f:	00 
  404350:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
  404355:	0f 29 84 24 30 01 00 	movaps XMMWORD PTR [rsp+0x130],xmm0
  40435c:	00 
  40435d:	e9 8e fd ff ff       	jmp    4040f0 <testQTree()+0x1550>
  404362:	0f 28 c8             	movaps xmm1,xmm0
  404365:	0f 28 da             	movaps xmm3,xmm2
  404368:	f3 0f 10 3d a0 36 00 	movss  xmm7,DWORD PTR [rip+0x36a0]        # 407a10 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd0>
  40436f:	00 
  404370:	f3 41 0f 5c 4c 24 04 	subss  xmm1,DWORD PTR [r12+0x4]
  404377:	f3 41 0f 5c 1c 24    	subss  xmm3,DWORD PTR [r12]
  40437d:	f3 0f 59 c9          	mulss  xmm1,xmm1
  404381:	f3 0f 59 db          	mulss  xmm3,xmm3
  404385:	f3 0f 58 cb          	addss  xmm1,xmm3
  404389:	0f 2f f9             	comiss xmm7,xmm1
  40438c:	0f 83 da 03 00 00    	jae    40476c <testQTree()+0x1bcc>
  404392:	0f 28 cf             	movaps xmm1,xmm7
  404395:	0f 28 d8             	movaps xmm3,xmm0
  404398:	0f 28 e2             	movaps xmm4,xmm2
  40439b:	f3 41 0f 5c 5c 24 0c 	subss  xmm3,DWORD PTR [r12+0xc]
  4043a2:	f3 41 0f 5c 64 24 08 	subss  xmm4,DWORD PTR [r12+0x8]
  4043a9:	f3 0f 59 db          	mulss  xmm3,xmm3
  4043ad:	f3 0f 59 e4          	mulss  xmm4,xmm4
  4043b1:	f3 0f 58 dc          	addss  xmm3,xmm4
  4043b5:	0f 2f cb             	comiss xmm1,xmm3
  4043b8:	0f 83 68 03 00 00    	jae    404726 <testQTree()+0x1b86>
  4043be:	0f 28 e0             	movaps xmm4,xmm0
  4043c1:	0f 28 da             	movaps xmm3,xmm2
  4043c4:	f3 41 0f 5c 64 24 14 	subss  xmm4,DWORD PTR [r12+0x14]
  4043cb:	f3 41 0f 5c 5c 24 10 	subss  xmm3,DWORD PTR [r12+0x10]
  4043d2:	f3 0f 59 e4          	mulss  xmm4,xmm4
  4043d6:	f3 0f 59 db          	mulss  xmm3,xmm3
  4043da:	f3 0f 58 dc          	addss  xmm3,xmm4
  4043de:	0f 2f cb             	comiss xmm1,xmm3
  4043e1:	0f 83 f9 02 00 00    	jae    4046e0 <testQTree()+0x1b40>
  4043e7:	f3 41 0f 5c 44 24 1c 	subss  xmm0,DWORD PTR [r12+0x1c]
  4043ee:	f3 41 0f 5c 54 24 18 	subss  xmm2,DWORD PTR [r12+0x18]
  4043f5:	f3 0f 59 c0          	mulss  xmm0,xmm0
  4043f9:	f3 0f 59 d2          	mulss  xmm2,xmm2
  4043fd:	f3 0f 58 c2          	addss  xmm0,xmm2
  404401:	0f 2f c8             	comiss xmm1,xmm0
  404404:	0f 83 af 02 00 00    	jae    4046b9 <testQTree()+0x1b19>
  40440a:	f3 0f 10 34 24       	movss  xmm6,DWORD PTR [rsp]
  40440f:	41 0f b7 4c 24 20    	movzx  ecx,WORD PTR [r12+0x20]
  404415:	48 8d 94 24 30 01 00 	lea    rdx,[rsp+0x130]
  40441c:	00 
  40441d:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  404423:	48 8d b4 24 00 01 00 	lea    rsi,[rsp+0x100]
  40442a:	00 
  40442b:	0f 14 c6             	unpcklps xmm0,xmm6
  40442e:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  404435:	00 
  404436:	f3 0f 10 4c 24 28    	movss  xmm1,DWORD PTR [rsp+0x28]
  40443c:	f3 0f 10 64 24 20    	movss  xmm4,DWORD PTR [rsp+0x20]
  404442:	0f 14 cc             	unpcklps xmm1,xmm4
  404445:	0f 28 d8             	movaps xmm3,xmm0
  404448:	0f 16 d9             	movlhps xmm3,xmm1
  40444b:	0f 29 1c 24          	movaps XMMWORD PTR [rsp],xmm3
  40444f:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  404454:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  404459:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  40445d:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  404462:	e8 09 27 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  404467:	48 8b ac 24 30 01 00 	mov    rbp,QWORD PTR [rsp+0x130]
  40446e:	00 
  40446f:	48 8b 8c 24 38 01 00 	mov    rcx,QWORD PTR [rsp+0x138]
  404476:	00 
  404477:	48 89 e8             	mov    rax,rbp
  40447a:	e9 e6 fc ff ff       	jmp    404165 <testQTree()+0x15c5>
  40447f:	48 85 ed             	test   rbp,rbp
  404482:	0f 84 9e fe ff ff    	je     404326 <testQTree()+0x1786>
  404488:	e9 7d fe ff ff       	jmp    40430a <testQTree()+0x176a>
  40448d:	48 c7 04 24 04 00 00 	mov    QWORD PTR [rsp],0x4
  404494:	00 
  404495:	e9 1b fe ff ff       	jmp    4042b5 <testQTree()+0x1715>
  40449a:	f3 0f 10 05 62 35 00 	movss  xmm0,DWORD PTR [rip+0x3562]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  4044a1:	00 
  4044a2:	41 0f b7 4c 24 20    	movzx  ecx,WORD PTR [r12+0x20]
  4044a8:	f3 0f 10 5c 24 28    	movss  xmm3,DWORD PTR [rsp+0x28]
  4044ae:	48 8d 9c 24 00 01 00 	lea    rbx,[rsp+0x100]
  4044b5:	00 
  4044b6:	f3 0f 59 d8          	mulss  xmm3,xmm0
  4044ba:	f3 0f 10 74 24 18    	movss  xmm6,DWORD PTR [rsp+0x18]
  4044c0:	f3 0f 10 6c 24 20    	movss  xmm5,DWORD PTR [rsp+0x20]
  4044c6:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  4044cd:	00 
  4044ce:	f3 0f 59 e8          	mulss  xmm5,xmm0
  4044d2:	48 89 de             	mov    rsi,rbx
  4044d5:	f3 0f 5c f3          	subss  xmm6,xmm3
  4044d9:	0f 28 e3             	movaps xmm4,xmm3
  4044dc:	f3 0f 11 6c 24 38    	movss  DWORD PTR [rsp+0x38],xmm5
  4044e2:	f3 0f 11 64 24 40    	movss  DWORD PTR [rsp+0x40],xmm4
  4044e8:	0f 28 c6             	movaps xmm0,xmm6
  4044eb:	f3 0f 10 34 24       	movss  xmm6,DWORD PTR [rsp]
  4044f0:	f3 0f 5c f5          	subss  xmm6,xmm5
  4044f4:	66 0f 7e c0          	movd   eax,xmm0
  4044f8:	f3 0f 11 74 24 30    	movss  DWORD PTR [rsp+0x30],xmm6
  4044fe:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
  404503:	48 c1 e2 20          	shl    rdx,0x20
  404507:	48 09 d0             	or     rax,rdx
  40450a:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  40450f:	66 0f 7e e8          	movd   eax,xmm5
  404513:	f3 0f 7e 44 24 30    	movq   xmm0,QWORD PTR [rsp+0x30]
  404519:	48 89 c2             	mov    rdx,rax
  40451c:	66 0f 7e e0          	movd   eax,xmm4
  404520:	48 c1 e2 20          	shl    rdx,0x20
  404524:	48 09 d0             	or     rax,rdx
  404527:	48 8d 94 24 30 01 00 	lea    rdx,[rsp+0x130]
  40452e:	00 
  40452f:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  404534:	f3 0f 7e 4c 24 30    	movq   xmm1,QWORD PTR [rsp+0x30]
  40453a:	e8 31 26 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  40453f:	f3 0f 10 4c 24 20    	movss  xmm1,DWORD PTR [rsp+0x20]
  404545:	41 0f b7 4c 24 22    	movzx  ecx,WORD PTR [r12+0x22]
  40454b:	f3 0f 10 15 b5 34 00 	movss  xmm2,DWORD PTR [rip+0x34b5]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  404552:	00 
  404553:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  40455a:	00 
  40455b:	f3 0f 59 ca          	mulss  xmm1,xmm2
  40455f:	f3 0f 10 5c 24 40    	movss  xmm3,DWORD PTR [rsp+0x40]
  404565:	f3 0f 10 64 24 18    	movss  xmm4,DWORD PTR [rsp+0x18]
  40456b:	48 89 de             	mov    rsi,rbx
  40456e:	f3 0f 58 e3          	addss  xmm4,xmm3
  404572:	f3 0f 11 54 24 30    	movss  DWORD PTR [rsp+0x30],xmm2
  404578:	f3 0f 58 0c 24       	addss  xmm1,DWORD PTR [rsp]
  40457d:	66 0f 7e e0          	movd   eax,xmm4
  404581:	f3 0f 11 64 24 58    	movss  DWORD PTR [rsp+0x58],xmm4
  404587:	f3 0f 11 4c 24 20    	movss  DWORD PTR [rsp+0x20],xmm1
  40458d:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
  404592:	48 c1 e2 20          	shl    rdx,0x20
  404596:	48 09 d0             	or     rax,rdx
  404599:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
  40459e:	8b 44 24 38          	mov    eax,DWORD PTR [rsp+0x38]
  4045a2:	f3 0f 7e 44 24 20    	movq   xmm0,QWORD PTR [rsp+0x20]
  4045a8:	48 89 c2             	mov    rdx,rax
  4045ab:	66 0f 7e d8          	movd   eax,xmm3
  4045af:	48 c1 e2 20          	shl    rdx,0x20
  4045b3:	48 09 d0             	or     rax,rdx
  4045b6:	48 8d 94 24 30 01 00 	lea    rdx,[rsp+0x130]
  4045bd:	00 
  4045be:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
  4045c3:	f3 0f 7e 4c 24 20    	movq   xmm1,QWORD PTR [rsp+0x20]
  4045c9:	e8 a2 25 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  4045ce:	f3 0f 10 44 24 28    	movss  xmm0,DWORD PTR [rsp+0x28]
  4045d4:	41 0f b7 4c 24 24    	movzx  ecx,WORD PTR [r12+0x24]
  4045da:	f3 0f 59 44 24 30    	mulss  xmm0,DWORD PTR [rsp+0x30]
  4045e0:	f3 0f 10 34 24       	movss  xmm6,DWORD PTR [rsp]
  4045e5:	f3 0f 10 6c 24 38    	movss  xmm5,DWORD PTR [rsp+0x38]
  4045eb:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  4045f2:	00 
  4045f3:	f3 0f 58 f5          	addss  xmm6,xmm5
  4045f7:	f3 0f 10 4c 24 40    	movss  xmm1,DWORD PTR [rsp+0x40]
  4045fd:	48 89 de             	mov    rsi,rbx
  404600:	f3 0f 58 44 24 18    	addss  xmm0,DWORD PTR [rsp+0x18]
  404606:	66 0f 7e f2          	movd   edx,xmm6
  40460a:	f3 0f 11 34 24       	movss  DWORD PTR [rsp],xmm6
  40460f:	48 c1 e2 20          	shl    rdx,0x20
  404613:	66 0f 7e c0          	movd   eax,xmm0
  404617:	48 09 d0             	or     rax,rdx
  40461a:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  40461f:	66 0f 7e e8          	movd   eax,xmm5
  404623:	f3 0f 7e 44 24 18    	movq   xmm0,QWORD PTR [rsp+0x18]
  404629:	48 89 c2             	mov    rdx,rax
  40462c:	66 0f 7e c8          	movd   eax,xmm1
  404630:	48 c1 e2 20          	shl    rdx,0x20
  404634:	48 09 d0             	or     rax,rdx
  404637:	48 8d 94 24 30 01 00 	lea    rdx,[rsp+0x130]
  40463e:	00 
  40463f:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  404644:	f3 0f 7e 4c 24 18    	movq   xmm1,QWORD PTR [rsp+0x18]
  40464a:	e8 21 25 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  40464f:	f3 0f 10 34 24       	movss  xmm6,DWORD PTR [rsp]
  404654:	41 0f b7 4c 24 26    	movzx  ecx,WORD PTR [r12+0x26]
  40465a:	f3 0f 10 4c 24 58    	movss  xmm1,DWORD PTR [rsp+0x58]
  404660:	48 8d 94 24 30 01 00 	lea    rdx,[rsp+0x130]
  404667:	00 
  404668:	0f 14 ce             	unpcklps xmm1,xmm6
  40466b:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  404672:	00 
  404673:	f3 0f 10 6c 24 38    	movss  xmm5,DWORD PTR [rsp+0x38]
  404679:	48 89 de             	mov    rsi,rbx
  40467c:	f3 0f 10 44 24 40    	movss  xmm0,DWORD PTR [rsp+0x40]
  404682:	0f 14 c5             	unpcklps xmm0,xmm5
  404685:	0f 28 e9             	movaps xmm5,xmm1
  404688:	0f 16 e8             	movlhps xmm5,xmm0
  40468b:	0f 29 2c 24          	movaps XMMWORD PTR [rsp],xmm5
  40468f:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  404694:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  404699:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  40469d:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  4046a2:	e8 c9 24 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  4046a7:	e9 bb fd ff ff       	jmp    404467 <testQTree()+0x18c7>
  4046ac:	48 c7 04 24 fc ff ff 	mov    QWORD PTR [rsp],0xfffffffffffffffc
  4046b3:	ff 
  4046b4:	e9 fc fb ff ff       	jmp    4042b5 <testQTree()+0x1715>
  4046b9:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  4046be:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  4046c5:	00 
  4046c6:	b8 03 00 00 00       	mov    eax,0x3
  4046cb:	66 44 89 6c 24 70    	mov    WORD PTR [rsp+0x70],r13w
  4046d1:	66 89 44 24 72       	mov    WORD PTR [rsp+0x72],ax
  4046d6:	e8 75 1f 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  4046db:	e9 2a fd ff ff       	jmp    40440a <testQTree()+0x186a>
  4046e0:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  4046e5:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  4046ec:	00 
  4046ed:	ba 02 00 00 00       	mov    edx,0x2
  4046f2:	66 44 89 6c 24 70    	mov    WORD PTR [rsp+0x70],r13w
  4046f8:	66 89 54 24 72       	mov    WORD PTR [rsp+0x72],dx
  4046fd:	e8 4e 1f 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  404702:	f3 0f 10 8c 24 08 01 	movss  xmm1,DWORD PTR [rsp+0x108]
  404709:	00 00 
  40470b:	f3 0f 10 94 24 00 01 	movss  xmm2,DWORD PTR [rsp+0x100]
  404712:	00 00 
  404714:	f3 0f 59 c9          	mulss  xmm1,xmm1
  404718:	f3 0f 10 84 24 04 01 	movss  xmm0,DWORD PTR [rsp+0x104]
  40471f:	00 00 
  404721:	e9 c1 fc ff ff       	jmp    4043e7 <testQTree()+0x1847>
  404726:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  40472b:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  404732:	00 
  404733:	b9 01 00 00 00       	mov    ecx,0x1
  404738:	66 44 89 6c 24 70    	mov    WORD PTR [rsp+0x70],r13w
  40473e:	66 89 4c 24 72       	mov    WORD PTR [rsp+0x72],cx
  404743:	e8 08 1f 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  404748:	f3 0f 10 8c 24 08 01 	movss  xmm1,DWORD PTR [rsp+0x108]
  40474f:	00 00 
  404751:	f3 0f 10 84 24 04 01 	movss  xmm0,DWORD PTR [rsp+0x104]
  404758:	00 00 
  40475a:	f3 0f 59 c9          	mulss  xmm1,xmm1
  40475e:	f3 0f 10 94 24 00 01 	movss  xmm2,DWORD PTR [rsp+0x100]
  404765:	00 00 
  404767:	e9 52 fc ff ff       	jmp    4043be <testQTree()+0x181e>
  40476c:	31 f6                	xor    esi,esi
  40476e:	48 8d bc 24 30 01 00 	lea    rdi,[rsp+0x130]
  404775:	00 
  404776:	66 44 89 6c 24 70    	mov    WORD PTR [rsp+0x70],r13w
  40477c:	66 89 74 24 72       	mov    WORD PTR [rsp+0x72],si
  404781:	48 8d 74 24 70       	lea    rsi,[rsp+0x70]
  404786:	e8 c5 1e 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  40478b:	f3 0f 10 8c 24 08 01 	movss  xmm1,DWORD PTR [rsp+0x108]
  404792:	00 00 
  404794:	f3 0f 10 84 24 04 01 	movss  xmm0,DWORD PTR [rsp+0x104]
  40479b:	00 00 
  40479d:	f3 0f 59 c9          	mulss  xmm1,xmm1
  4047a1:	f3 0f 10 94 24 00 01 	movss  xmm2,DWORD PTR [rsp+0x100]
  4047a8:	00 00 
  4047aa:	e9 e6 fb ff ff       	jmp    404395 <testQTree()+0x17f5>
  4047af:	48 85 d2             	test   rdx,rdx
  4047b2:	0f 84 db 00 00 00    	je     404893 <testQTree()+0x1cf3>
  4047b8:	48 c1 e0 03          	shl    rax,0x3
  4047bc:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  4047c0:	e9 f0 fa ff ff       	jmp    4042b5 <testQTree()+0x1715>
  4047c5:	41 0f b7 d6          	movzx  edx,r14w
  4047c9:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  4047d0:	00 
  4047d1:	48 29 d0             	sub    rax,rdx
  4047d4:	48 8b 94 24 70 01 00 	mov    rdx,QWORD PTR [rsp+0x170]
  4047db:	00 
  4047dc:	48 8d 2c c2          	lea    rbp,[rdx+rax*8]
  4047e0:	0f b7 45 28          	movzx  eax,WORD PTR [rbp+0x28]
  4047e4:	66 83 f8 ff          	cmp    ax,0xffff
  4047e8:	0f 84 d4 03 00 00    	je     404bc2 <testQTree()+0x2022>
  4047ee:	66 83 f8 fe          	cmp    ax,0xfffe
  4047f2:	0f 84 b4 00 00 00    	je     4048ac <testQTree()+0x1d0c>
  4047f8:	66 85 c0             	test   ax,ax
  4047fb:	0f 84 63 eb ff ff    	je     403364 <testQTree()+0x7c4>
  404801:	f3 0f 10 4c 24 28    	movss  xmm1,DWORD PTR [rsp+0x28]
  404807:	31 db                	xor    ebx,ebx
  404809:	45 31 e4             	xor    r12d,r12d
  40480c:	f3 0f 10 44 24 20    	movss  xmm0,DWORD PTR [rsp+0x20]
  404812:	45 31 ff             	xor    r15d,r15d
  404815:	f3 0f 10 15 ef 31 00 	movss  xmm2,DWORD PTR [rip+0x31ef]        # 407a0c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xcc>
  40481c:	00 
  40481d:	eb 20                	jmp    40483f <testQTree()+0x1c9f>
  40481f:	41 83 c7 01          	add    r15d,0x1
  404823:	66 41 39 c7          	cmp    r15w,ax
  404827:	0f 83 ab 01 00 00    	jae    4049d8 <testQTree()+0x1e38>
  40482d:	f3 0f 10 44 24 78    	movss  xmm0,DWORD PTR [rsp+0x78]
  404833:	f3 0f 10 4c 24 74    	movss  xmm1,DWORD PTR [rsp+0x74]
  404839:	f3 0f 10 54 24 7c    	movss  xmm2,DWORD PTR [rsp+0x7c]
  40483f:	41 0f b7 d7          	movzx  edx,r15w
  404843:	f3 0f 59 d2          	mulss  xmm2,xmm2
  404847:	48 8d 54 d5 00       	lea    rdx,[rbp+rdx*8+0x0]
  40484c:	f3 0f 5c 42 04       	subss  xmm0,DWORD PTR [rdx+0x4]
  404851:	f3 0f 5c 0a          	subss  xmm1,DWORD PTR [rdx]
  404855:	f3 0f 59 c0          	mulss  xmm0,xmm0
  404859:	f3 0f 59 c9          	mulss  xmm1,xmm1
  40485d:	f3 0f 58 c1          	addss  xmm0,xmm1
  404861:	0f 2f d0             	comiss xmm2,xmm0
  404864:	72 b9                	jb     40481f <testQTree()+0x1c7f>
  404866:	4c 39 a4 24 90 00 00 	cmp    QWORD PTR [rsp+0x90],r12
  40486d:	00 
  40486e:	0f 84 59 0a 00 00    	je     4052cd <testQTree()+0x272d>
  404874:	66 45 89 34 24       	mov    WORD PTR [r12],r14w
  404879:	66 45 89 7c 24 02    	mov    WORD PTR [r12+0x2],r15w
  40487f:	49 83 c4 04          	add    r12,0x4
  404883:	4c 89 a4 24 88 00 00 	mov    QWORD PTR [rsp+0x88],r12
  40488a:	00 
  40488b:	48 89 d9             	mov    rcx,rbx
  40488e:	48 89 cb             	mov    rbx,rcx
  404891:	eb 8c                	jmp    40481f <testQTree()+0x1c7f>
  404893:	48 c7 44 24 18 00 00 	mov    QWORD PTR [rsp+0x18],0x0
  40489a:	00 00 
  40489c:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
  4048a3:	00 
  4048a4:	45 31 c0             	xor    r8d,r8d
  4048a7:	e9 25 fa ff ff       	jmp    4042d1 <testQTree()+0x1731>
  4048ac:	f3 0f 10 4c 24 20    	movss  xmm1,DWORD PTR [rsp+0x20]
  4048b2:	f3 0f 10 44 24 28    	movss  xmm0,DWORD PTR [rsp+0x28]
  4048b8:	f3 0f 5c 4d 04       	subss  xmm1,DWORD PTR [rbp+0x4]
  4048bd:	f3 0f 5c 45 00       	subss  xmm0,DWORD PTR [rbp+0x0]
  4048c2:	f3 0f 10 2d 46 31 00 	movss  xmm5,DWORD PTR [rip+0x3146]        # 407a10 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xd0>
  4048c9:	00 
  4048ca:	f3 0f 59 c9          	mulss  xmm1,xmm1
  4048ce:	f3 0f 59 c0          	mulss  xmm0,xmm0
  4048d2:	f3 0f 58 c1          	addss  xmm0,xmm1
  4048d6:	0f 2f e8             	comiss xmm5,xmm0
  4048d9:	0f 83 8f 0b 00 00    	jae    40546e <testQTree()+0x28ce>
  4048df:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
  4048e6:	00 
  4048e7:	f3 0f 10 44 24 78    	movss  xmm0,DWORD PTR [rsp+0x78]
  4048ed:	f3 0f 10 54 24 74    	movss  xmm2,DWORD PTR [rsp+0x74]
  4048f3:	0f 28 e0             	movaps xmm4,xmm0
  4048f6:	0f 28 da             	movaps xmm3,xmm2
  4048f9:	f3 0f 5c 65 0c       	subss  xmm4,DWORD PTR [rbp+0xc]
  4048fe:	f3 0f 10 4c 24 7c    	movss  xmm1,DWORD PTR [rsp+0x7c]
  404904:	f3 0f 5c 5d 08       	subss  xmm3,DWORD PTR [rbp+0x8]
  404909:	0f 28 e9             	movaps xmm5,xmm1
  40490c:	f3 0f 59 e9          	mulss  xmm5,xmm1
  404910:	f3 0f 59 e4          	mulss  xmm4,xmm4
  404914:	f3 0f 59 db          	mulss  xmm3,xmm3
  404918:	f3 0f 58 dc          	addss  xmm3,xmm4
  40491c:	0f 2f eb             	comiss xmm5,xmm3
  40491f:	0f 83 0f 0b 00 00    	jae    405434 <testQTree()+0x2894>
  404925:	0f 28 e0             	movaps xmm4,xmm0
  404928:	0f 28 da             	movaps xmm3,xmm2
  40492b:	f3 0f 5c 65 14       	subss  xmm4,DWORD PTR [rbp+0x14]
  404930:	f3 0f 5c 5d 10       	subss  xmm3,DWORD PTR [rbp+0x10]
  404935:	f3 0f 59 e4          	mulss  xmm4,xmm4
  404939:	f3 0f 59 db          	mulss  xmm3,xmm3
  40493d:	f3 0f 58 dc          	addss  xmm3,xmm4
  404941:	0f 28 e1             	movaps xmm4,xmm1
  404944:	f3 0f 59 e1          	mulss  xmm4,xmm1
  404948:	0f 2f e3             	comiss xmm4,xmm3
  40494b:	0f 83 a9 0a 00 00    	jae    4053fa <testQTree()+0x285a>
  404951:	f3 0f 5c 45 1c       	subss  xmm0,DWORD PTR [rbp+0x1c]
  404956:	f3 0f 59 c9          	mulss  xmm1,xmm1
  40495a:	f3 0f 5c 55 18       	subss  xmm2,DWORD PTR [rbp+0x18]
  40495f:	f3 0f 59 c0          	mulss  xmm0,xmm0
  404963:	f3 0f 59 d2          	mulss  xmm2,xmm2
  404967:	f3 0f 58 c2          	addss  xmm0,xmm2
  40496b:	0f 2f c8             	comiss xmm1,xmm0
  40496e:	0f 83 5e 0a 00 00    	jae    4053d2 <testQTree()+0x2832>
  404974:	f3 0f 10 44 24 40    	movss  xmm0,DWORD PTR [rsp+0x40]
  40497a:	0f b7 4d 20          	movzx  ecx,WORD PTR [rbp+0x20]
  40497e:	f3 0f 10 7c 24 38    	movss  xmm7,DWORD PTR [rsp+0x38]
  404984:	0f 14 c7             	unpcklps xmm0,xmm7
  404987:	f3 0f 10 6c 24 30    	movss  xmm5,DWORD PTR [rsp+0x30]
  40498d:	f3 0f 10 4c 24 48    	movss  xmm1,DWORD PTR [rsp+0x48]
  404993:	0f 14 cd             	unpcklps xmm1,xmm5
  404996:	0f 28 e8             	movaps xmm5,xmm0
  404999:	0f 16 e9             	movlhps xmm5,xmm1
  40499c:	0f 29 2c 24          	movaps XMMWORD PTR [rsp],xmm5
  4049a0:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  4049a5:	48 8d 74 24 74       	lea    rsi,[rsp+0x74]
  4049aa:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  4049b1:	00 
  4049b2:	4c 89 ea             	mov    rdx,r13
  4049b5:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  4049ba:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  4049be:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  4049c3:	e8 a8 21 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  4049c8:	4c 8b a4 24 88 00 00 	mov    r12,QWORD PTR [rsp+0x88]
  4049cf:	00 
  4049d0:	48 8b 9c 24 80 00 00 	mov    rbx,QWORD PTR [rsp+0x80]
  4049d7:	00 
  4049d8:	4c 8d ac 24 d8 00 00 	lea    r13,[rsp+0xd8]
  4049df:	00 
  4049e0:	48 8d 84 24 d0 00 00 	lea    rax,[rsp+0xd0]
  4049e7:	00 
  4049e8:	49 39 dc             	cmp    r12,rbx
  4049eb:	c7 84 24 d8 00 00 00 	mov    DWORD PTR [rsp+0xd8],0x0
  4049f2:	00 00 00 00 
  4049f6:	48 c7 84 24 e0 00 00 	mov    QWORD PTR [rsp+0xe0],0x0
  4049fd:	00 00 00 00 00 
  404a02:	48 89 44 24 48       	mov    QWORD PTR [rsp+0x48],rax
  404a07:	4c 89 ac 24 e8 00 00 	mov    QWORD PTR [rsp+0xe8],r13
  404a0e:	00 
  404a0f:	4c 89 ac 24 f0 00 00 	mov    QWORD PTR [rsp+0xf0],r13
  404a16:	00 
  404a17:	48 c7 84 24 f8 00 00 	mov    QWORD PTR [rsp+0xf8],0x0
  404a1e:	00 00 00 00 00 
  404a23:	0f 84 8f 01 00 00    	je     404bb8 <testQTree()+0x2018>
  404a29:	31 ed                	xor    ebp,ebp
  404a2b:	0f b7 13             	movzx  edx,WORD PTR [rbx]
  404a2e:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  404a35:	00 
  404a36:	48 29 d0             	sub    rax,rdx
  404a39:	48 8b 94 24 70 01 00 	mov    rdx,QWORD PTR [rsp+0x170]
  404a40:	00 
  404a41:	48 85 ed             	test   rbp,rbp
  404a44:	4c 8d 3c c2          	lea    r15,[rdx+rax*8]
  404a48:	0f b7 43 02          	movzx  eax,WORD PTR [rbx+0x2]
  404a4c:	89 c2                	mov    edx,eax
  404a4e:	89 04 24             	mov    DWORD PTR [rsp],eax
  404a51:	0f 84 12 01 00 00    	je     404b69 <testQTree()+0x1fc9>
  404a57:	0f b7 c0             	movzx  eax,ax
  404a5a:	49 8d 34 c7          	lea    rsi,[r15+rax*8]
  404a5e:	f3 0f 10 0e          	movss  xmm1,DWORD PTR [rsi]
  404a62:	eb 1e                	jmp    404a82 <testQTree()+0x1ee2>
  404a64:	0f 2f c8             	comiss xmm1,xmm0
  404a67:	77 0b                	ja     404a74 <testQTree()+0x1ed4>
  404a69:	f3 0f 10 55 24       	movss  xmm2,DWORD PTR [rbp+0x24]
  404a6e:	0f 2f 56 04          	comiss xmm2,DWORD PTR [rsi+0x4]
  404a72:	77 18                	ja     404a8c <testQTree()+0x1eec>
  404a74:	48 8b 45 18          	mov    rax,QWORD PTR [rbp+0x18]
  404a78:	31 c9                	xor    ecx,ecx
  404a7a:	48 85 c0             	test   rax,rax
  404a7d:	74 18                	je     404a97 <testQTree()+0x1ef7>
  404a7f:	48 89 c5             	mov    rbp,rax
  404a82:	f3 0f 10 45 20       	movss  xmm0,DWORD PTR [rbp+0x20]
  404a87:	0f 2f c1             	comiss xmm0,xmm1
  404a8a:	76 d8                	jbe    404a64 <testQTree()+0x1ec4>
  404a8c:	48 8b 45 10          	mov    rax,QWORD PTR [rbp+0x10]
  404a90:	b9 01 00 00 00       	mov    ecx,0x1
  404a95:	eb e3                	jmp    404a7a <testQTree()+0x1eda>
  404a97:	84 c9                	test   cl,cl
  404a99:	75 7c                	jne    404b17 <testQTree()+0x1f77>
  404a9b:	0f 2f c8             	comiss xmm1,xmm0
  404a9e:	48 89 e9             	mov    rcx,rbp
  404aa1:	77 1e                	ja     404ac1 <testQTree()+0x1f21>
  404aa3:	0f 2f c1             	comiss xmm0,xmm1
  404aa6:	77 59                	ja     404b01 <testQTree()+0x1f61>
  404aa8:	48 63 04 24          	movsxd rax,DWORD PTR [rsp]
  404aac:	f3 41 0f 10 44 c7 04 	movss  xmm0,DWORD PTR [r15+rax*8+0x4]
  404ab3:	0f 2f 45 24          	comiss xmm0,DWORD PTR [rbp+0x24]
  404ab7:	76 48                	jbe    404b01 <testQTree()+0x1f61>
  404ab9:	48 89 cd             	mov    rbp,rcx
  404abc:	48 85 ed             	test   rbp,rbp
  404abf:	74 40                	je     404b01 <testQTree()+0x1f61>
  404ac1:	4c 39 ed             	cmp    rbp,r13
  404ac4:	41 be 01 00 00 00    	mov    r14d,0x1
  404aca:	0f 85 b1 00 00 00    	jne    404b81 <testQTree()+0x1fe1>
  404ad0:	bf 28 00 00 00       	mov    edi,0x28
  404ad5:	e8 06 c4 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  404ada:	48 63 14 24          	movsxd rdx,DWORD PTR [rsp]
  404ade:	41 0f b6 fe          	movzx  edi,r14b
  404ae2:	4c 89 e9             	mov    rcx,r13
  404ae5:	48 89 c6             	mov    rsi,rax
  404ae8:	49 8b 14 d7          	mov    rdx,QWORD PTR [r15+rdx*8]
  404aec:	48 89 50 20          	mov    QWORD PTR [rax+0x20],rdx
  404af0:	48 89 ea             	mov    rdx,rbp
  404af3:	e8 38 c3 ff ff       	call   400e30 <std::_Rb_tree_insert_and_rebalance(bool, std::_Rb_tree_node_base*, std::_Rb_tree_node_base*, std::_Rb_tree_node_base&)@plt>
  404af8:	48 83 84 24 f8 00 00 	add    QWORD PTR [rsp+0xf8],0x1
  404aff:	00 01 
  404b01:	48 83 c3 04          	add    rbx,0x4
  404b05:	49 39 dc             	cmp    r12,rbx
  404b08:	74 4a                	je     404b54 <testQTree()+0x1fb4>
  404b0a:	48 8b ac 24 e0 00 00 	mov    rbp,QWORD PTR [rsp+0xe0]
  404b11:	00 
  404b12:	e9 14 ff ff ff       	jmp    404a2b <testQTree()+0x1e8b>
  404b17:	48 3b ac 24 e8 00 00 	cmp    rbp,QWORD PTR [rsp+0xe8]
  404b1e:	00 
  404b1f:	74 a0                	je     404ac1 <testQTree()+0x1f21>
  404b21:	48 89 ef             	mov    rdi,rbp
  404b24:	89 54 24 18          	mov    DWORD PTR [rsp+0x18],edx
  404b28:	e8 c3 c3 ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  404b2d:	48 63 0c 24          	movsxd rcx,DWORD PTR [rsp]
  404b31:	f3 0f 10 40 20       	movss  xmm0,DWORD PTR [rax+0x20]
  404b36:	8b 54 24 18          	mov    edx,DWORD PTR [rsp+0x18]
  404b3a:	f3 41 0f 10 0c cf    	movss  xmm1,DWORD PTR [r15+rcx*8]
  404b40:	0f 2f c8             	comiss xmm1,xmm0
  404b43:	0f 87 73 ff ff ff    	ja     404abc <testQTree()+0x1f1c>
  404b49:	48 89 e9             	mov    rcx,rbp
  404b4c:	48 89 c5             	mov    rbp,rax
  404b4f:	e9 4f ff ff ff       	jmp    404aa3 <testQTree()+0x1f03>
  404b54:	48 8b 84 24 f8 00 00 	mov    rax,QWORD PTR [rsp+0xf8]
  404b5b:	00 
  404b5c:	48 8b ac 24 e8 00 00 	mov    rbp,QWORD PTR [rsp+0xe8]
  404b63:	00 
  404b64:	e9 45 e8 ff ff       	jmp    4033ae <testQTree()+0x80e>
  404b69:	4c 39 ac 24 e8 00 00 	cmp    QWORD PTR [rsp+0xe8],r13
  404b70:	00 
  404b71:	4c 89 ed             	mov    rbp,r13
  404b74:	75 ab                	jne    404b21 <testQTree()+0x1f81>
  404b76:	41 be 01 00 00 00    	mov    r14d,0x1
  404b7c:	e9 4f ff ff ff       	jmp    404ad0 <testQTree()+0x1f30>
  404b81:	0f b7 d2             	movzx  edx,dx
  404b84:	f3 0f 10 45 20       	movss  xmm0,DWORD PTR [rbp+0x20]
  404b89:	49 8d 04 d7          	lea    rax,[r15+rdx*8]
  404b8d:	f3 0f 10 08          	movss  xmm1,DWORD PTR [rax]
  404b91:	0f 2f c1             	comiss xmm0,xmm1
  404b94:	0f 87 36 ff ff ff    	ja     404ad0 <testQTree()+0x1f30>
  404b9a:	45 31 f6             	xor    r14d,r14d
  404b9d:	0f 2f c8             	comiss xmm1,xmm0
  404ba0:	0f 87 2a ff ff ff    	ja     404ad0 <testQTree()+0x1f30>
  404ba6:	f3 0f 10 45 24       	movss  xmm0,DWORD PTR [rbp+0x24]
  404bab:	0f 2f 40 04          	comiss xmm0,DWORD PTR [rax+0x4]
  404baf:	41 0f 97 c6          	seta   r14b
  404bb3:	e9 18 ff ff ff       	jmp    404ad0 <testQTree()+0x1f30>
  404bb8:	4c 89 ed             	mov    rbp,r13
  404bbb:	31 c0                	xor    eax,eax
  404bbd:	e9 ec e7 ff ff       	jmp    4033ae <testQTree()+0x80e>
  404bc2:	f3 0f 10 05 3a 2e 00 	movss  xmm0,DWORD PTR [rip+0x2e3a]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  404bc9:	00 
  404bca:	0f b7 4d 20          	movzx  ecx,WORD PTR [rbp+0x20]
  404bce:	f3 0f 10 5c 24 48    	movss  xmm3,DWORD PTR [rsp+0x48]
  404bd4:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
  404bdb:	00 
  404bdc:	f3 0f 59 d8          	mulss  xmm3,xmm0
  404be0:	f3 0f 10 74 24 40    	movss  xmm6,DWORD PTR [rsp+0x40]
  404be6:	f3 0f 10 6c 24 30    	movss  xmm5,DWORD PTR [rsp+0x30]
  404bec:	48 8d 74 24 74       	lea    rsi,[rsp+0x74]
  404bf1:	f3 0f 59 e8          	mulss  xmm5,xmm0
  404bf5:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  404bfc:	00 
  404bfd:	f3 0f 5c f3          	subss  xmm6,xmm3
  404c01:	0f 28 e3             	movaps xmm4,xmm3
  404c04:	f3 0f 11 64 24 18    	movss  DWORD PTR [rsp+0x18],xmm4
  404c0a:	0f 28 c6             	movaps xmm0,xmm6
  404c0d:	f3 0f 10 74 24 38    	movss  xmm6,DWORD PTR [rsp+0x38]
  404c13:	f3 0f 5c f5          	subss  xmm6,xmm5
  404c17:	66 0f 7e c0          	movd   eax,xmm0
  404c1b:	f3 0f 11 34 24       	movss  DWORD PTR [rsp],xmm6
  404c20:	48 8b 14 24          	mov    rdx,QWORD PTR [rsp]
  404c24:	48 c1 e2 20          	shl    rdx,0x20
  404c28:	48 09 d0             	or     rax,rdx
  404c2b:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  404c2f:	66 0f 7e e8          	movd   eax,xmm5
  404c33:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  404c38:	48 89 c2             	mov    rdx,rax
  404c3b:	66 0f 7e e0          	movd   eax,xmm4
  404c3f:	48 c1 e2 20          	shl    rdx,0x20
  404c43:	f3 0f 11 2c 24       	movss  DWORD PTR [rsp],xmm5
  404c48:	48 09 d0             	or     rax,rdx
  404c4b:	4c 89 ea             	mov    rdx,r13
  404c4e:	48 89 44 24 50       	mov    QWORD PTR [rsp+0x50],rax
  404c53:	f3 0f 7e 4c 24 50    	movq   xmm1,QWORD PTR [rsp+0x50]
  404c59:	e8 12 1f 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  404c5e:	f3 0f 10 15 a2 2d 00 	movss  xmm2,DWORD PTR [rip+0x2da2]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  404c65:	00 
  404c66:	0f b7 4d 22          	movzx  ecx,WORD PTR [rbp+0x22]
  404c6a:	f3 0f 10 4c 24 30    	movss  xmm1,DWORD PTR [rsp+0x30]
  404c70:	48 8d 74 24 74       	lea    rsi,[rsp+0x74]
  404c75:	f3 0f 59 ca          	mulss  xmm1,xmm2
  404c79:	f3 0f 10 5c 24 18    	movss  xmm3,DWORD PTR [rsp+0x18]
  404c7f:	f3 0f 10 64 24 40    	movss  xmm4,DWORD PTR [rsp+0x40]
  404c85:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  404c8c:	00 
  404c8d:	f3 0f 58 e3          	addss  xmm4,xmm3
  404c91:	f3 0f 11 54 24 30    	movss  DWORD PTR [rsp+0x30],xmm2
  404c97:	f3 0f 58 4c 24 38    	addss  xmm1,DWORD PTR [rsp+0x38]
  404c9d:	66 0f 7e e0          	movd   eax,xmm4
  404ca1:	f3 0f 11 64 24 50    	movss  DWORD PTR [rsp+0x50],xmm4
  404ca7:	f3 0f 11 4c 24 18    	movss  DWORD PTR [rsp+0x18],xmm1
  404cad:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
  404cb2:	48 c1 e2 20          	shl    rdx,0x20
  404cb6:	48 09 d0             	or     rax,rdx
  404cb9:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  404cbe:	8b 04 24             	mov    eax,DWORD PTR [rsp]
  404cc1:	f3 0f 7e 44 24 18    	movq   xmm0,QWORD PTR [rsp+0x18]
  404cc7:	f3 0f 11 5c 24 18    	movss  DWORD PTR [rsp+0x18],xmm3
  404ccd:	48 89 c2             	mov    rdx,rax
  404cd0:	66 0f 7e d8          	movd   eax,xmm3
  404cd4:	48 c1 e2 20          	shl    rdx,0x20
  404cd8:	48 09 d0             	or     rax,rdx
  404cdb:	4c 89 ea             	mov    rdx,r13
  404cde:	48 89 44 24 58       	mov    QWORD PTR [rsp+0x58],rax
  404ce3:	f3 0f 7e 4c 24 58    	movq   xmm1,QWORD PTR [rsp+0x58]
  404ce9:	e8 82 1e 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  404cee:	f3 0f 10 44 24 48    	movss  xmm0,DWORD PTR [rsp+0x48]
  404cf4:	0f b7 4d 24          	movzx  ecx,WORD PTR [rbp+0x24]
  404cf8:	f3 0f 59 44 24 30    	mulss  xmm0,DWORD PTR [rsp+0x30]
  404cfe:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  404d03:	f3 0f 10 74 24 38    	movss  xmm6,DWORD PTR [rsp+0x38]
  404d09:	48 8d 74 24 74       	lea    rsi,[rsp+0x74]
  404d0e:	f3 0f 58 f5          	addss  xmm6,xmm5
  404d12:	f3 0f 10 4c 24 18    	movss  xmm1,DWORD PTR [rsp+0x18]
  404d18:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  404d1f:	00 
  404d20:	f3 0f 58 44 24 40    	addss  xmm0,DWORD PTR [rsp+0x40]
  404d26:	66 0f 7e f2          	movd   edx,xmm6
  404d2a:	f3 0f 11 74 24 30    	movss  DWORD PTR [rsp+0x30],xmm6
  404d30:	48 c1 e2 20          	shl    rdx,0x20
  404d34:	66 0f 7e c0          	movd   eax,xmm0
  404d38:	48 09 d0             	or     rax,rdx
  404d3b:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  404d3f:	66 0f 7e e8          	movd   eax,xmm5
  404d43:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  404d48:	48 89 c2             	mov    rdx,rax
  404d4b:	66 0f 7e c8          	movd   eax,xmm1
  404d4f:	48 c1 e2 20          	shl    rdx,0x20
  404d53:	f3 0f 11 2c 24       	movss  DWORD PTR [rsp],xmm5
  404d58:	48 09 d0             	or     rax,rdx
  404d5b:	4c 89 ea             	mov    rdx,r13
  404d5e:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
  404d63:	f3 0f 7e 4c 24 38    	movq   xmm1,QWORD PTR [rsp+0x38]
  404d69:	e8 02 1e 00 00       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  404d6e:	f3 0f 10 4c 24 50    	movss  xmm1,DWORD PTR [rsp+0x50]
  404d74:	0f b7 4d 26          	movzx  ecx,WORD PTR [rbp+0x26]
  404d78:	f3 0f 10 74 24 30    	movss  xmm6,DWORD PTR [rsp+0x30]
  404d7e:	0f 14 ce             	unpcklps xmm1,xmm6
  404d81:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  404d86:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  404d8c:	0f 14 c5             	unpcklps xmm0,xmm5
  404d8f:	0f 28 d9             	movaps xmm3,xmm1
  404d92:	0f 16 d8             	movlhps xmm3,xmm0
  404d95:	0f 29 1c 24          	movaps XMMWORD PTR [rsp],xmm3
  404d99:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  404d9e:	e9 02 fc ff ff       	jmp    4049a5 <testQTree()+0x1e05>
  404da3:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
  404daa:	00 
  404dab:	31 ed                	xor    ebp,ebp
  404dad:	48 8d 74 24 6c       	lea    rsi,[rsp+0x6c]
  404db2:	4c 89 ef             	mov    rdi,r13
  404db5:	66 44 89 7c 24 6c    	mov    WORD PTR [rsp+0x6c],r15w
  404dbb:	66 89 6c 24 6e       	mov    WORD PTR [rsp+0x6e],bp
  404dc0:	e8 8b 18 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  404dc5:	83 c5 01             	add    ebp,0x1
  404dc8:	66 83 fd 04          	cmp    bp,0x4
  404dcc:	75 df                	jne    404dad <testQTree()+0x220d>
  404dce:	f3 0f 10 44 24 20    	movss  xmm0,DWORD PTR [rsp+0x20]
  404dd4:	41 0f b7 4c 24 20    	movzx  ecx,WORD PTR [r12+0x20]
  404dda:	f3 0f 10 6c 24 28    	movss  xmm5,DWORD PTR [rsp+0x28]
  404de0:	0f 14 c5             	unpcklps xmm0,xmm5
  404de3:	f3 0f 10 4c 24 38    	movss  xmm1,DWORD PTR [rsp+0x38]
  404de9:	f3 0f 10 74 24 30    	movss  xmm6,DWORD PTR [rsp+0x30]
  404def:	0f 14 ce             	unpcklps xmm1,xmm6
  404df2:	0f 28 d8             	movaps xmm3,xmm0
  404df5:	0f 16 d9             	movlhps xmm3,xmm1
  404df8:	0f 29 1c 24          	movaps XMMWORD PTR [rsp],xmm3
  404dfc:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  404e01:	e9 e0 ef ff ff       	jmp    403de6 <testQTree()+0x1246>
  404e06:	48 85 ed             	test   rbp,rbp
  404e09:	74 1b                	je     404e26 <testQTree()+0x2286>
  404e0b:	48 8d 2c c5 00 00 00 	lea    rbp,[rax*8+0x0]
  404e12:	00 
  404e13:	e9 70 ed ff ff       	jmp    403b88 <testQTree()+0xfe8>
  404e18:	4d 85 f6             	test   r14,r14
  404e1b:	0f 84 be ed ff ff    	je     403bdf <testQTree()+0x103f>
  404e21:	e9 a7 ed ff ff       	jmp    403bcd <testQTree()+0x102d>
  404e26:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
  404e2d:	00 
  404e2e:	48 8b 3c 24          	mov    rdi,QWORD PTR [rsp]
  404e32:	e9 60 ed ff ff       	jmp    403b97 <testQTree()+0xff7>
  404e37:	ba 1b 00 00 00       	mov    edx,0x1b
  404e3c:	be e9 77 40 00       	mov    esi,0x4077e9
  404e41:	bf 40 91 60 00       	mov    edi,0x609140
  404e46:	e8 b5 c0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404e4b:	ba 01 00 00 00       	mov    edx,0x1
  404e50:	be de 77 40 00       	mov    esi,0x4077de
  404e55:	bf 40 91 60 00       	mov    edi,0x609140
  404e5a:	e8 a1 c0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404e5f:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  404e65:	bf 40 91 60 00       	mov    edi,0x609140
  404e6a:	f3 0f 5c 44 24 28    	subss  xmm0,DWORD PTR [rsp+0x28]
  404e70:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  404e74:	e8 07 c1 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  404e79:	ba 02 00 00 00       	mov    edx,0x2
  404e7e:	be e0 77 40 00       	mov    esi,0x4077e0
  404e83:	48 89 c7             	mov    rdi,rax
  404e86:	48 89 c5             	mov    rbp,rax
  404e89:	e8 72 c0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404e8e:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  404e93:	48 89 ef             	mov    rdi,rbp
  404e96:	f3 0f 5c 6c 24 20    	subss  xmm5,DWORD PTR [rsp+0x20]
  404e9c:	66 0f ef c0          	pxor   xmm0,xmm0
  404ea0:	f3 0f 5a c5          	cvtss2sd xmm0,xmm5
  404ea4:	e8 d7 c0 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  404ea9:	e9 cc e8 ff ff       	jmp    40377a <testQTree()+0xbda>
  404eae:	ba 05 00 00 00       	mov    edx,0x5
  404eb3:	be d8 77 40 00       	mov    esi,0x4077d8
  404eb8:	bf 40 91 60 00       	mov    edi,0x609140
  404ebd:	e8 3e c0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404ec2:	ba 01 00 00 00       	mov    edx,0x1
  404ec7:	be de 77 40 00       	mov    esi,0x4077de
  404ecc:	bf 40 91 60 00       	mov    edi,0x609140
  404ed1:	e8 2a c0 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404ed6:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  404edc:	bf 40 91 60 00       	mov    edi,0x609140
  404ee1:	f3 0f 5c 44 24 28    	subss  xmm0,DWORD PTR [rsp+0x28]
  404ee7:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  404eeb:	e8 90 c0 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  404ef0:	ba 02 00 00 00       	mov    edx,0x2
  404ef5:	be e0 77 40 00       	mov    esi,0x4077e0
  404efa:	48 89 c7             	mov    rdi,rax
  404efd:	48 89 c5             	mov    rbp,rax
  404f00:	e8 fb bf ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404f05:	f3 0f 10 1c 24       	movss  xmm3,DWORD PTR [rsp]
  404f0a:	48 89 ef             	mov    rdi,rbp
  404f0d:	f3 0f 5c 5c 24 20    	subss  xmm3,DWORD PTR [rsp+0x20]
  404f13:	66 0f ef c0          	pxor   xmm0,xmm0
  404f17:	f3 0f 5a c3          	cvtss2sd xmm0,xmm3
  404f1b:	e8 60 c0 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  404f20:	ba 02 00 00 00       	mov    edx,0x2
  404f25:	be e3 77 40 00       	mov    esi,0x4077e3
  404f2a:	48 89 c7             	mov    rdi,rax
  404f2d:	48 89 c5             	mov    rbp,rax
  404f30:	e8 cb bf ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404f35:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  404f3b:	48 89 ef             	mov    rdi,rbp
  404f3e:	f3 0f 58 44 24 28    	addss  xmm0,DWORD PTR [rsp+0x28]
  404f44:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  404f48:	e8 33 c0 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  404f4d:	ba 02 00 00 00       	mov    edx,0x2
  404f52:	be e0 77 40 00       	mov    esi,0x4077e0
  404f57:	48 89 c7             	mov    rdi,rax
  404f5a:	48 89 c5             	mov    rbp,rax
  404f5d:	e8 9e bf ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404f62:	f3 0f 10 04 24       	movss  xmm0,DWORD PTR [rsp]
  404f67:	48 89 ef             	mov    rdi,rbp
  404f6a:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  404f70:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  404f74:	e8 07 c0 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  404f79:	ba 02 00 00 00       	mov    edx,0x2
  404f7e:	be e6 77 40 00       	mov    esi,0x4077e6
  404f83:	48 89 c7             	mov    rdi,rax
  404f86:	e8 75 bf ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404f8b:	ba 02 00 00 00       	mov    edx,0x2
  404f90:	be b6 78 40 00       	mov    esi,0x4078b6
  404f95:	bf 40 91 60 00       	mov    edi,0x609140
  404f9a:	e8 61 bf ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404f9f:	45 31 ed             	xor    r13d,r13d
  404fa2:	45 31 f6             	xor    r14d,r14d
  404fa5:	b8 4e 00 00 00       	mov    eax,0x4e
  404faa:	48 8d 74 24 67       	lea    rsi,[rsp+0x67]
  404faf:	ba 01 00 00 00       	mov    edx,0x1
  404fb4:	bf 40 91 60 00       	mov    edi,0x609140
  404fb9:	88 44 24 67          	mov    BYTE PTR [rsp+0x67],al
  404fbd:	e8 3e bf ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404fc2:	4c 89 ed             	mov    rbp,r13
  404fc5:	48 8d 74 24 65       	lea    rsi,[rsp+0x65]
  404fca:	48 89 c7             	mov    rdi,rax
  404fcd:	83 e5 01             	and    ebp,0x1
  404fd0:	48 83 fd 01          	cmp    rbp,0x1
  404fd4:	19 d2                	sbb    edx,edx
  404fd6:	83 e2 12             	and    edx,0x12
  404fd9:	83 c2 45             	add    edx,0x45
  404fdc:	88 54 24 65          	mov    BYTE PTR [rsp+0x65],dl
  404fe0:	ba 01 00 00 00       	mov    edx,0x1
  404fe5:	e8 16 bf ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  404fea:	48 8d 74 24 66       	lea    rsi,[rsp+0x66]
  404fef:	ba 01 00 00 00       	mov    edx,0x1
  404ff4:	48 89 c7             	mov    rdi,rax
  404ff7:	c6 44 24 66 20       	mov    BYTE PTR [rsp+0x66],0x20
  404ffc:	e8 ff be ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405001:	8d 44 2d 00          	lea    eax,[rbp+rbp*1+0x0]
  405005:	66 0f ef c0          	pxor   xmm0,xmm0
  405009:	41 b8 ff ff ff ff    	mov    r8d,0xffffffff
  40500f:	66 0f ef d2          	pxor   xmm2,xmm2
  405013:	83 e8 01             	sub    eax,0x1
  405016:	f3 0f 10 1d e6 29 00 	movss  xmm3,DWORD PTR [rip+0x29e6]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  40501d:	00 
  40501e:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
  405022:	31 c0                	xor    eax,eax
  405024:	4d 85 f6             	test   r14,r14
  405027:	43 0f b7 74 6c 20    	movzx  esi,WORD PTR [r12+r13*2+0x20]
  40502d:	0f 95 c0             	setne  al
  405030:	f3 0f 59 5c 24 20    	mulss  xmm3,DWORD PTR [rsp+0x20]
  405036:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  40503d:	00 
  40503e:	41 8d 04 40          	lea    eax,[r8+rax*2]
  405042:	f3 0f 10 0d ba 29 00 	movss  xmm1,DWORD PTR [rip+0x29ba]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  405049:	00 
  40504a:	f3 0f 59 4c 24 28    	mulss  xmm1,DWORD PTR [rsp+0x28]
  405050:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
  405054:	f3 0f 59 c1          	mulss  xmm0,xmm1
  405058:	f3 0f 58 44 24 18    	addss  xmm0,DWORD PTR [rsp+0x18]
  40505e:	f3 0f 59 d3          	mulss  xmm2,xmm3
  405062:	f3 0f 58 14 24       	addss  xmm2,DWORD PTR [rsp]
  405067:	66 0f 7e c0          	movd   eax,xmm0
  40506b:	f3 0f 11 54 24 30    	movss  DWORD PTR [rsp+0x30],xmm2
  405071:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
  405076:	48 c1 e2 20          	shl    rdx,0x20
  40507a:	48 09 d0             	or     rax,rdx
  40507d:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  405082:	66 0f 7e d8          	movd   eax,xmm3
  405086:	f3 0f 7e 44 24 30    	movq   xmm0,QWORD PTR [rsp+0x30]
  40508c:	48 89 c2             	mov    rdx,rax
  40508f:	66 0f 7e c8          	movd   eax,xmm1
  405093:	48 c1 e2 20          	shl    rdx,0x20
  405097:	48 09 d0             	or     rax,rdx
  40509a:	ba 01 00 00 00       	mov    edx,0x1
  40509f:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  4050a4:	f3 0f 7e 4c 24 30    	movq   xmm1,QWORD PTR [rsp+0x30]
  4050aa:	e8 61 04 00 00       	call   405510 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const>
  4050af:	49 83 c5 01          	add    r13,0x1
  4050b3:	49 83 fd 04          	cmp    r13,0x4
  4050b7:	0f 84 ab e9 ff ff    	je     403a68 <testQTree()+0xec8>
  4050bd:	4d 89 ee             	mov    r14,r13
  4050c0:	41 83 e6 02          	and    r14d,0x2
  4050c4:	49 83 fe 01          	cmp    r14,0x1
  4050c8:	19 c0                	sbb    eax,eax
  4050ca:	83 e0 fb             	and    eax,0xfffffffb
  4050cd:	83 c0 53             	add    eax,0x53
  4050d0:	e9 d5 fe ff ff       	jmp    404faa <testQTree()+0x240a>
  4050d5:	4c 8d ac 24 a8 00 00 	lea    r13,[rsp+0xa8]
  4050dc:	00 
  4050dd:	4d 39 ee             	cmp    r14,r13
  4050e0:	0f 84 b2 02 00 00    	je     405398 <testQTree()+0x27f8>
  4050e6:	f3 0f 10 45 20       	movss  xmm0,DWORD PTR [rbp+0x20]
  4050eb:	41 0f 2e 46 20       	ucomiss xmm0,DWORD PTR [r14+0x20]
  4050f0:	0f 8a ce e2 ff ff    	jp     4033c4 <testQTree()+0x824>
  4050f6:	0f 85 c8 e2 ff ff    	jne    4033c4 <testQTree()+0x824>
  4050fc:	f3 41 0f 10 46 24    	movss  xmm0,DWORD PTR [r14+0x24]
  405102:	0f 2e 45 24          	ucomiss xmm0,DWORD PTR [rbp+0x24]
  405106:	0f 8a b8 e2 ff ff    	jp     4033c4 <testQTree()+0x824>
  40510c:	0f 85 b2 e2 ff ff    	jne    4033c4 <testQTree()+0x824>
  405112:	49 89 ec             	mov    r12,rbp
  405115:	4c 89 f3             	mov    rbx,r14
  405118:	48 89 df             	mov    rdi,rbx
  40511b:	e8 f0 bd ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  405120:	4c 89 e7             	mov    rdi,r12
  405123:	48 89 c3             	mov    rbx,rax
  405126:	e8 e5 bd ff ff       	call   400f10 <std::_Rb_tree_increment(std::_Rb_tree_node_base const*)@plt>
  40512b:	4c 39 eb             	cmp    rbx,r13
  40512e:	49 89 c4             	mov    r12,rax
  405131:	0f 84 61 02 00 00    	je     405398 <testQTree()+0x27f8>
  405137:	f3 0f 10 43 20       	movss  xmm0,DWORD PTR [rbx+0x20]
  40513c:	41 0f 2e 44 24 20    	ucomiss xmm0,DWORD PTR [r12+0x20]
  405142:	0f 8a 7c e2 ff ff    	jp     4033c4 <testQTree()+0x824>
  405148:	0f 85 76 e2 ff ff    	jne    4033c4 <testQTree()+0x824>
  40514e:	f3 0f 10 43 24       	movss  xmm0,DWORD PTR [rbx+0x24]
  405153:	41 0f 2e 44 24 24    	ucomiss xmm0,DWORD PTR [r12+0x24]
  405159:	0f 8a 65 e2 ff ff    	jp     4033c4 <testQTree()+0x824>
  40515f:	74 b7                	je     405118 <testQTree()+0x2578>
  405161:	e9 5e e2 ff ff       	jmp    4033c4 <testQTree()+0x824>
  405166:	b9 40 79 40 00       	mov    ecx,0x407940
  40516b:	ba aa 00 00 00       	mov    edx,0xaa
  405170:	be 63 78 40 00       	mov    esi,0x407863
  405175:	bf 08 77 40 00       	mov    edi,0x407708
  40517a:	e8 e1 bc ff ff       	call   400e60 <__assert_fail@plt>
  40517f:	90                   	nop
  405180:	48 8d 74 24 68       	lea    rsi,[rsp+0x68]
  405185:	ba 01 00 00 00       	mov    edx,0x1
  40518a:	bf 40 91 60 00       	mov    edi,0x609140
  40518f:	c6 44 24 68 0a       	mov    BYTE PTR [rsp+0x68],0xa
  405194:	e8 67 bd ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405199:	45 31 ed             	xor    r13d,r13d
  40519c:	45 31 f6             	xor    r14d,r14d
  40519f:	b8 4e 00 00 00       	mov    eax,0x4e
  4051a4:	48 8d 74 24 6b       	lea    rsi,[rsp+0x6b]
  4051a9:	ba 01 00 00 00       	mov    edx,0x1
  4051ae:	bf 40 91 60 00       	mov    edi,0x609140
  4051b3:	88 44 24 6b          	mov    BYTE PTR [rsp+0x6b],al
  4051b7:	e8 44 bd ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4051bc:	4c 89 ed             	mov    rbp,r13
  4051bf:	48 8d 74 24 69       	lea    rsi,[rsp+0x69]
  4051c4:	48 89 c7             	mov    rdi,rax
  4051c7:	83 e5 01             	and    ebp,0x1
  4051ca:	48 83 fd 01          	cmp    rbp,0x1
  4051ce:	19 d2                	sbb    edx,edx
  4051d0:	83 e2 12             	and    edx,0x12
  4051d3:	83 c2 45             	add    edx,0x45
  4051d6:	88 54 24 69          	mov    BYTE PTR [rsp+0x69],dl
  4051da:	ba 01 00 00 00       	mov    edx,0x1
  4051df:	e8 1c bd ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4051e4:	48 8d 74 24 6a       	lea    rsi,[rsp+0x6a]
  4051e9:	ba 01 00 00 00       	mov    edx,0x1
  4051ee:	48 89 c7             	mov    rdi,rax
  4051f1:	c6 44 24 6a 20       	mov    BYTE PTR [rsp+0x6a],0x20
  4051f6:	e8 05 bd ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4051fb:	8d 44 2d 00          	lea    eax,[rbp+rbp*1+0x0]
  4051ff:	66 0f ef c0          	pxor   xmm0,xmm0
  405203:	bf ff ff ff ff       	mov    edi,0xffffffff
  405208:	66 0f ef d2          	pxor   xmm2,xmm2
  40520c:	83 e8 01             	sub    eax,0x1
  40520f:	f3 0f 10 1d ed 27 00 	movss  xmm3,DWORD PTR [rip+0x27ed]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  405216:	00 
  405217:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
  40521b:	31 c0                	xor    eax,eax
  40521d:	4d 85 f6             	test   r14,r14
  405220:	43 0f b7 74 6c 20    	movzx  esi,WORD PTR [r12+r13*2+0x20]
  405226:	0f 95 c0             	setne  al
  405229:	f3 0f 59 5c 24 20    	mulss  xmm3,DWORD PTR [rsp+0x20]
  40522f:	8d 04 47             	lea    eax,[rdi+rax*2]
  405232:	f3 0f 10 0d ca 27 00 	movss  xmm1,DWORD PTR [rip+0x27ca]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  405239:	00 
  40523a:	f3 0f 59 4c 24 28    	mulss  xmm1,DWORD PTR [rsp+0x28]
  405240:	48 8d bc 24 60 01 00 	lea    rdi,[rsp+0x160]
  405247:	00 
  405248:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
  40524c:	f3 0f 59 c1          	mulss  xmm0,xmm1
  405250:	f3 0f 58 44 24 18    	addss  xmm0,DWORD PTR [rsp+0x18]
  405256:	f3 0f 59 d3          	mulss  xmm2,xmm3
  40525a:	f3 0f 58 14 24       	addss  xmm2,DWORD PTR [rsp]
  40525f:	66 0f 7e c0          	movd   eax,xmm0
  405263:	f3 0f 11 54 24 30    	movss  DWORD PTR [rsp+0x30],xmm2
  405269:	48 8b 54 24 30       	mov    rdx,QWORD PTR [rsp+0x30]
  40526e:	48 c1 e2 20          	shl    rdx,0x20
  405272:	48 09 d0             	or     rax,rdx
  405275:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  40527a:	66 0f 7e d8          	movd   eax,xmm3
  40527e:	f3 0f 7e 44 24 30    	movq   xmm0,QWORD PTR [rsp+0x30]
  405284:	48 89 c2             	mov    rdx,rax
  405287:	66 0f 7e c8          	movd   eax,xmm1
  40528b:	48 c1 e2 20          	shl    rdx,0x20
  40528f:	48 09 d0             	or     rax,rdx
  405292:	ba 01 00 00 00       	mov    edx,0x1
  405297:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  40529c:	f3 0f 7e 4c 24 30    	movq   xmm1,QWORD PTR [rsp+0x30]
  4052a2:	e8 69 02 00 00       	call   405510 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const>
  4052a7:	49 83 c5 01          	add    r13,0x1
  4052ab:	49 83 fd 04          	cmp    r13,0x4
  4052af:	0f 84 9f e7 ff ff    	je     403a54 <testQTree()+0xeb4>
  4052b5:	4d 89 ee             	mov    r14,r13
  4052b8:	41 83 e6 02          	and    r14d,0x2
  4052bc:	49 83 fe 01          	cmp    r14,0x1
  4052c0:	19 c0                	sbb    eax,eax
  4052c2:	83 e0 fb             	and    eax,0xfffffffb
  4052c5:	83 c0 53             	add    eax,0x53
  4052c8:	e9 d7 fe ff ff       	jmp    4051a4 <testQTree()+0x2604>
  4052cd:	4c 89 e0             	mov    rax,r12
  4052d0:	4c 89 24 24          	mov    QWORD PTR [rsp],r12
  4052d4:	48 29 d8             	sub    rax,rbx
  4052d7:	49 89 c4             	mov    r12,rax
  4052da:	48 c1 f8 02          	sar    rax,0x2
  4052de:	48 85 c0             	test   rax,rax
  4052e1:	0f 84 9b 00 00 00    	je     405382 <testQTree()+0x27e2>
  4052e7:	4c 8d 2c 00          	lea    r13,[rax+rax*1]
  4052eb:	4c 39 e8             	cmp    rax,r13
  4052ee:	77 13                	ja     405303 <testQTree()+0x2763>
  4052f0:	48 b8 ff ff ff ff ff 	movabs rax,0x3fffffffffffffff
  4052f7:	ff ff 3f 
  4052fa:	49 39 c5             	cmp    r13,rax
  4052fd:	0f 86 ae 00 00 00    	jbe    4053b1 <testQTree()+0x2811>
  405303:	49 bd ff ff ff ff ff 	movabs r13,0x3fffffffffffffff
  40530a:	ff ff 3f 
  40530d:	49 c1 e5 02          	shl    r13,0x2
  405311:	4c 89 ef             	mov    rdi,r13
  405314:	e8 c7 bb ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  405319:	48 89 c1             	mov    rcx,rax
  40531c:	48 39 1c 24          	cmp    QWORD PTR [rsp],rbx
  405320:	4a 8d 04 21          	lea    rax,[rcx+r12*1]
  405324:	4c 89 e2             	mov    rdx,r12
  405327:	4e 8d 64 21 04       	lea    r12,[rcx+r12*1+0x4]
  40532c:	66 44 89 30          	mov    WORD PTR [rax],r14w
  405330:	66 44 89 78 02       	mov    WORD PTR [rax+0x2],r15w
  405335:	74 53                	je     40538a <testQTree()+0x27ea>
  405337:	48 89 cf             	mov    rdi,rcx
  40533a:	48 89 de             	mov    rsi,rbx
  40533d:	e8 4e bc ff ff       	call   400f90 <memmove@plt>
  405342:	48 89 c1             	mov    rcx,rax
  405345:	48 89 df             	mov    rdi,rbx
  405348:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
  40534c:	e8 7f bb ff ff       	call   400ed0 <operator delete(void*)@plt>
  405351:	48 8b 0c 24          	mov    rcx,QWORD PTR [rsp]
  405355:	48 89 0c 24          	mov    QWORD PTR [rsp],rcx
  405359:	49 01 cd             	add    r13,rcx
  40535c:	0f b7 45 28          	movzx  eax,WORD PTR [rbp+0x28]
  405360:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  405365:	4c 89 24 24          	mov    QWORD PTR [rsp],r12
  405369:	0f 16 04 24          	movhps xmm0,QWORD PTR [rsp]
  40536d:	4c 89 ac 24 90 00 00 	mov    QWORD PTR [rsp+0x90],r13
  405374:	00 
  405375:	0f 29 84 24 80 00 00 	movaps XMMWORD PTR [rsp+0x80],xmm0
  40537c:	00 
  40537d:	e9 0c f5 ff ff       	jmp    40488e <testQTree()+0x1cee>
  405382:	41 bd 01 00 00 00    	mov    r13d,0x1
  405388:	eb 83                	jmp    40530d <testQTree()+0x276d>
  40538a:	48 85 db             	test   rbx,rbx
  40538d:	74 c6                	je     405355 <testQTree()+0x27b5>
  40538f:	eb b4                	jmp    405345 <testQTree()+0x27a5>
  405391:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  405398:	ba 12 00 00 00       	mov    edx,0x12
  40539d:	be 06 79 40 00       	mov    esi,0x407906
  4053a2:	bf 40 91 60 00       	mov    edi,0x609140
  4053a7:	e8 54 bb ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4053ac:	e9 fb ea ff ff       	jmp    403eac <testQTree()+0x130c>
  4053b1:	4d 85 ed             	test   r13,r13
  4053b4:	0f 85 53 ff ff ff    	jne    40530d <testQTree()+0x276d>
  4053ba:	31 c9                	xor    ecx,ecx
  4053bc:	e9 5b ff ff ff       	jmp    40531c <testQTree()+0x277c>
  4053c1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  4053c8:	bd 04 00 00 00       	mov    ebp,0x4
  4053cd:	e9 b6 e7 ff ff       	jmp    403b88 <testQTree()+0xfe8>
  4053d2:	48 8d b4 24 00 01 00 	lea    rsi,[rsp+0x100]
  4053d9:	00 
  4053da:	4c 89 ef             	mov    rdi,r13
  4053dd:	66 44 89 b4 24 00 01 	mov    WORD PTR [rsp+0x100],r14w
  4053e4:	00 00 
  4053e6:	66 c7 84 24 02 01 00 	mov    WORD PTR [rsp+0x102],0x3
  4053ed:	00 03 00 
  4053f0:	e8 5b 12 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  4053f5:	e9 7a f5 ff ff       	jmp    404974 <testQTree()+0x1dd4>
  4053fa:	48 8d b4 24 00 01 00 	lea    rsi,[rsp+0x100]
  405401:	00 
  405402:	4c 89 ef             	mov    rdi,r13
  405405:	66 44 89 b4 24 00 01 	mov    WORD PTR [rsp+0x100],r14w
  40540c:	00 00 
  40540e:	66 c7 84 24 02 01 00 	mov    WORD PTR [rsp+0x102],0x2
  405415:	00 02 00 
  405418:	e8 33 12 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  40541d:	f3 0f 10 44 24 78    	movss  xmm0,DWORD PTR [rsp+0x78]
  405423:	f3 0f 10 54 24 74    	movss  xmm2,DWORD PTR [rsp+0x74]
  405429:	f3 0f 10 4c 24 7c    	movss  xmm1,DWORD PTR [rsp+0x7c]
  40542f:	e9 1d f5 ff ff       	jmp    404951 <testQTree()+0x1db1>
  405434:	48 8d b4 24 00 01 00 	lea    rsi,[rsp+0x100]
  40543b:	00 
  40543c:	4c 89 ef             	mov    rdi,r13
  40543f:	66 44 89 b4 24 00 01 	mov    WORD PTR [rsp+0x100],r14w
  405446:	00 00 
  405448:	66 c7 84 24 02 01 00 	mov    WORD PTR [rsp+0x102],0x1
  40544f:	00 01 00 
  405452:	e8 f9 11 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  405457:	f3 0f 10 44 24 78    	movss  xmm0,DWORD PTR [rsp+0x78]
  40545d:	f3 0f 10 54 24 74    	movss  xmm2,DWORD PTR [rsp+0x74]
  405463:	f3 0f 10 4c 24 7c    	movss  xmm1,DWORD PTR [rsp+0x7c]
  405469:	e9 b7 f4 ff ff       	jmp    404925 <testQTree()+0x1d85>
  40546e:	4c 8d ac 24 80 00 00 	lea    r13,[rsp+0x80]
  405475:	00 
  405476:	48 8d b4 24 00 01 00 	lea    rsi,[rsp+0x100]
  40547d:	00 
  40547e:	66 44 89 b4 24 00 01 	mov    WORD PTR [rsp+0x100],r14w
  405485:	00 00 
  405487:	66 c7 84 24 02 01 00 	mov    WORD PTR [rsp+0x102],0x0
  40548e:	00 00 00 
  405491:	4c 89 ef             	mov    rdi,r13
  405494:	e8 b7 11 00 00       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  405499:	e9 49 f4 ff ff       	jmp    4048e7 <testQTree()+0x1d47>
  40549e:	48 89 c3             	mov    rbx,rax
  4054a1:	e9 bb bb ff ff       	jmp    401061 <testQTree() [clone .cold.71]+0x28>
  4054a6:	48 89 c3             	mov    rbx,rax
  4054a9:	e9 d7 bb ff ff       	jmp    401085 <testQTree() [clone .cold.71]+0x4c>
  4054ae:	48 89 c3             	mov    rbx,rax
  4054b1:	e9 06 bc ff ff       	jmp    4010bc <testQTree() [clone .cold.71]+0x83>
  4054b6:	48 89 c5             	mov    rbp,rax
  4054b9:	e9 7b bb ff ff       	jmp    401039 <testQTree() [clone .cold.71]>
  4054be:	48 89 c3             	mov    rbx,rax
  4054c1:	e9 ad bb ff ff       	jmp    401073 <testQTree() [clone .cold.71]+0x3a>
  4054c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4054cd:	00 00 00 

00000000004054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>:
  4054d0:	48 85 f6             	test   rsi,rsi
  4054d3:	74 33                	je     405508 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)+0x38>
  4054d5:	41 54                	push   r12
  4054d7:	49 89 fc             	mov    r12,rdi
  4054da:	55                   	push   rbp
  4054db:	53                   	push   rbx
  4054dc:	48 89 f3             	mov    rbx,rsi
  4054df:	48 8b 73 18          	mov    rsi,QWORD PTR [rbx+0x18]
  4054e3:	4c 89 e7             	mov    rdi,r12
  4054e6:	e8 e5 ff ff ff       	call   4054d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)>
  4054eb:	48 8b 6b 10          	mov    rbp,QWORD PTR [rbx+0x10]
  4054ef:	48 89 df             	mov    rdi,rbx
  4054f2:	e8 d9 b9 ff ff       	call   400ed0 <operator delete(void*)@plt>
  4054f7:	48 85 ed             	test   rbp,rbp
  4054fa:	48 89 eb             	mov    rbx,rbp
  4054fd:	75 e0                	jne    4054df <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_erase(std::_Rb_tree_node<Pair>*)+0xf>
  4054ff:	5b                   	pop    rbx
  405500:	5d                   	pop    rbp
  405501:	41 5c                	pop    r12
  405503:	c3                   	ret    
  405504:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  405508:	f3 c3                	repz ret 
  40550a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]

0000000000405510 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const>:
  405510:	41 57                	push   r15
  405512:	66 48 0f 7e c1       	movq   rcx,xmm0
  405517:	41 56                	push   r14
  405519:	66 48 0f 7e c8       	movq   rax,xmm1
  40551e:	41 55                	push   r13
  405520:	41 54                	push   r12
  405522:	55                   	push   rbp
  405523:	53                   	push   rbx
  405524:	48 c1 e9 20          	shr    rcx,0x20
  405528:	48 c1 e8 20          	shr    rax,0x20
  40552c:	0f b7 f6             	movzx  esi,si
  40552f:	49 89 ff             	mov    r15,rdi
  405532:	48 83 ec 48          	sub    rsp,0x48
  405536:	49 89 d6             	mov    r14,rdx
  405539:	89 4c 24 18          	mov    DWORD PTR [rsp+0x18],ecx
  40553d:	89 44 24 20          	mov    DWORD PTR [rsp+0x20],eax
  405541:	48 8d 04 f5 00 00 00 	lea    rax,[rsi*8+0x0]
  405548:	00 
  405549:	48 8b 4f 10          	mov    rcx,QWORD PTR [rdi+0x10]
  40554d:	66 0f 7e 44 24 1c    	movd   DWORD PTR [rsp+0x1c],xmm0
  405553:	48 29 f0             	sub    rax,rsi
  405556:	66 0f 7e 4c 24 24    	movd   DWORD PTR [rsp+0x24],xmm1
  40555c:	4c 8d 24 c1          	lea    r12,[rcx+rax*8]
  405560:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  405566:	66 83 f8 ff          	cmp    ax,0xffff
  40556a:	0f 84 c7 02 00 00    	je     405837 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x327>
  405570:	66 83 f8 fe          	cmp    ax,0xfffe
  405574:	75 31                	jne    4055a7 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x97>
  405576:	4c 89 e0             	mov    rax,r12
  405579:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  405580:	0f b7 50 20          	movzx  edx,WORD PTR [rax+0x20]
  405584:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  40558b:	00 
  40558c:	48 29 d0             	sub    rax,rdx
  40558f:	48 8d 04 c1          	lea    rax,[rcx+rax*8]
  405593:	0f b7 50 28          	movzx  edx,WORD PTR [rax+0x28]
  405597:	66 83 fa fe          	cmp    dx,0xfffe
  40559b:	74 e3                	je     405580 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x70>
  40559d:	66 83 fa ff          	cmp    dx,0xffff
  4055a1:	0f 84 81 02 00 00    	je     405828 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x318>
  4055a7:	ba 05 00 00 00       	mov    edx,0x5
  4055ac:	be 07 78 40 00       	mov    esi,0x407807
  4055b1:	bf 40 91 60 00       	mov    edi,0x609140
  4055b6:	e8 45 b9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4055bb:	ba 01 00 00 00       	mov    edx,0x1
  4055c0:	be de 77 40 00       	mov    esi,0x4077de
  4055c5:	bf 40 91 60 00       	mov    edi,0x609140
  4055ca:	e8 31 b9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4055cf:	f3 0f 10 44 24 1c    	movss  xmm0,DWORD PTR [rsp+0x1c]
  4055d5:	bf 40 91 60 00       	mov    edi,0x609140
  4055da:	f3 0f 5c 44 24 24    	subss  xmm0,DWORD PTR [rsp+0x24]
  4055e0:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  4055e4:	e8 97 b9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4055e9:	ba 02 00 00 00       	mov    edx,0x2
  4055ee:	be e0 77 40 00       	mov    esi,0x4077e0
  4055f3:	48 89 c7             	mov    rdi,rax
  4055f6:	48 89 c3             	mov    rbx,rax
  4055f9:	e8 02 b9 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4055fe:	f3 0f 10 5c 24 18    	movss  xmm3,DWORD PTR [rsp+0x18]
  405604:	48 89 df             	mov    rdi,rbx
  405607:	f3 0f 5c 5c 24 20    	subss  xmm3,DWORD PTR [rsp+0x20]
  40560d:	66 0f ef c0          	pxor   xmm0,xmm0
  405611:	f3 0f 5a c3          	cvtss2sd xmm0,xmm3
  405615:	e8 66 b9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40561a:	ba 02 00 00 00       	mov    edx,0x2
  40561f:	be e3 77 40 00       	mov    esi,0x4077e3
  405624:	48 89 c7             	mov    rdi,rax
  405627:	48 89 c3             	mov    rbx,rax
  40562a:	e8 d1 b8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40562f:	f3 0f 10 44 24 1c    	movss  xmm0,DWORD PTR [rsp+0x1c]
  405635:	48 89 df             	mov    rdi,rbx
  405638:	f3 0f 58 44 24 24    	addss  xmm0,DWORD PTR [rsp+0x24]
  40563e:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  405642:	e8 39 b9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  405647:	ba 02 00 00 00       	mov    edx,0x2
  40564c:	be e0 77 40 00       	mov    esi,0x4077e0
  405651:	48 89 c7             	mov    rdi,rax
  405654:	48 89 c3             	mov    rbx,rax
  405657:	e8 a4 b8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40565c:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  405662:	48 89 df             	mov    rdi,rbx
  405665:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  40566b:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  40566f:	e8 0c b9 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  405674:	ba 02 00 00 00       	mov    edx,0x2
  405679:	be e6 77 40 00       	mov    esi,0x4077e6
  40567e:	48 89 c7             	mov    rdi,rax
  405681:	e8 7a b8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405686:	ba 01 00 00 00       	mov    edx,0x1
  40568b:	be 05 78 40 00       	mov    esi,0x407805
  405690:	bf 40 91 60 00       	mov    edi,0x609140
  405695:	e8 66 b8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40569a:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  4056a0:	66 83 f8 fe          	cmp    ax,0xfffe
  4056a4:	0f 85 b6 00 00 00    	jne    405760 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x250>
  4056aa:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  4056b0:	4d 8d 6c 24 20       	lea    r13,[r12+0x20]
  4056b5:	4c 89 e3             	mov    rbx,r12
  4056b8:	f3 0f 10 23          	movss  xmm4,DWORD PTR [rbx]
  4056bc:	ba 02 00 00 00       	mov    edx,0x2
  4056c1:	be 4c 78 40 00       	mov    esi,0x40784c
  4056c6:	f3 0f 10 6b 04       	movss  xmm5,DWORD PTR [rbx+0x4]
  4056cb:	bf 40 91 60 00       	mov    edi,0x609140
  4056d0:	f3 0f 11 64 24 10    	movss  DWORD PTR [rsp+0x10],xmm4
  4056d6:	48 83 c3 08          	add    rbx,0x8
  4056da:	f3 0f 11 6c 24 0c    	movss  DWORD PTR [rsp+0xc],xmm5
  4056e0:	e8 1b b8 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4056e5:	66 0f ef c0          	pxor   xmm0,xmm0
  4056e9:	bf 40 91 60 00       	mov    edi,0x609140
  4056ee:	f3 0f 5a 44 24 10    	cvtss2sd xmm0,DWORD PTR [rsp+0x10]
  4056f4:	e8 87 b8 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4056f9:	ba 02 00 00 00       	mov    edx,0x2
  4056fe:	be e0 77 40 00       	mov    esi,0x4077e0
  405703:	48 89 c7             	mov    rdi,rax
  405706:	48 89 c5             	mov    rbp,rax
  405709:	e8 f2 b7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40570e:	66 0f ef c0          	pxor   xmm0,xmm0
  405712:	48 89 ef             	mov    rdi,rbp
  405715:	f3 0f 5a 44 24 0c    	cvtss2sd xmm0,DWORD PTR [rsp+0xc]
  40571b:	e8 60 b8 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  405720:	ba 01 00 00 00       	mov    edx,0x1
  405725:	be 0d 78 40 00       	mov    esi,0x40780d
  40572a:	48 89 c7             	mov    rdi,rax
  40572d:	e8 ce b7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405732:	49 39 dd             	cmp    r13,rbx
  405735:	75 81                	jne    4056b8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x1a8>
  405737:	41 0f b7 54 24 20    	movzx  edx,WORD PTR [r12+0x20]
  40573d:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  405744:	00 
  405745:	48 29 d0             	sub    rax,rdx
  405748:	49 8b 57 10          	mov    rdx,QWORD PTR [r15+0x10]
  40574c:	4c 8d 24 c2          	lea    r12,[rdx+rax*8]
  405750:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  405756:	66 83 f8 fe          	cmp    ax,0xfffe
  40575a:	0f 84 50 ff ff ff    	je     4056b0 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x1a0>
  405760:	66 83 f8 ff          	cmp    ax,0xffff
  405764:	0f 84 38 03 00 00    	je     405aa2 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x592>
  40576a:	66 85 c0             	test   ax,ax
  40576d:	0f 84 8f 00 00 00    	je     405802 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x2f2>
  405773:	31 db                	xor    ebx,ebx
  405775:	f3 41 0f 10 34 dc    	movss  xmm6,DWORD PTR [r12+rbx*8]
  40577b:	ba 02 00 00 00       	mov    edx,0x2
  405780:	be 4c 78 40 00       	mov    esi,0x40784c
  405785:	f3 41 0f 10 7c dc 04 	movss  xmm7,DWORD PTR [r12+rbx*8+0x4]
  40578c:	bf 40 91 60 00       	mov    edi,0x609140
  405791:	f3 0f 11 74 24 10    	movss  DWORD PTR [rsp+0x10],xmm6
  405797:	48 83 c3 01          	add    rbx,0x1
  40579b:	f3 0f 11 7c 24 0c    	movss  DWORD PTR [rsp+0xc],xmm7
  4057a1:	e8 5a b7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4057a6:	66 0f ef c0          	pxor   xmm0,xmm0
  4057aa:	bf 40 91 60 00       	mov    edi,0x609140
  4057af:	f3 0f 5a 44 24 10    	cvtss2sd xmm0,DWORD PTR [rsp+0x10]
  4057b5:	e8 c6 b7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4057ba:	ba 02 00 00 00       	mov    edx,0x2
  4057bf:	be e0 77 40 00       	mov    esi,0x4077e0
  4057c4:	48 89 c7             	mov    rdi,rax
  4057c7:	48 89 c5             	mov    rbp,rax
  4057ca:	e8 31 b7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4057cf:	66 0f ef c0          	pxor   xmm0,xmm0
  4057d3:	48 89 ef             	mov    rdi,rbp
  4057d6:	f3 0f 5a 44 24 0c    	cvtss2sd xmm0,DWORD PTR [rsp+0xc]
  4057dc:	e8 9f b7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4057e1:	ba 01 00 00 00       	mov    edx,0x1
  4057e6:	be 0d 78 40 00       	mov    esi,0x40780d
  4057eb:	48 89 c7             	mov    rdi,rax
  4057ee:	e8 0d b7 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4057f3:	41 0f b7 44 24 28    	movzx  eax,WORD PTR [r12+0x28]
  4057f9:	48 39 d8             	cmp    rax,rbx
  4057fc:	0f 87 73 ff ff ff    	ja     405775 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x265>
  405802:	ba 01 00 00 00       	mov    edx,0x1
  405807:	be 39 78 40 00       	mov    esi,0x407839
  40580c:	bf 40 91 60 00       	mov    edi,0x609140
  405811:	e8 ea b6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405816:	48 83 c4 48          	add    rsp,0x48
  40581a:	5b                   	pop    rbx
  40581b:	5d                   	pop    rbp
  40581c:	41 5c                	pop    r12
  40581e:	41 5d                	pop    r13
  405820:	41 5e                	pop    r14
  405822:	41 5f                	pop    r15
  405824:	c3                   	ret    
  405825:	0f 1f 00             	nop    DWORD PTR [rax]
  405828:	ba 1b 00 00 00       	mov    edx,0x1b
  40582d:	be e9 77 40 00       	mov    esi,0x4077e9
  405832:	e9 7a fd ff ff       	jmp    4055b1 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0xa1>
  405837:	ba 05 00 00 00       	mov    edx,0x5
  40583c:	be d8 77 40 00       	mov    esi,0x4077d8
  405841:	bf 40 91 60 00       	mov    edi,0x609140
  405846:	e8 b5 b6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40584b:	ba 01 00 00 00       	mov    edx,0x1
  405850:	be de 77 40 00       	mov    esi,0x4077de
  405855:	bf 40 91 60 00       	mov    edi,0x609140
  40585a:	e8 a1 b6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40585f:	f3 0f 10 44 24 1c    	movss  xmm0,DWORD PTR [rsp+0x1c]
  405865:	bf 40 91 60 00       	mov    edi,0x609140
  40586a:	f3 0f 5c 44 24 24    	subss  xmm0,DWORD PTR [rsp+0x24]
  405870:	31 ed                	xor    ebp,ebp
  405872:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  405876:	e8 05 b7 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40587b:	ba 02 00 00 00       	mov    edx,0x2
  405880:	be e0 77 40 00       	mov    esi,0x4077e0
  405885:	48 89 c7             	mov    rdi,rax
  405888:	48 89 c3             	mov    rbx,rax
  40588b:	e8 70 b6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405890:	f3 0f 10 54 24 18    	movss  xmm2,DWORD PTR [rsp+0x18]
  405896:	48 89 df             	mov    rdi,rbx
  405899:	f3 0f 5c 54 24 20    	subss  xmm2,DWORD PTR [rsp+0x20]
  40589f:	66 0f ef c0          	pxor   xmm0,xmm0
  4058a3:	f3 0f 5a c2          	cvtss2sd xmm0,xmm2
  4058a7:	e8 d4 b6 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4058ac:	ba 02 00 00 00       	mov    edx,0x2
  4058b1:	be e3 77 40 00       	mov    esi,0x4077e3
  4058b6:	48 89 c7             	mov    rdi,rax
  4058b9:	48 89 c3             	mov    rbx,rax
  4058bc:	e8 3f b6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4058c1:	f3 0f 10 44 24 1c    	movss  xmm0,DWORD PTR [rsp+0x1c]
  4058c7:	48 89 df             	mov    rdi,rbx
  4058ca:	f3 0f 58 44 24 24    	addss  xmm0,DWORD PTR [rsp+0x24]
  4058d0:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  4058d4:	e8 a7 b6 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  4058d9:	ba 02 00 00 00       	mov    edx,0x2
  4058de:	be e0 77 40 00       	mov    esi,0x4077e0
  4058e3:	48 89 c7             	mov    rdi,rax
  4058e6:	48 89 c3             	mov    rbx,rax
  4058e9:	e8 12 b6 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4058ee:	f3 0f 10 44 24 18    	movss  xmm0,DWORD PTR [rsp+0x18]
  4058f4:	48 89 df             	mov    rdi,rbx
  4058f7:	f3 0f 58 44 24 20    	addss  xmm0,DWORD PTR [rsp+0x20]
  4058fd:	48 8d 5c 24 3f       	lea    rbx,[rsp+0x3f]
  405902:	f3 0f 5a c0          	cvtss2sd xmm0,xmm0
  405906:	e8 75 b6 ff ff       	call   400f80 <std::ostream& std::ostream::_M_insert<double>(double)@plt>
  40590b:	ba 02 00 00 00       	mov    edx,0x2
  405910:	be e6 77 40 00       	mov    esi,0x4077e6
  405915:	48 89 c7             	mov    rdi,rax
  405918:	e8 e3 b5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40591d:	ba 02 00 00 00       	mov    edx,0x2
  405922:	be b6 78 40 00       	mov    esi,0x4078b6
  405927:	bf 40 91 60 00       	mov    edi,0x609140
  40592c:	e8 cf b5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405931:	49 8d 46 01          	lea    rax,[r14+0x1]
  405935:	f3 0f 10 1d c7 20 00 	movss  xmm3,DWORD PTR [rip+0x20c7]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  40593c:	00 
  40593d:	f3 0f 11 5c 24 0c    	movss  DWORD PTR [rsp+0xc],xmm3
  405943:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  405948:	45 31 ed             	xor    r13d,r13d
  40594b:	4d 85 f6             	test   r14,r14
  40594e:	74 20                	je     405970 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x460>
  405950:	ba 01 00 00 00       	mov    edx,0x1
  405955:	48 89 de             	mov    rsi,rbx
  405958:	bf 40 91 60 00       	mov    edi,0x609140
  40595d:	49 83 c5 01          	add    r13,0x1
  405961:	c6 44 24 3f 20       	mov    BYTE PTR [rsp+0x3f],0x20
  405966:	e8 95 b5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  40596b:	4d 39 ee             	cmp    r14,r13
  40596e:	75 e0                	jne    405950 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x440>
  405970:	49 89 ed             	mov    r13,rbp
  405973:	ba 01 00 00 00       	mov    edx,0x1
  405978:	48 89 de             	mov    rsi,rbx
  40597b:	41 83 e5 02          	and    r13d,0x2
  40597f:	bf 40 91 60 00       	mov    edi,0x609140
  405984:	49 83 fd 01          	cmp    r13,0x1
  405988:	19 c0                	sbb    eax,eax
  40598a:	83 e0 fb             	and    eax,0xfffffffb
  40598d:	83 c0 53             	add    eax,0x53
  405990:	88 44 24 3f          	mov    BYTE PTR [rsp+0x3f],al
  405994:	e8 67 b5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405999:	48 89 e9             	mov    rcx,rbp
  40599c:	48 89 de             	mov    rsi,rbx
  40599f:	48 89 c7             	mov    rdi,rax
  4059a2:	83 e1 01             	and    ecx,0x1
  4059a5:	48 83 f9 01          	cmp    rcx,0x1
  4059a9:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
  4059ae:	19 d2                	sbb    edx,edx
  4059b0:	83 e2 12             	and    edx,0x12
  4059b3:	83 c2 45             	add    edx,0x45
  4059b6:	88 54 24 3f          	mov    BYTE PTR [rsp+0x3f],dl
  4059ba:	ba 01 00 00 00       	mov    edx,0x1
  4059bf:	e8 3c b5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4059c4:	ba 01 00 00 00       	mov    edx,0x1
  4059c9:	48 89 de             	mov    rsi,rbx
  4059cc:	48 89 c7             	mov    rdi,rax
  4059cf:	c6 44 24 3f 20       	mov    BYTE PTR [rsp+0x3f],0x20
  4059d4:	e8 27 b5 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  4059d9:	31 c0                	xor    eax,eax
  4059db:	4d 85 ed             	test   r13,r13
  4059de:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
  4059e3:	0f 95 c0             	setne  al
  4059e6:	bf ff ff ff ff       	mov    edi,0xffffffff
  4059eb:	be ff ff ff ff       	mov    esi,0xffffffff
  4059f0:	66 0f ef d2          	pxor   xmm2,xmm2
  4059f4:	8d 04 47             	lea    eax,[rdi+rax*2]
  4059f7:	66 0f ef c0          	pxor   xmm0,xmm0
  4059fb:	8d 0c 4e             	lea    ecx,[rsi+rcx*2]
  4059fe:	f3 0f 10 74 24 0c    	movss  xmm6,DWORD PTR [rsp+0xc]
  405a04:	41 0f b7 74 6c 20    	movzx  esi,WORD PTR [r12+rbp*2+0x20]
  405a0a:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
  405a0e:	4c 89 ff             	mov    rdi,r15
  405a11:	48 83 c5 01          	add    rbp,0x1
  405a15:	f3 0f 2a c1          	cvtsi2ss xmm0,ecx
  405a19:	f3 0f 10 5c 24 20    	movss  xmm3,DWORD PTR [rsp+0x20]
  405a1f:	f3 0f 59 de          	mulss  xmm3,xmm6
  405a23:	f3 0f 10 4c 24 24    	movss  xmm1,DWORD PTR [rsp+0x24]
  405a29:	f3 0f 59 ce          	mulss  xmm1,xmm6
  405a2d:	f3 0f 59 d3          	mulss  xmm2,xmm3
  405a31:	f3 0f 59 c1          	mulss  xmm0,xmm1
  405a35:	f3 0f 58 54 24 18    	addss  xmm2,DWORD PTR [rsp+0x18]
  405a3b:	f3 0f 58 44 24 1c    	addss  xmm0,DWORD PTR [rsp+0x1c]
  405a41:	f3 0f 11 54 24 10    	movss  DWORD PTR [rsp+0x10],xmm2
  405a47:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
  405a4c:	66 0f 7e c0          	movd   eax,xmm0
  405a50:	48 c1 e2 20          	shl    rdx,0x20
  405a54:	48 09 d0             	or     rax,rdx
  405a57:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  405a5c:	66 0f 7e d8          	movd   eax,xmm3
  405a60:	f3 0f 7e 44 24 10    	movq   xmm0,QWORD PTR [rsp+0x10]
  405a66:	48 89 c2             	mov    rdx,rax
  405a69:	66 0f 7e c8          	movd   eax,xmm1
  405a6d:	48 c1 e2 20          	shl    rdx,0x20
  405a71:	48 09 d0             	or     rax,rdx
  405a74:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  405a79:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  405a7e:	f3 0f 7e 4c 24 10    	movq   xmm1,QWORD PTR [rsp+0x10]
  405a84:	e8 87 fa ff ff       	call   405510 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const>
  405a89:	48 83 fd 04          	cmp    rbp,0x4
  405a8d:	0f 85 b5 fe ff ff    	jne    405948 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x438>
  405a93:	48 83 c4 48          	add    rsp,0x48
  405a97:	5b                   	pop    rbx
  405a98:	5d                   	pop    rbp
  405a99:	41 5c                	pop    r12
  405a9b:	41 5d                	pop    r13
  405a9d:	41 5e                	pop    r14
  405a9f:	41 5f                	pop    r15
  405aa1:	c3                   	ret    
  405aa2:	48 8d 5c 24 3f       	lea    rbx,[rsp+0x3f]
  405aa7:	ba 01 00 00 00       	mov    edx,0x1
  405aac:	bf 40 91 60 00       	mov    edi,0x609140
  405ab1:	c6 44 24 3f 0a       	mov    BYTE PTR [rsp+0x3f],0xa
  405ab6:	31 ed                	xor    ebp,ebp
  405ab8:	48 89 de             	mov    rsi,rbx
  405abb:	e8 40 b4 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405ac0:	49 8d 46 01          	lea    rax,[r14+0x1]
  405ac4:	f3 0f 10 15 38 1f 00 	movss  xmm2,DWORD PTR [rip+0x1f38]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  405acb:	00 
  405acc:	f3 0f 11 54 24 0c    	movss  DWORD PTR [rsp+0xc],xmm2
  405ad2:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  405ad7:	45 31 ed             	xor    r13d,r13d
  405ada:	4d 85 f6             	test   r14,r14
  405add:	74 21                	je     405b00 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x5f0>
  405adf:	90                   	nop
  405ae0:	ba 01 00 00 00       	mov    edx,0x1
  405ae5:	48 89 de             	mov    rsi,rbx
  405ae8:	bf 40 91 60 00       	mov    edi,0x609140
  405aed:	49 83 c5 01          	add    r13,0x1
  405af1:	c6 44 24 3f 20       	mov    BYTE PTR [rsp+0x3f],0x20
  405af6:	e8 05 b4 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405afb:	4d 39 ee             	cmp    r14,r13
  405afe:	75 e0                	jne    405ae0 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x5d0>
  405b00:	49 89 ed             	mov    r13,rbp
  405b03:	ba 01 00 00 00       	mov    edx,0x1
  405b08:	48 89 de             	mov    rsi,rbx
  405b0b:	41 83 e5 02          	and    r13d,0x2
  405b0f:	bf 40 91 60 00       	mov    edi,0x609140
  405b14:	49 83 fd 01          	cmp    r13,0x1
  405b18:	19 c0                	sbb    eax,eax
  405b1a:	83 e0 fb             	and    eax,0xfffffffb
  405b1d:	83 c0 53             	add    eax,0x53
  405b20:	88 44 24 3f          	mov    BYTE PTR [rsp+0x3f],al
  405b24:	e8 d7 b3 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405b29:	48 89 e9             	mov    rcx,rbp
  405b2c:	48 89 de             	mov    rsi,rbx
  405b2f:	48 89 c7             	mov    rdi,rax
  405b32:	83 e1 01             	and    ecx,0x1
  405b35:	48 83 f9 01          	cmp    rcx,0x1
  405b39:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
  405b3e:	19 d2                	sbb    edx,edx
  405b40:	83 e2 12             	and    edx,0x12
  405b43:	83 c2 45             	add    edx,0x45
  405b46:	88 54 24 3f          	mov    BYTE PTR [rsp+0x3f],dl
  405b4a:	ba 01 00 00 00       	mov    edx,0x1
  405b4f:	e8 ac b3 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405b54:	ba 01 00 00 00       	mov    edx,0x1
  405b59:	48 89 de             	mov    rsi,rbx
  405b5c:	48 89 c7             	mov    rdi,rax
  405b5f:	c6 44 24 3f 20       	mov    BYTE PTR [rsp+0x3f],0x20
  405b64:	e8 97 b3 ff ff       	call   400f00 <std::basic_ostream<char, std::char_traits<char> >& std::__ostream_insert<char, std::char_traits<char> >(std::basic_ostream<char, std::char_traits<char> >&, char const*, long)@plt>
  405b69:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
  405b6e:	b8 ff ff ff ff       	mov    eax,0xffffffff
  405b73:	ba ff ff ff ff       	mov    edx,0xffffffff
  405b78:	66 0f ef d2          	pxor   xmm2,xmm2
  405b7c:	41 0f b7 74 6c 20    	movzx  esi,WORD PTR [r12+rbp*2+0x20]
  405b82:	66 0f ef c0          	pxor   xmm0,xmm0
  405b86:	4c 89 ff             	mov    rdi,r15
  405b89:	8d 0c 48             	lea    ecx,[rax+rcx*2]
  405b8c:	31 c0                	xor    eax,eax
  405b8e:	4d 85 ed             	test   r13,r13
  405b91:	0f 95 c0             	setne  al
  405b94:	f3 0f 10 7c 24 0c    	movss  xmm7,DWORD PTR [rsp+0xc]
  405b9a:	8d 04 42             	lea    eax,[rdx+rax*2]
  405b9d:	f3 0f 10 5c 24 20    	movss  xmm3,DWORD PTR [rsp+0x20]
  405ba3:	f3 0f 2a c1          	cvtsi2ss xmm0,ecx
  405ba7:	48 83 c5 01          	add    rbp,0x1
  405bab:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
  405baf:	f3 0f 59 df          	mulss  xmm3,xmm7
  405bb3:	f3 0f 10 4c 24 24    	movss  xmm1,DWORD PTR [rsp+0x24]
  405bb9:	f3 0f 59 cf          	mulss  xmm1,xmm7
  405bbd:	f3 0f 59 c1          	mulss  xmm0,xmm1
  405bc1:	f3 0f 59 d3          	mulss  xmm2,xmm3
  405bc5:	f3 0f 58 44 24 1c    	addss  xmm0,DWORD PTR [rsp+0x1c]
  405bcb:	f3 0f 58 54 24 18    	addss  xmm2,DWORD PTR [rsp+0x18]
  405bd1:	66 0f 7e c0          	movd   eax,xmm0
  405bd5:	f3 0f 11 54 24 10    	movss  DWORD PTR [rsp+0x10],xmm2
  405bdb:	48 8b 54 24 10       	mov    rdx,QWORD PTR [rsp+0x10]
  405be0:	48 c1 e2 20          	shl    rdx,0x20
  405be4:	48 09 d0             	or     rax,rdx
  405be7:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  405bec:	66 0f 7e d8          	movd   eax,xmm3
  405bf0:	f3 0f 7e 44 24 10    	movq   xmm0,QWORD PTR [rsp+0x10]
  405bf6:	48 89 c2             	mov    rdx,rax
  405bf9:	66 0f 7e c8          	movd   eax,xmm1
  405bfd:	48 c1 e2 20          	shl    rdx,0x20
  405c01:	48 09 d0             	or     rax,rdx
  405c04:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  405c09:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  405c0e:	f3 0f 7e 4c 24 10    	movq   xmm1,QWORD PTR [rsp+0x10]
  405c14:	e8 f7 f8 ff ff       	call   405510 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const>
  405c19:	48 83 fd 04          	cmp    rbp,0x4
  405c1d:	0f 85 b4 fe ff ff    	jne    405ad7 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x5c7>
  405c23:	e9 da fb ff ff       	jmp    405802 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::dump(unsigned short, zekku::AABB<float>, unsigned long) const+0x2f2>
  405c28:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  405c2f:	00 

0000000000405c30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)>:
  405c30:	41 57                	push   r15
  405c32:	0f b7 c2             	movzx  eax,dx
  405c35:	41 56                	push   r14
  405c37:	41 55                	push   r13
  405c39:	41 54                	push   r12
  405c3b:	49 89 fd             	mov    r13,rdi
  405c3e:	55                   	push   rbp
  405c3f:	53                   	push   rbx
  405c40:	48 8d 1c c5 00 00 00 	lea    rbx,[rax*8+0x0]
  405c47:	00 
  405c48:	48 89 f5             	mov    rbp,rsi
  405c4b:	49 89 c6             	mov    r14,rax
  405c4e:	48 83 ec 48          	sub    rsp,0x48
  405c52:	48 8b 7f 10          	mov    rdi,QWORD PTR [rdi+0x10]
  405c56:	48 29 c3             	sub    rbx,rax
  405c59:	48 c1 e3 03          	shl    rbx,0x3
  405c5d:	66 0f d6 44 24 08    	movq   QWORD PTR [rsp+0x8],xmm0
  405c63:	66 0f d6 4c 24 10    	movq   QWORD PTR [rsp+0x10],xmm1
  405c69:	48 8d 34 1f          	lea    rsi,[rdi+rbx*1]
  405c6d:	66 0f d6 54 24 18    	movq   QWORD PTR [rsp+0x18],xmm2
  405c73:	0f b7 46 28          	movzx  eax,WORD PTR [rsi+0x28]
  405c77:	66 83 f8 ff          	cmp    ax,0xffff
  405c7b:	0f 84 bf 05 00 00    	je     406240 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x610>
  405c81:	66 83 f8 fe          	cmp    ax,0xfffe
  405c85:	0f 84 45 09 00 00    	je     4065d0 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x9a0>
  405c8b:	66 83 f8 03          	cmp    ax,0x3
  405c8f:	77 7f                	ja     405d10 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0xe0>
  405c91:	48 8b 55 00          	mov    rdx,QWORD PTR [rbp+0x0]
  405c95:	66 0f ef c0          	pxor   xmm0,xmm0
  405c99:	48 89 14 c6          	mov    QWORD PTR [rsi+rax*8],rdx
  405c9d:	f3 0f 10 55 00       	movss  xmm2,DWORD PTR [rbp+0x0]
  405ca2:	0f 2e d0             	ucomiss xmm2,xmm0
  405ca5:	f3 0f 10 4d 04       	movss  xmm1,DWORD PTR [rbp+0x4]
  405caa:	f3 0f 11 54 24 3c    	movss  DWORD PTR [rsp+0x3c],xmm2
  405cb0:	0f 8a 12 08 00 00    	jp     4064c8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x898>
  405cb6:	0f 85 0c 08 00 00    	jne    4064c8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x898>
  405cbc:	31 ed                	xor    ebp,ebp
  405cbe:	0f 2e c8             	ucomiss xmm1,xmm0
  405cc1:	f3 0f 11 4c 24 3c    	movss  DWORD PTR [rsp+0x3c],xmm1
  405cc7:	0f 8a db 07 00 00    	jp     4064a8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x878>
  405ccd:	0f 85 d5 07 00 00    	jne    4064a8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x878>
  405cd3:	31 c0                	xor    eax,eax
  405cd5:	49 03 5d 10          	add    rbx,QWORD PTR [r13+0x10]
  405cd9:	48 33 6b 30          	xor    rbp,QWORD PTR [rbx+0x30]
  405cdd:	48 31 e8             	xor    rax,rbp
  405ce0:	48 89 43 30          	mov    QWORD PTR [rbx+0x30],rax
  405ce4:	0f b7 43 28          	movzx  eax,WORD PTR [rbx+0x28]
  405ce8:	8d 50 01             	lea    edx,[rax+0x1]
  405ceb:	66 89 53 28          	mov    WORD PTR [rbx+0x28],dx
  405cef:	89 c2                	mov    edx,eax
  405cf1:	41 0f b7 c6          	movzx  eax,r14w
  405cf5:	c1 e2 10             	shl    edx,0x10
  405cf8:	09 d0                	or     eax,edx
  405cfa:	48 83 c4 48          	add    rsp,0x48
  405cfe:	5b                   	pop    rbx
  405cff:	5d                   	pop    rbp
  405d00:	41 5c                	pop    r12
  405d02:	41 5d                	pop    r13
  405d04:	41 5e                	pop    r14
  405d06:	41 5f                	pop    r15
  405d08:	c3                   	ret    
  405d09:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  405d10:	49 8b 4d 08          	mov    rcx,QWORD PTR [r13+0x8]
  405d14:	48 83 7e 30 00       	cmp    QWORD PTR [rsi+0x30],0x0
  405d19:	4d 8b 45 00          	mov    r8,QWORD PTR [r13+0x0]
  405d1d:	48 8d 04 09          	lea    rax,[rcx+rcx*1]
  405d21:	4e 8d 0c 85 00 00 00 	lea    r9,[r8*4+0x0]
  405d28:	00 
  405d29:	48 8d 14 08          	lea    rdx,[rax+rcx*1]
  405d2d:	0f 84 c5 07 00 00    	je     4064f8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x8c8>
  405d33:	49 39 d1             	cmp    r9,rdx
  405d36:	0f 83 14 07 00 00    	jae    406450 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x820>
  405d3c:	49 69 75 20 8f bc 00 	imul   rsi,QWORD PTR [r13+0x20],0xbc8f
  405d43:	00 
  405d44:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  405d4b:	00 00 00 
  405d4e:	4c 8d 71 ff          	lea    r14,[rcx-0x1]
  405d52:	48 89 f0             	mov    rax,rsi
  405d55:	48 f7 e2             	mul    rdx
  405d58:	48 89 f0             	mov    rax,rsi
  405d5b:	48 29 d0             	sub    rax,rdx
  405d5e:	48 d1 e8             	shr    rax,1
  405d61:	48 01 c2             	add    rdx,rax
  405d64:	48 c1 ea 1e          	shr    rdx,0x1e
  405d68:	48 89 d0             	mov    rax,rdx
  405d6b:	48 c1 e0 1f          	shl    rax,0x1f
  405d6f:	48 29 d0             	sub    rax,rdx
  405d72:	48 29 c6             	sub    rsi,rax
  405d75:	48 89 f2             	mov    rdx,rsi
  405d78:	49 89 75 20          	mov    QWORD PTR [r13+0x20],rsi
  405d7c:	49 21 f6             	and    r14,rsi
  405d7f:	49 8b 75 18          	mov    rsi,QWORD PTR [r13+0x18]
  405d83:	eb 1a                	jmp    405d9f <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x16f>
  405d85:	0f 1f 00             	nop    DWORD PTR [rax]
  405d88:	49 83 c6 01          	add    r14,0x1
  405d8c:	4d 89 f1             	mov    r9,r14
  405d8f:	4c 89 f0             	mov    rax,r14
  405d92:	49 29 c9             	sub    r9,rcx
  405d95:	49 39 ce             	cmp    r14,rcx
  405d98:	49 0f 43 c1          	cmovae rax,r9
  405d9c:	49 89 c6             	mov    r14,rax
  405d9f:	42 80 3c 36 00       	cmp    BYTE PTR [rsi+r14*1],0x0
  405da4:	4a 8d 04 36          	lea    rax,[rsi+r14*1]
  405da8:	75 de                	jne    405d88 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x158>
  405daa:	49 83 c0 01          	add    r8,0x1
  405dae:	45 31 c9             	xor    r9d,r9d
  405db1:	4d 89 45 00          	mov    QWORD PTR [r13+0x0],r8
  405db5:	c6 00 01             	mov    BYTE PTR [rax],0x1
  405db8:	4a 8d 04 f5 00 00 00 	lea    rax,[r14*8+0x0]
  405dbf:	00 
  405dc0:	4c 29 f0             	sub    rax,r14
  405dc3:	48 8d 04 c7          	lea    rax,[rdi+rax*8]
  405dc7:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x0
  405dce:	00 
  405dcf:	4d 8b 45 08          	mov    r8,QWORD PTR [r13+0x8]
  405dd3:	66 44 89 48 28       	mov    WORD PTR [rax+0x28],r9w
  405dd8:	4d 8b 4d 00          	mov    r9,QWORD PTR [r13+0x0]
  405ddc:	48 c7 40 20 ff ff ff 	mov    QWORD PTR [rax+0x20],0xffffffffffffffff
  405de3:	ff 
  405de4:	4b 8d 04 00          	lea    rax,[r8+r8*1]
  405de8:	4e 8d 14 8d 00 00 00 	lea    r10,[r9*4+0x0]
  405def:	00 
  405df0:	4a 8d 0c 00          	lea    rcx,[rax+r8*1]
  405df4:	49 39 ca             	cmp    r10,rcx
  405df7:	0f 83 f3 05 00 00    	jae    4063f0 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x7c0>
  405dfd:	48 69 ca 8f bc 00 00 	imul   rcx,rdx,0xbc8f
  405e04:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  405e0b:	00 00 00 
  405e0e:	48 89 c8             	mov    rax,rcx
  405e11:	48 f7 e2             	mul    rdx
  405e14:	48 89 c8             	mov    rax,rcx
  405e17:	48 29 d0             	sub    rax,rdx
  405e1a:	48 d1 e8             	shr    rax,1
  405e1d:	48 01 c2             	add    rdx,rax
  405e20:	48 c1 ea 1e          	shr    rdx,0x1e
  405e24:	48 89 d0             	mov    rax,rdx
  405e27:	48 c1 e0 1f          	shl    rax,0x1f
  405e2b:	48 29 d0             	sub    rax,rdx
  405e2e:	48 29 c1             	sub    rcx,rax
  405e31:	48 89 ca             	mov    rdx,rcx
  405e34:	49 89 4d 20          	mov    QWORD PTR [r13+0x20],rcx
  405e38:	49 8d 48 ff          	lea    rcx,[r8-0x1]
  405e3c:	48 21 d1             	and    rcx,rdx
  405e3f:	eb 1e                	jmp    405e5f <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x22f>
  405e41:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  405e48:	48 83 c1 01          	add    rcx,0x1
  405e4c:	49 89 ca             	mov    r10,rcx
  405e4f:	48 89 c8             	mov    rax,rcx
  405e52:	4d 29 c2             	sub    r10,r8
  405e55:	4c 39 c1             	cmp    rcx,r8
  405e58:	49 0f 43 c2          	cmovae rax,r10
  405e5c:	48 89 c1             	mov    rcx,rax
  405e5f:	80 3c 0e 00          	cmp    BYTE PTR [rsi+rcx*1],0x0
  405e63:	48 8d 04 0e          	lea    rax,[rsi+rcx*1]
  405e67:	75 df                	jne    405e48 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x218>
  405e69:	49 83 c1 01          	add    r9,0x1
  405e6d:	45 31 c0             	xor    r8d,r8d
  405e70:	41 89 cc             	mov    r12d,ecx
  405e73:	4d 89 4d 00          	mov    QWORD PTR [r13+0x0],r9
  405e77:	c6 00 01             	mov    BYTE PTR [rax],0x1
  405e7a:	48 8d 04 cd 00 00 00 	lea    rax,[rcx*8+0x0]
  405e81:	00 
  405e82:	48 29 c8             	sub    rax,rcx
  405e85:	48 8d 04 c7          	lea    rax,[rdi+rax*8]
  405e89:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x0
  405e90:	00 
  405e91:	4d 8b 4d 08          	mov    r9,QWORD PTR [r13+0x8]
  405e95:	4d 8b 55 00          	mov    r10,QWORD PTR [r13+0x0]
  405e99:	48 c7 40 20 ff ff ff 	mov    QWORD PTR [rax+0x20],0xffffffffffffffff
  405ea0:	ff 
  405ea1:	66 44 89 40 28       	mov    WORD PTR [rax+0x28],r8w
  405ea6:	4b 8d 04 09          	lea    rax,[r9+r9*1]
  405eaa:	4e 8d 1c 95 00 00 00 	lea    r11,[r10*4+0x0]
  405eb1:	00 
  405eb2:	4a 8d 0c 08          	lea    rcx,[rax+r9*1]
  405eb6:	49 39 cb             	cmp    r11,rcx
  405eb9:	0f 83 d1 04 00 00    	jae    406390 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x760>
  405ebf:	48 69 ca 8f bc 00 00 	imul   rcx,rdx,0xbc8f
  405ec6:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  405ecd:	00 00 00 
  405ed0:	48 89 c8             	mov    rax,rcx
  405ed3:	48 f7 e2             	mul    rdx
  405ed6:	48 89 c8             	mov    rax,rcx
  405ed9:	48 29 d0             	sub    rax,rdx
  405edc:	48 d1 e8             	shr    rax,1
  405edf:	48 01 c2             	add    rdx,rax
  405ee2:	48 c1 ea 1e          	shr    rdx,0x1e
  405ee6:	48 89 d0             	mov    rax,rdx
  405ee9:	48 c1 e0 1f          	shl    rax,0x1f
  405eed:	48 29 d0             	sub    rax,rdx
  405ef0:	48 29 c1             	sub    rcx,rax
  405ef3:	48 89 ca             	mov    rdx,rcx
  405ef6:	49 89 4d 20          	mov    QWORD PTR [r13+0x20],rcx
  405efa:	49 8d 49 ff          	lea    rcx,[r9-0x1]
  405efe:	48 21 d1             	and    rcx,rdx
  405f01:	eb 1c                	jmp    405f1f <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x2ef>
  405f03:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  405f08:	48 83 c1 01          	add    rcx,0x1
  405f0c:	49 89 cb             	mov    r11,rcx
  405f0f:	48 89 c8             	mov    rax,rcx
  405f12:	4d 29 cb             	sub    r11,r9
  405f15:	4c 39 c9             	cmp    rcx,r9
  405f18:	49 0f 43 c3          	cmovae rax,r11
  405f1c:	48 89 c1             	mov    rcx,rax
  405f1f:	80 3c 0e 00          	cmp    BYTE PTR [rsi+rcx*1],0x0
  405f23:	48 8d 04 0e          	lea    rax,[rsi+rcx*1]
  405f27:	75 df                	jne    405f08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x2d8>
  405f29:	49 83 c2 01          	add    r10,0x1
  405f2d:	45 31 ff             	xor    r15d,r15d
  405f30:	4d 89 55 00          	mov    QWORD PTR [r13+0x0],r10
  405f34:	c6 00 01             	mov    BYTE PTR [rax],0x1
  405f37:	48 8d 04 cd 00 00 00 	lea    rax,[rcx*8+0x0]
  405f3e:	00 
  405f3f:	48 29 c8             	sub    rax,rcx
  405f42:	48 8d 04 c7          	lea    rax,[rdi+rax*8]
  405f46:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x0
  405f4d:	00 
  405f4e:	66 44 89 78 28       	mov    WORD PTR [rax+0x28],r15w
  405f53:	41 89 cf             	mov    r15d,ecx
  405f56:	49 8b 4d 08          	mov    rcx,QWORD PTR [r13+0x8]
  405f5a:	4d 8b 4d 00          	mov    r9,QWORD PTR [r13+0x0]
  405f5e:	48 c7 40 20 ff ff ff 	mov    QWORD PTR [rax+0x20],0xffffffffffffffff
  405f65:	ff 
  405f66:	48 8d 04 09          	lea    rax,[rcx+rcx*1]
  405f6a:	4e 8d 1c 8d 00 00 00 	lea    r11,[r9*4+0x0]
  405f71:	00 
  405f72:	4c 8d 14 08          	lea    r10,[rax+rcx*1]
  405f76:	4d 39 d3             	cmp    r11,r10
  405f79:	0f 83 b1 03 00 00    	jae    406330 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x700>
  405f7f:	4c 69 d2 8f bc 00 00 	imul   r10,rdx,0xbc8f
  405f86:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  405f8d:	00 00 00 
  405f90:	4c 89 d0             	mov    rax,r10
  405f93:	48 f7 e2             	mul    rdx
  405f96:	4c 89 d0             	mov    rax,r10
  405f99:	48 29 d0             	sub    rax,rdx
  405f9c:	48 d1 e8             	shr    rax,1
  405f9f:	48 01 c2             	add    rdx,rax
  405fa2:	48 c1 ea 1e          	shr    rdx,0x1e
  405fa6:	48 89 d0             	mov    rax,rdx
  405fa9:	48 c1 e0 1f          	shl    rax,0x1f
  405fad:	48 29 d0             	sub    rax,rdx
  405fb0:	4c 89 d2             	mov    rdx,r10
  405fb3:	48 29 c2             	sub    rdx,rax
  405fb6:	48 8d 41 ff          	lea    rax,[rcx-0x1]
  405fba:	49 89 55 20          	mov    QWORD PTR [r13+0x20],rdx
  405fbe:	48 21 c2             	and    rdx,rax
  405fc1:	eb 1c                	jmp    405fdf <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x3af>
  405fc3:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  405fc8:	48 83 c2 01          	add    rdx,0x1
  405fcc:	49 89 d2             	mov    r10,rdx
  405fcf:	48 89 d0             	mov    rax,rdx
  405fd2:	49 29 ca             	sub    r10,rcx
  405fd5:	48 39 ca             	cmp    rdx,rcx
  405fd8:	49 0f 43 c2          	cmovae rax,r10
  405fdc:	48 89 c2             	mov    rdx,rax
  405fdf:	80 3c 16 00          	cmp    BYTE PTR [rsi+rdx*1],0x0
  405fe3:	48 8d 04 16          	lea    rax,[rsi+rdx*1]
  405fe7:	75 df                	jne    405fc8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x398>
  405fe9:	49 83 c1 01          	add    r9,0x1
  405fed:	48 c7 c1 ff ff ff ff 	mov    rcx,0xffffffffffffffff
  405ff4:	45 31 db             	xor    r11d,r11d
  405ff7:	4d 89 4d 00          	mov    QWORD PTR [r13+0x0],r9
  405ffb:	c6 00 01             	mov    BYTE PTR [rax],0x1
  405ffe:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  406005:	00 
  406006:	66 0f 6e 64 24 18    	movd   xmm4,DWORD PTR [rsp+0x18]
  40600c:	48 29 d0             	sub    rax,rdx
  40600f:	f3 0f 10 2d ed 19 00 	movss  xmm5,DWORD PTR [rip+0x19ed]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  406016:	00 
  406017:	48 8d 04 c7          	lea    rax,[rdi+rax*8]
  40601b:	66 0f 6e 5c 24 10    	movd   xmm3,DWORD PTR [rsp+0x10]
  406021:	f3 0f 59 e5          	mulss  xmm4,xmm5
  406025:	48 01 df             	add    rdi,rbx
  406028:	48 89 48 20          	mov    QWORD PTR [rax+0x20],rcx
  40602c:	66 44 89 58 28       	mov    WORD PTR [rax+0x28],r11w
  406031:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x0
  406038:	00 
  406039:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  40603e:	66 44 89 77 20       	mov    WORD PTR [rdi+0x20],r14w
  406043:	66 44 89 67 22       	mov    WORD PTR [rdi+0x22],r12w
  406048:	45 31 f6             	xor    r14d,r14d
  40604b:	66 44 89 7f 24       	mov    WORD PTR [rdi+0x24],r15w
  406050:	66 89 57 26          	mov    WORD PTR [rdi+0x26],dx
  406054:	48 c1 e8 20          	shr    rax,0x20
  406058:	66 89 4f 28          	mov    WORD PTR [rdi+0x28],cx
  40605c:	89 44 24 24          	mov    DWORD PTR [rsp+0x24],eax
  406060:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
  406065:	f3 0f 10 74 24 24    	movss  xmm6,DWORD PTR [rsp+0x24]
  40606b:	48 c1 e8 20          	shr    rax,0x20
  40606f:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  406074:	f3 0f 59 6c 24 10    	mulss  xmm5,DWORD PTR [rsp+0x10]
  40607a:	4a 8d 34 37          	lea    rsi,[rdi+r14*1]
  40607e:	31 d2                	xor    edx,edx
  406080:	f3 0f 11 5c 24 2c    	movss  DWORD PTR [rsp+0x2c],xmm3
  406086:	f3 0f 11 74 24 28    	movss  DWORD PTR [rsp+0x28],xmm6
  40608c:	f3 0f 10 56 04       	movss  xmm2,DWORD PTR [rsi+0x4]
  406091:	0f 2f d6             	comiss xmm2,xmm6
  406094:	f3 0f 10 0e          	movss  xmm1,DWORD PTR [rsi]
  406098:	66 0f ef d2          	pxor   xmm2,xmm2
  40609c:	f3 0f 7e 06          	movq   xmm0,QWORD PTR [rsi]
  4060a0:	f3 0f 11 64 24 24    	movss  DWORD PTR [rsp+0x24],xmm4
  4060a6:	0f 97 c2             	seta   dl
  4060a9:	31 c0                	xor    eax,eax
  4060ab:	f3 0f 11 6c 24 18    	movss  DWORD PTR [rsp+0x18],xmm5
  4060b1:	01 d2                	add    edx,edx
  4060b3:	0f 2f cb             	comiss xmm1,xmm3
  4060b6:	66 0f ef c9          	pxor   xmm1,xmm1
  4060ba:	0f 97 c0             	seta   al
  4060bd:	49 83 c6 08          	add    r14,0x8
  4060c1:	09 c2                	or     edx,eax
  4060c3:	8d 04 12             	lea    eax,[rdx+rdx*1]
  4060c6:	83 e0 02             	and    eax,0x2
  4060c9:	83 e8 01             	sub    eax,0x1
  4060cc:	f3 0f 2a c8          	cvtsi2ss xmm1,eax
  4060d0:	89 d0                	mov    eax,edx
  4060d2:	48 63 d2             	movsxd rdx,edx
  4060d5:	83 e0 02             	and    eax,0x2
  4060d8:	0f b7 54 57 20       	movzx  edx,WORD PTR [rdi+rdx*2+0x20]
  4060dd:	4c 89 ef             	mov    rdi,r13
  4060e0:	83 e8 01             	sub    eax,0x1
  4060e3:	f3 0f 2a d0          	cvtsi2ss xmm2,eax
  4060e7:	f3 0f 59 cc          	mulss  xmm1,xmm4
  4060eb:	f3 0f 59 d5          	mulss  xmm2,xmm5
  4060ef:	f3 0f 58 cb          	addss  xmm1,xmm3
  4060f3:	f3 0f 58 d6          	addss  xmm2,xmm6
  4060f7:	66 0f 7e c8          	movd   eax,xmm1
  4060fb:	f3 0f 11 54 24 10    	movss  DWORD PTR [rsp+0x10],xmm2
  406101:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
  406106:	48 c1 e1 20          	shl    rcx,0x20
  40610a:	48 09 c8             	or     rax,rcx
  40610d:	66 0f 7e e9          	movd   ecx,xmm5
  406111:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  406116:	49 89 c8             	mov    r8,rcx
  406119:	66 0f 7e e1          	movd   ecx,xmm4
  40611d:	49 c1 e0 20          	shl    r8,0x20
  406121:	f3 0f 7e 4c 24 10    	movq   xmm1,QWORD PTR [rsp+0x10]
  406127:	4c 09 c1             	or     rcx,r8
  40612a:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
  40612f:	f3 0f 7e 54 24 10    	movq   xmm2,QWORD PTR [rsp+0x10]
  406135:	e8 f6 fa ff ff       	call   405c30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)>
  40613a:	49 83 fe 20          	cmp    r14,0x20
  40613e:	f3 0f 10 6c 24 18    	movss  xmm5,DWORD PTR [rsp+0x18]
  406144:	f3 0f 10 64 24 24    	movss  xmm4,DWORD PTR [rsp+0x24]
  40614a:	f3 0f 10 74 24 28    	movss  xmm6,DWORD PTR [rsp+0x28]
  406150:	f3 0f 10 5c 24 2c    	movss  xmm3,DWORD PTR [rsp+0x2c]
  406156:	74 10                	je     406168 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x538>
  406158:	49 8b 7d 10          	mov    rdi,QWORD PTR [r13+0x10]
  40615c:	48 01 df             	add    rdi,rbx
  40615f:	e9 16 ff ff ff       	jmp    40607a <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x44a>
  406164:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  406168:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  40616d:	49 03 5d 10          	add    rbx,QWORD PTR [r13+0x10]
  406171:	31 f6                	xor    esi,esi
  406173:	ba 00 00 00 00       	mov    edx,0x0
  406178:	48 c1 e8 20          	shr    rax,0x20
  40617c:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  406181:	f3 0f 7e 44 24 10    	movq   xmm0,QWORD PTR [rsp+0x10]
  406187:	0f 2e f0             	ucomiss xmm6,xmm0
  40618a:	66 0f 6e 44 24 08    	movd   xmm0,DWORD PTR [rsp+0x8]
  406190:	40 0f 9b c6          	setnp  sil
  406194:	0f 43 f2             	cmovae esi,edx
  406197:	31 c0                	xor    eax,eax
  406199:	01 f6                	add    esi,esi
  40619b:	0f 2e d8             	ucomiss xmm3,xmm0
  40619e:	66 0f ef c0          	pxor   xmm0,xmm0
  4061a2:	0f 9b c0             	setnp  al
  4061a5:	0f 43 c2             	cmovae eax,edx
  4061a8:	09 c6                	or     esi,eax
  4061aa:	8d 04 36             	lea    eax,[rsi+rsi*1]
  4061ad:	83 e0 02             	and    eax,0x2
  4061b0:	83 e8 01             	sub    eax,0x1
  4061b3:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
  4061b7:	89 f0                	mov    eax,esi
  4061b9:	48 63 f6             	movsxd rsi,esi
  4061bc:	83 e0 02             	and    eax,0x2
  4061bf:	83 e8 01             	sub    eax,0x1
  4061c2:	f3 0f 59 c4          	mulss  xmm0,xmm4
  4061c6:	f3 0f 58 d8          	addss  xmm3,xmm0
  4061ca:	66 0f ef c0          	pxor   xmm0,xmm0
  4061ce:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
  4061d2:	66 0f 7e d9          	movd   ecx,xmm3
  4061d6:	f3 0f 59 c5          	mulss  xmm0,xmm5
  4061da:	f3 0f 58 c6          	addss  xmm0,xmm6
  4061de:	f3 0f 11 44 24 10    	movss  DWORD PTR [rsp+0x10],xmm0
  4061e4:	48 8b 44 24 10       	mov    rax,QWORD PTR [rsp+0x10]
  4061e9:	48 c1 e0 20          	shl    rax,0x20
  4061ed:	48 09 c1             	or     rcx,rax
  4061f0:	66 0f 7e e8          	movd   eax,xmm5
  4061f4:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
  4061f9:	48 89 c2             	mov    rdx,rax
  4061fc:	66 0f 7e e0          	movd   eax,xmm4
  406200:	48 c1 e2 20          	shl    rdx,0x20
  406204:	f3 0f 7e 4c 24 10    	movq   xmm1,QWORD PTR [rsp+0x10]
  40620a:	48 09 d0             	or     rax,rdx
  40620d:	0f b7 54 73 20       	movzx  edx,WORD PTR [rbx+rsi*2+0x20]
  406212:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  406217:	f3 0f 7e 54 24 10    	movq   xmm2,QWORD PTR [rsp+0x10]
  40621d:	48 89 ee             	mov    rsi,rbp
  406220:	4c 89 ef             	mov    rdi,r13
  406223:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [rsp+0x8]
  406229:	e8 02 fa ff ff       	call   405c30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)>
  40622e:	48 83 c4 48          	add    rsp,0x48
  406232:	5b                   	pop    rbx
  406233:	5d                   	pop    rbp
  406234:	41 5c                	pop    r12
  406236:	41 5d                	pop    r13
  406238:	41 5e                	pop    r14
  40623a:	41 5f                	pop    r15
  40623c:	c3                   	ret    
  40623d:	0f 1f 00             	nop    DWORD PTR [rax]
  406240:	66 48 0f 7e c8       	movq   rax,xmm1
  406245:	66 0f 6e 5c 24 10    	movd   xmm3,DWORD PTR [rsp+0x10]
  40624b:	31 d2                	xor    edx,edx
  40624d:	b9 00 00 00 00       	mov    ecx,0x0
  406252:	66 0f 6e 4c 24 18    	movd   xmm1,DWORD PTR [rsp+0x18]
  406258:	48 c1 e8 20          	shr    rax,0x20
  40625c:	89 44 24 10          	mov    DWORD PTR [rsp+0x10],eax
  406260:	66 48 0f 7e c0       	movq   rax,xmm0
  406265:	f3 0f 10 64 24 10    	movss  xmm4,DWORD PTR [rsp+0x10]
  40626b:	48 c1 e8 20          	shr    rax,0x20
  40626f:	89 44 24 10          	mov    DWORD PTR [rsp+0x10],eax
  406273:	f3 0f 10 44 24 10    	movss  xmm0,DWORD PTR [rsp+0x10]
  406279:	0f 2f c4             	comiss xmm0,xmm4
  40627c:	66 0f 6e 44 24 08    	movd   xmm0,DWORD PTR [rsp+0x8]
  406282:	0f 97 c2             	seta   dl
  406285:	31 c0                	xor    eax,eax
  406287:	01 d2                	add    edx,edx
  406289:	0f 2e d8             	ucomiss xmm3,xmm0
  40628c:	f3 0f 10 05 70 17 00 	movss  xmm0,DWORD PTR [rip+0x1770]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  406293:	00 
  406294:	f3 0f 59 c8          	mulss  xmm1,xmm0
  406298:	0f 9b c0             	setnp  al
  40629b:	0f 43 c1             	cmovae eax,ecx
  40629e:	09 c2                	or     edx,eax
  4062a0:	66 48 0f 7e d0       	movq   rax,xmm2
  4062a5:	48 c1 e8 20          	shr    rax,0x20
  4062a9:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  4062ae:	8d 04 12             	lea    eax,[rdx+rdx*1]
  4062b1:	f3 0f 10 54 24 10    	movss  xmm2,DWORD PTR [rsp+0x10]
  4062b7:	f3 0f 59 d0          	mulss  xmm2,xmm0
  4062bb:	83 e0 02             	and    eax,0x2
  4062be:	66 0f ef c0          	pxor   xmm0,xmm0
  4062c2:	83 e8 01             	sub    eax,0x1
  4062c5:	f3 0f 2a c0          	cvtsi2ss xmm0,eax
  4062c9:	89 d0                	mov    eax,edx
  4062cb:	48 63 d2             	movsxd rdx,edx
  4062ce:	83 e0 02             	and    eax,0x2
  4062d1:	0f b7 54 56 20       	movzx  edx,WORD PTR [rsi+rdx*2+0x20]
  4062d6:	83 e8 01             	sub    eax,0x1
  4062d9:	f3 0f 59 c1          	mulss  xmm0,xmm1
  4062dd:	f3 0f 58 c3          	addss  xmm0,xmm3
  4062e1:	66 0f ef db          	pxor   xmm3,xmm3
  4062e5:	f3 0f 2a d8          	cvtsi2ss xmm3,eax
  4062e9:	66 0f 7e c0          	movd   eax,xmm0
  4062ed:	f3 0f 59 da          	mulss  xmm3,xmm2
  4062f1:	f3 0f 58 dc          	addss  xmm3,xmm4
  4062f5:	f3 0f 11 5c 24 10    	movss  DWORD PTR [rsp+0x10],xmm3
  4062fb:	48 8b 4c 24 10       	mov    rcx,QWORD PTR [rsp+0x10]
  406300:	48 c1 e1 20          	shl    rcx,0x20
  406304:	48 09 c8             	or     rax,rcx
  406307:	66 0f 7e d1          	movd   ecx,xmm2
  40630b:	48 89 44 24 10       	mov    QWORD PTR [rsp+0x10],rax
  406310:	48 89 cf             	mov    rdi,rcx
  406313:	66 0f 7e c9          	movd   ecx,xmm1
  406317:	48 c1 e7 20          	shl    rdi,0x20
  40631b:	f3 0f 7e 4c 24 10    	movq   xmm1,QWORD PTR [rsp+0x10]
  406321:	48 09 f9             	or     rcx,rdi
  406324:	48 89 4c 24 10       	mov    QWORD PTR [rsp+0x10],rcx
  406329:	e9 e9 fe ff ff       	jmp    406217 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x5e7>
  40632e:	66 90                	xchg   ax,ax
  406330:	48 c1 e1 04          	shl    rcx,0x4
  406334:	48 29 c1             	sub    rcx,rax
  406337:	48 8d 34 cd 00 00 00 	lea    rsi,[rcx*8+0x0]
  40633e:	00 
  40633f:	e8 5c ac ff ff       	call   400fa0 <realloc@plt>
  406344:	49 89 45 10          	mov    QWORD PTR [r13+0x10],rax
  406348:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  40634c:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
  406350:	48 8d 34 00          	lea    rsi,[rax+rax*1]
  406354:	e8 47 ac ff ff       	call   400fa0 <realloc@plt>
  406359:	49 8b 55 08          	mov    rdx,QWORD PTR [r13+0x8]
  40635d:	31 f6                	xor    esi,esi
  40635f:	49 89 45 18          	mov    QWORD PTR [r13+0x18],rax
  406363:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
  406367:	e8 e4 aa ff ff       	call   400e50 <memset@plt>
  40636c:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  406370:	49 8b 55 20          	mov    rdx,QWORD PTR [r13+0x20]
  406374:	49 8b 75 18          	mov    rsi,QWORD PTR [r13+0x18]
  406378:	4d 8b 4d 00          	mov    r9,QWORD PTR [r13+0x0]
  40637c:	49 8b 7d 10          	mov    rdi,QWORD PTR [r13+0x10]
  406380:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
  406384:	49 89 4d 08          	mov    QWORD PTR [r13+0x8],rcx
  406388:	e9 f2 fb ff ff       	jmp    405f7f <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x34f>
  40638d:	0f 1f 00             	nop    DWORD PTR [rax]
  406390:	49 c1 e1 04          	shl    r9,0x4
  406394:	49 29 c1             	sub    r9,rax
  406397:	4a 8d 34 cd 00 00 00 	lea    rsi,[r9*8+0x0]
  40639e:	00 
  40639f:	e8 fc ab ff ff       	call   400fa0 <realloc@plt>
  4063a4:	49 89 45 10          	mov    QWORD PTR [r13+0x10],rax
  4063a8:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  4063ac:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
  4063b0:	48 8d 34 00          	lea    rsi,[rax+rax*1]
  4063b4:	e8 e7 ab ff ff       	call   400fa0 <realloc@plt>
  4063b9:	49 8b 55 08          	mov    rdx,QWORD PTR [r13+0x8]
  4063bd:	31 f6                	xor    esi,esi
  4063bf:	49 89 45 18          	mov    QWORD PTR [r13+0x18],rax
  4063c3:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
  4063c7:	e8 84 aa ff ff       	call   400e50 <memset@plt>
  4063cc:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  4063d0:	49 8b 55 20          	mov    rdx,QWORD PTR [r13+0x20]
  4063d4:	49 8b 75 18          	mov    rsi,QWORD PTR [r13+0x18]
  4063d8:	4d 8b 55 00          	mov    r10,QWORD PTR [r13+0x0]
  4063dc:	49 8b 7d 10          	mov    rdi,QWORD PTR [r13+0x10]
  4063e0:	4c 8d 0c 00          	lea    r9,[rax+rax*1]
  4063e4:	4d 89 4d 08          	mov    QWORD PTR [r13+0x8],r9
  4063e8:	e9 d2 fa ff ff       	jmp    405ebf <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x28f>
  4063ed:	0f 1f 00             	nop    DWORD PTR [rax]
  4063f0:	49 c1 e0 04          	shl    r8,0x4
  4063f4:	49 29 c0             	sub    r8,rax
  4063f7:	4a 8d 34 c5 00 00 00 	lea    rsi,[r8*8+0x0]
  4063fe:	00 
  4063ff:	e8 9c ab ff ff       	call   400fa0 <realloc@plt>
  406404:	49 89 45 10          	mov    QWORD PTR [r13+0x10],rax
  406408:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  40640c:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
  406410:	48 8d 34 00          	lea    rsi,[rax+rax*1]
  406414:	e8 87 ab ff ff       	call   400fa0 <realloc@plt>
  406419:	49 8b 55 08          	mov    rdx,QWORD PTR [r13+0x8]
  40641d:	31 f6                	xor    esi,esi
  40641f:	49 89 45 18          	mov    QWORD PTR [r13+0x18],rax
  406423:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
  406427:	e8 24 aa ff ff       	call   400e50 <memset@plt>
  40642c:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  406430:	49 8b 55 20          	mov    rdx,QWORD PTR [r13+0x20]
  406434:	49 8b 75 18          	mov    rsi,QWORD PTR [r13+0x18]
  406438:	4d 8b 4d 00          	mov    r9,QWORD PTR [r13+0x0]
  40643c:	49 8b 7d 10          	mov    rdi,QWORD PTR [r13+0x10]
  406440:	4c 8d 04 00          	lea    r8,[rax+rax*1]
  406444:	4d 89 45 08          	mov    QWORD PTR [r13+0x8],r8
  406448:	e9 b0 f9 ff ff       	jmp    405dfd <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x1cd>
  40644d:	0f 1f 00             	nop    DWORD PTR [rax]
  406450:	48 c1 e1 04          	shl    rcx,0x4
  406454:	48 29 c1             	sub    rcx,rax
  406457:	48 8d 34 cd 00 00 00 	lea    rsi,[rcx*8+0x0]
  40645e:	00 
  40645f:	e8 3c ab ff ff       	call   400fa0 <realloc@plt>
  406464:	49 89 45 10          	mov    QWORD PTR [r13+0x10],rax
  406468:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  40646c:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
  406470:	48 8d 34 00          	lea    rsi,[rax+rax*1]
  406474:	e8 27 ab ff ff       	call   400fa0 <realloc@plt>
  406479:	49 8b 55 08          	mov    rdx,QWORD PTR [r13+0x8]
  40647d:	49 89 45 18          	mov    QWORD PTR [r13+0x18],rax
  406481:	31 f6                	xor    esi,esi
  406483:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
  406487:	e8 c4 a9 ff ff       	call   400e50 <memset@plt>
  40648c:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  406490:	4d 8b 45 00          	mov    r8,QWORD PTR [r13+0x0]
  406494:	49 8b 7d 10          	mov    rdi,QWORD PTR [r13+0x10]
  406498:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
  40649c:	49 89 4d 08          	mov    QWORD PTR [r13+0x8],rcx
  4064a0:	e9 97 f8 ff ff       	jmp    405d3c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x10c>
  4064a5:	0f 1f 00             	nop    DWORD PTR [rax]
  4064a8:	48 8d 7c 24 3c       	lea    rdi,[rsp+0x3c]
  4064ad:	ba 07 69 0f c7       	mov    edx,0xc70f6907
  4064b2:	be 04 00 00 00       	mov    esi,0x4
  4064b7:	e8 84 a9 ff ff       	call   400e40 <std::_Hash_bytes(void const*, unsigned long, unsigned long)@plt>
  4064bc:	e9 14 f8 ff ff       	jmp    405cd5 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0xa5>
  4064c1:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  4064c8:	48 8d 7c 24 3c       	lea    rdi,[rsp+0x3c]
  4064cd:	ba 07 69 0f c7       	mov    edx,0xc70f6907
  4064d2:	be 04 00 00 00       	mov    esi,0x4
  4064d7:	f3 0f 11 4c 24 08    	movss  DWORD PTR [rsp+0x8],xmm1
  4064dd:	e8 5e a9 ff ff       	call   400e40 <std::_Hash_bytes(void const*, unsigned long, unsigned long)@plt>
  4064e2:	f3 0f 10 4c 24 08    	movss  xmm1,DWORD PTR [rsp+0x8]
  4064e8:	48 8d 2c 00          	lea    rbp,[rax+rax*1]
  4064ec:	66 0f ef c0          	pxor   xmm0,xmm0
  4064f0:	e9 c9 f7 ff ff       	jmp    405cbe <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x8e>
  4064f5:	0f 1f 00             	nop    DWORD PTR [rax]
  4064f8:	41 ba fe ff ff ff    	mov    r10d,0xfffffffe
  4064fe:	49 39 d1             	cmp    r9,rdx
  406501:	66 44 89 56 28       	mov    WORD PTR [rsi+0x28],r10w
  406506:	0f 83 dc 00 00 00    	jae    4065e8 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x9b8>
  40650c:	4d 69 4d 20 8f bc 00 	imul   r9,QWORD PTR [r13+0x20],0xbc8f
  406513:	00 
  406514:	48 ba 05 00 00 00 02 	movabs rdx,0x200000005
  40651b:	00 00 00 
  40651e:	4c 89 c8             	mov    rax,r9
  406521:	48 f7 e2             	mul    rdx
  406524:	4c 89 c8             	mov    rax,r9
  406527:	48 29 d0             	sub    rax,rdx
  40652a:	48 d1 e8             	shr    rax,1
  40652d:	48 01 c2             	add    rdx,rax
  406530:	48 c1 ea 1e          	shr    rdx,0x1e
  406534:	48 89 d0             	mov    rax,rdx
  406537:	48 c1 e0 1f          	shl    rax,0x1f
  40653b:	48 29 d0             	sub    rax,rdx
  40653e:	4c 89 ca             	mov    rdx,r9
  406541:	48 29 c2             	sub    rdx,rax
  406544:	48 8d 41 ff          	lea    rax,[rcx-0x1]
  406548:	49 89 55 20          	mov    QWORD PTR [r13+0x20],rdx
  40654c:	48 21 c2             	and    rdx,rax
  40654f:	49 8b 45 18          	mov    rax,QWORD PTR [r13+0x18]
  406553:	eb 14                	jmp    406569 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x939>
  406555:	0f 1f 00             	nop    DWORD PTR [rax]
  406558:	48 83 c2 01          	add    rdx,0x1
  40655c:	49 89 d2             	mov    r10,rdx
  40655f:	49 29 ca             	sub    r10,rcx
  406562:	48 39 ca             	cmp    rdx,rcx
  406565:	49 0f 43 d2          	cmovae rdx,r10
  406569:	80 3c 10 00          	cmp    BYTE PTR [rax+rdx*1],0x0
  40656d:	4c 8d 0c 10          	lea    r9,[rax+rdx*1]
  406571:	75 e5                	jne    406558 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x928>
  406573:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  40657a:	00 
  40657b:	49 83 c0 01          	add    r8,0x1
  40657f:	31 c9                	xor    ecx,ecx
  406581:	4d 89 45 00          	mov    QWORD PTR [r13+0x0],r8
  406585:	f3 0f 7e 4c 24 10    	movq   xmm1,QWORD PTR [rsp+0x10]
  40658b:	48 29 d0             	sub    rax,rdx
  40658e:	41 c6 01 01          	mov    BYTE PTR [r9],0x1
  406592:	48 8d 04 c7          	lea    rax,[rdi+rax*8]
  406596:	f3 0f 7e 54 24 18    	movq   xmm2,QWORD PTR [rsp+0x18]
  40659c:	f3 0f 7e 44 24 08    	movq   xmm0,QWORD PTR [rsp+0x8]
  4065a2:	4c 89 ef             	mov    rdi,r13
  4065a5:	66 89 48 28          	mov    WORD PTR [rax+0x28],cx
  4065a9:	48 c7 40 20 ff ff ff 	mov    QWORD PTR [rax+0x20],0xffffffffffffffff
  4065b0:	ff 
  4065b1:	48 c7 40 30 00 00 00 	mov    QWORD PTR [rax+0x30],0x0
  4065b8:	00 
  4065b9:	66 89 56 20          	mov    WORD PTR [rsi+0x20],dx
  4065bd:	0f b7 d2             	movzx  edx,dx
  4065c0:	48 89 ee             	mov    rsi,rbp
  4065c3:	e8 68 f6 ff ff       	call   405c30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)>
  4065c8:	e9 2d f7 ff ff       	jmp    405cfa <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0xca>
  4065cd:	0f 1f 00             	nop    DWORD PTR [rax]
  4065d0:	0f b7 56 20          	movzx  edx,WORD PTR [rsi+0x20]
  4065d4:	4c 89 ef             	mov    rdi,r13
  4065d7:	48 89 ee             	mov    rsi,rbp
  4065da:	e8 51 f6 ff ff       	call   405c30 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)>
  4065df:	e9 16 f7 ff ff       	jmp    405cfa <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0xca>
  4065e4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4065e8:	48 c1 e1 04          	shl    rcx,0x4
  4065ec:	48 29 c1             	sub    rcx,rax
  4065ef:	48 8d 34 cd 00 00 00 	lea    rsi,[rcx*8+0x0]
  4065f6:	00 
  4065f7:	e8 a4 a9 ff ff       	call   400fa0 <realloc@plt>
  4065fc:	49 89 45 10          	mov    QWORD PTR [r13+0x10],rax
  406600:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  406604:	49 8b 7d 18          	mov    rdi,QWORD PTR [r13+0x18]
  406608:	48 8d 34 00          	lea    rsi,[rax+rax*1]
  40660c:	e8 8f a9 ff ff       	call   400fa0 <realloc@plt>
  406611:	49 8b 55 08          	mov    rdx,QWORD PTR [r13+0x8]
  406615:	31 f6                	xor    esi,esi
  406617:	49 89 45 18          	mov    QWORD PTR [r13+0x18],rax
  40661b:	48 8d 3c 10          	lea    rdi,[rax+rdx*1]
  40661f:	e8 2c a8 ff ff       	call   400e50 <memset@plt>
  406624:	49 8b 45 08          	mov    rax,QWORD PTR [r13+0x8]
  406628:	49 8b 7d 10          	mov    rdi,QWORD PTR [r13+0x10]
  40662c:	4d 8b 45 00          	mov    r8,QWORD PTR [r13+0x0]
  406630:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
  406634:	48 8d 34 1f          	lea    rsi,[rdi+rbx*1]
  406638:	49 89 4d 08          	mov    QWORD PTR [r13+0x8],rcx
  40663c:	e9 cb fe ff ff       	jmp    40650c <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&, glm::tvec2<float, (glm::precision)0>, unsigned short, zekku::AABB<float>)+0x8dc>
  406641:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  406648:	00 00 00 
  40664b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>:
  406650:	41 57                	push   r15
  406652:	41 56                	push   r14
  406654:	41 55                	push   r13
  406656:	41 54                	push   r12
  406658:	55                   	push   rbp
  406659:	53                   	push   rbx
  40665a:	48 83 ec 18          	sub    rsp,0x18
  40665e:	48 8b 5f 08          	mov    rbx,QWORD PTR [rdi+0x8]
  406662:	48 3b 5f 10          	cmp    rbx,QWORD PTR [rdi+0x10]
  406666:	74 20                	je     406688 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0x38>
  406668:	8b 06                	mov    eax,DWORD PTR [rsi]
  40666a:	48 83 c3 04          	add    rbx,0x4
  40666e:	89 43 fc             	mov    DWORD PTR [rbx-0x4],eax
  406671:	48 89 5f 08          	mov    QWORD PTR [rdi+0x8],rbx
  406675:	48 83 c4 18          	add    rsp,0x18
  406679:	5b                   	pop    rbx
  40667a:	5d                   	pop    rbp
  40667b:	41 5c                	pop    r12
  40667d:	41 5d                	pop    r13
  40667f:	41 5e                	pop    r14
  406681:	41 5f                	pop    r15
  406683:	c3                   	ret    
  406684:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  406688:	4c 8b 3f             	mov    r15,QWORD PTR [rdi]
  40668b:	48 89 da             	mov    rdx,rbx
  40668e:	49 89 f4             	mov    r12,rsi
  406691:	48 89 fd             	mov    rbp,rdi
  406694:	4c 29 fa             	sub    rdx,r15
  406697:	48 89 d0             	mov    rax,rdx
  40669a:	48 c1 f8 02          	sar    rax,0x2
  40669e:	48 85 c0             	test   rax,rax
  4066a1:	0f 84 89 00 00 00    	je     406730 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0xe0>
  4066a7:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
  4066ab:	49 c7 c6 fc ff ff ff 	mov    r14,0xfffffffffffffffc
  4066b2:	48 39 c8             	cmp    rax,rcx
  4066b5:	77 0f                	ja     4066c6 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0x76>
  4066b7:	48 be ff ff ff ff ff 	movabs rsi,0x3fffffffffffffff
  4066be:	ff ff 3f 
  4066c1:	48 39 f1             	cmp    rcx,rsi
  4066c4:	76 7a                	jbe    406740 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0xf0>
  4066c6:	4c 89 f7             	mov    rdi,r14
  4066c9:	48 89 54 24 08       	mov    QWORD PTR [rsp+0x8],rdx
  4066ce:	e8 0d a8 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  4066d3:	48 8b 54 24 08       	mov    rdx,QWORD PTR [rsp+0x8]
  4066d8:	49 89 c5             	mov    r13,rax
  4066db:	49 01 c6             	add    r14,rax
  4066de:	41 8b 04 24          	mov    eax,DWORD PTR [r12]
  4066e2:	4c 39 fb             	cmp    rbx,r15
  4066e5:	4d 8d 64 15 04       	lea    r12,[r13+rdx*1+0x4]
  4066ea:	41 89 44 15 00       	mov    DWORD PTR [r13+rdx*1+0x0],eax
  4066ef:	74 2f                	je     406720 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0xd0>
  4066f1:	4c 89 fe             	mov    rsi,r15
  4066f4:	4c 89 ef             	mov    rdi,r13
  4066f7:	e8 94 a8 ff ff       	call   400f90 <memmove@plt>
  4066fc:	4c 89 ff             	mov    rdi,r15
  4066ff:	e8 cc a7 ff ff       	call   400ed0 <operator delete(void*)@plt>
  406704:	4c 89 6d 00          	mov    QWORD PTR [rbp+0x0],r13
  406708:	4c 89 65 08          	mov    QWORD PTR [rbp+0x8],r12
  40670c:	4c 89 75 10          	mov    QWORD PTR [rbp+0x10],r14
  406710:	48 83 c4 18          	add    rsp,0x18
  406714:	5b                   	pop    rbx
  406715:	5d                   	pop    rbp
  406716:	41 5c                	pop    r12
  406718:	41 5d                	pop    r13
  40671a:	41 5e                	pop    r14
  40671c:	41 5f                	pop    r15
  40671e:	c3                   	ret    
  40671f:	90                   	nop
  406720:	4d 85 ff             	test   r15,r15
  406723:	74 df                	je     406704 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0xb4>
  406725:	eb d5                	jmp    4066fc <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0xac>
  406727:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  40672e:	00 00 
  406730:	41 be 04 00 00 00    	mov    r14d,0x4
  406736:	eb 8e                	jmp    4066c6 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0x76>
  406738:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40673f:	00 
  406740:	45 31 f6             	xor    r14d,r14d
  406743:	45 31 ed             	xor    r13d,r13d
  406746:	48 85 c9             	test   rcx,rcx
  406749:	74 93                	je     4066de <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0x8e>
  40674b:	4c 8d 34 c5 00 00 00 	lea    r14,[rax*8+0x0]
  406752:	00 
  406753:	e9 6e ff ff ff       	jmp    4066c6 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)+0x76>
  406758:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40675f:	00 

0000000000406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>:
  406760:	41 57                	push   r15
  406762:	41 56                	push   r14
  406764:	41 55                	push   r13
  406766:	41 54                	push   r12
  406768:	49 89 d4             	mov    r12,rdx
  40676b:	0f b7 d1             	movzx  edx,cx
  40676e:	55                   	push   rbp
  40676f:	53                   	push   rbx
  406770:	48 8d 04 d5 00 00 00 	lea    rax,[rdx*8+0x0]
  406777:	00 
  406778:	49 89 d6             	mov    r14,rdx
  40677b:	48 89 fd             	mov    rbp,rdi
  40677e:	48 83 ec 58          	sub    rsp,0x58
  406782:	48 89 f3             	mov    rbx,rsi
  406785:	48 29 d0             	sub    rax,rdx
  406788:	48 8b 57 10          	mov    rdx,QWORD PTR [rdi+0x10]
  40678c:	66 0f d6 0c 24       	movq   QWORD PTR [rsp],xmm1
  406791:	4c 8d 3c c2          	lea    r15,[rdx+rax*8]
  406795:	41 0f b7 47 28       	movzx  eax,WORD PTR [r15+0x28]
  40679a:	66 83 f8 ff          	cmp    ax,0xffff
  40679e:	0f 84 bc 01 00 00    	je     406960 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x200>
  4067a4:	66 83 f8 fe          	cmp    ax,0xfffe
  4067a8:	0f 84 52 01 00 00    	je     406900 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x1a0>
  4067ae:	66 85 c0             	test   ax,ax
  4067b1:	0f 84 d6 00 00 00    	je     40688d <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x12d>
  4067b7:	49 8b 5c 24 08       	mov    rbx,QWORD PTR [r12+0x8]
  4067bc:	4d 8b 6c 24 10       	mov    r13,QWORD PTR [r12+0x10]
  4067c1:	31 ed                	xor    ebp,ebp
  4067c3:	eb 22                	jmp    4067e7 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x87>
  4067c5:	0f 1f 00             	nop    DWORD PTR [rax]
  4067c8:	66 89 6b 02          	mov    WORD PTR [rbx+0x2],bp
  4067cc:	66 44 89 33          	mov    WORD PTR [rbx],r14w
  4067d0:	83 c5 01             	add    ebp,0x1
  4067d3:	48 83 c3 04          	add    rbx,0x4
  4067d7:	66 41 39 6f 28       	cmp    WORD PTR [r15+0x28],bp
  4067dc:	49 89 5c 24 08       	mov    QWORD PTR [r12+0x8],rbx
  4067e1:	0f 86 a6 00 00 00    	jbe    40688d <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x12d>
  4067e7:	49 39 dd             	cmp    r13,rbx
  4067ea:	75 dc                	jne    4067c8 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x68>
  4067ec:	4d 8b 14 24          	mov    r10,QWORD PTR [r12]
  4067f0:	4c 89 ea             	mov    rdx,r13
  4067f3:	4c 89 ee             	mov    rsi,r13
  4067f6:	4c 29 d2             	sub    rdx,r10
  4067f9:	48 89 d0             	mov    rax,rdx
  4067fc:	48 c1 f8 02          	sar    rax,0x2
  406800:	48 85 c0             	test   rax,rax
  406803:	0f 84 c7 00 00 00    	je     4068d0 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x170>
  406809:	48 8d 3c 00          	lea    rdi,[rax+rax*1]
  40680d:	49 c7 c5 fc ff ff ff 	mov    r13,0xfffffffffffffffc
  406814:	48 39 f8             	cmp    rax,rdi
  406817:	77 13                	ja     40682c <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xcc>
  406819:	48 b9 ff ff ff ff ff 	movabs rcx,0x3fffffffffffffff
  406820:	ff ff 3f 
  406823:	48 39 cf             	cmp    rdi,rcx
  406826:	0f 86 b4 00 00 00    	jbe    4068e0 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x180>
  40682c:	4c 89 ef             	mov    rdi,r13
  40682f:	48 89 54 24 20       	mov    QWORD PTR [rsp+0x20],rdx
  406834:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
  406839:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  40683d:	e8 9e a6 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  406842:	48 8b 54 24 20       	mov    rdx,QWORD PTR [rsp+0x20]
  406847:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
  40684c:	49 89 c1             	mov    r9,rax
  40684f:	4c 8b 14 24          	mov    r10,QWORD PTR [rsp]
  406853:	49 01 c5             	add    r13,rax
  406856:	49 8d 04 11          	lea    rax,[r9+rdx*1]
  40685a:	4c 39 d6             	cmp    rsi,r10
  40685d:	49 8d 5c 11 04       	lea    rbx,[r9+rdx*1+0x4]
  406862:	66 44 89 30          	mov    WORD PTR [rax],r14w
  406866:	66 89 68 02          	mov    WORD PTR [rax+0x2],bp
  40686a:	75 34                	jne    4068a0 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x140>
  40686c:	4d 85 d2             	test   r10,r10
  40686f:	75 45                	jne    4068b6 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x156>
  406871:	83 c5 01             	add    ebp,0x1
  406874:	66 41 39 6f 28       	cmp    WORD PTR [r15+0x28],bp
  406879:	4d 89 0c 24          	mov    QWORD PTR [r12],r9
  40687d:	49 89 5c 24 08       	mov    QWORD PTR [r12+0x8],rbx
  406882:	4d 89 6c 24 10       	mov    QWORD PTR [r12+0x10],r13
  406887:	0f 87 5a ff ff ff    	ja     4067e7 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x87>
  40688d:	48 83 c4 58          	add    rsp,0x58
  406891:	5b                   	pop    rbx
  406892:	5d                   	pop    rbp
  406893:	41 5c                	pop    r12
  406895:	41 5d                	pop    r13
  406897:	41 5e                	pop    r14
  406899:	41 5f                	pop    r15
  40689b:	c3                   	ret    
  40689c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4068a0:	4c 89 d6             	mov    rsi,r10
  4068a3:	4c 89 cf             	mov    rdi,r9
  4068a6:	4c 89 14 24          	mov    QWORD PTR [rsp],r10
  4068aa:	e8 e1 a6 ff ff       	call   400f90 <memmove@plt>
  4068af:	4c 8b 14 24          	mov    r10,QWORD PTR [rsp]
  4068b3:	49 89 c1             	mov    r9,rax
  4068b6:	4c 89 d7             	mov    rdi,r10
  4068b9:	4c 89 0c 24          	mov    QWORD PTR [rsp],r9
  4068bd:	e8 0e a6 ff ff       	call   400ed0 <operator delete(void*)@plt>
  4068c2:	4c 8b 0c 24          	mov    r9,QWORD PTR [rsp]
  4068c6:	eb a9                	jmp    406871 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x111>
  4068c8:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  4068cf:	00 
  4068d0:	41 bd 04 00 00 00    	mov    r13d,0x4
  4068d6:	e9 51 ff ff ff       	jmp    40682c <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xcc>
  4068db:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  4068e0:	45 31 ed             	xor    r13d,r13d
  4068e3:	45 31 c9             	xor    r9d,r9d
  4068e6:	48 85 ff             	test   rdi,rdi
  4068e9:	0f 84 67 ff ff ff    	je     406856 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xf6>
  4068ef:	4c 8d 2c c5 00 00 00 	lea    r13,[rax*8+0x0]
  4068f6:	00 
  4068f7:	e9 30 ff ff ff       	jmp    40682c <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xcc>
  4068fc:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  406900:	45 31 ed             	xor    r13d,r13d
  406903:	48 8d 74 24 4c       	lea    rsi,[rsp+0x4c]
  406908:	66 44 89 6c 24 4e    	mov    WORD PTR [rsp+0x4e],r13w
  40690e:	4c 89 e7             	mov    rdi,r12
  406911:	41 83 c5 01          	add    r13d,0x1
  406915:	66 0f d6 44 24 18    	movq   QWORD PTR [rsp+0x18],xmm0
  40691b:	66 44 89 74 24 4c    	mov    WORD PTR [rsp+0x4c],r14w
  406921:	e8 2a fd ff ff       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  406926:	66 41 83 fd 04       	cmp    r13w,0x4
  40692b:	f3 0f 7e 44 24 18    	movq   xmm0,QWORD PTR [rsp+0x18]
  406931:	75 d0                	jne    406903 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x1a3>
  406933:	41 0f b7 4f 20       	movzx  ecx,WORD PTR [r15+0x20]
  406938:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  40693d:	4c 89 e2             	mov    rdx,r12
  406940:	48 89 de             	mov    rsi,rbx
  406943:	48 89 ef             	mov    rdi,rbp
  406946:	e8 15 fe ff ff       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  40694b:	48 83 c4 58          	add    rsp,0x58
  40694f:	5b                   	pop    rbx
  406950:	5d                   	pop    rbp
  406951:	41 5c                	pop    r12
  406953:	41 5d                	pop    r13
  406955:	41 5e                	pop    r14
  406957:	41 5f                	pop    r15
  406959:	c3                   	ret    
  40695a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  406960:	66 48 0f 7e c0       	movq   rax,xmm0
  406965:	f3 0f 10 15 97 10 00 	movss  xmm2,DWORD PTR [rip+0x1097]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  40696c:	00 
  40696d:	41 0f b7 4f 20       	movzx  ecx,WORD PTR [r15+0x20]
  406972:	48 c1 e8 20          	shr    rax,0x20
  406976:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
  40697a:	8b 04 24             	mov    eax,DWORD PTR [rsp]
  40697d:	f3 0f 10 6c 24 18    	movss  xmm5,DWORD PTR [rsp+0x18]
  406983:	89 44 24 18          	mov    DWORD PTR [rsp+0x18],eax
  406987:	66 48 0f 7e c8       	movq   rax,xmm1
  40698c:	66 0f 6e 7c 24 18    	movd   xmm7,DWORD PTR [rsp+0x18]
  406992:	0f 28 cd             	movaps xmm1,xmm5
  406995:	48 c1 e8 20          	shr    rax,0x20
  406999:	f3 0f 11 6c 24 18    	movss  DWORD PTR [rsp+0x18],xmm5
  40699f:	89 04 24             	mov    DWORD PTR [rsp],eax
  4069a2:	f3 0f 11 7c 24 20    	movss  DWORD PTR [rsp+0x20],xmm7
  4069a8:	f3 0f 10 1c 24       	movss  xmm3,DWORD PTR [rsp]
  4069ad:	0f 28 e3             	movaps xmm4,xmm3
  4069b0:	f3 0f 11 04 24       	movss  DWORD PTR [rsp],xmm0
  4069b5:	f3 0f 11 5c 24 3c    	movss  DWORD PTR [rsp+0x3c],xmm3
  4069bb:	f3 0f 59 e2          	mulss  xmm4,xmm2
  4069bf:	f3 0f 59 d7          	mulss  xmm2,xmm7
  4069c3:	0f 28 f8             	movaps xmm7,xmm0
  4069c6:	f3 0f 5c cc          	subss  xmm1,xmm4
  4069ca:	f3 0f 11 64 24 30    	movss  DWORD PTR [rsp+0x30],xmm4
  4069d0:	f3 0f 5c fa          	subss  xmm7,xmm2
  4069d4:	f3 0f 11 54 24 34    	movss  DWORD PTR [rsp+0x34],xmm2
  4069da:	f3 0f 11 4c 24 28    	movss  DWORD PTR [rsp+0x28],xmm1
  4069e0:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  4069e5:	66 0f 7e f8          	movd   eax,xmm7
  4069e9:	48 c1 e2 20          	shl    rdx,0x20
  4069ed:	48 09 d0             	or     rax,rdx
  4069f0:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  4069f5:	66 0f 7e e0          	movd   eax,xmm4
  4069f9:	f3 0f 7e 44 24 28    	movq   xmm0,QWORD PTR [rsp+0x28]
  4069ff:	48 89 c2             	mov    rdx,rax
  406a02:	66 0f 7e d0          	movd   eax,xmm2
  406a06:	48 c1 e2 20          	shl    rdx,0x20
  406a0a:	48 09 d0             	or     rax,rdx
  406a0d:	4c 89 e2             	mov    rdx,r12
  406a10:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  406a15:	f3 0f 7e 4c 24 28    	movq   xmm1,QWORD PTR [rsp+0x28]
  406a1b:	e8 40 fd ff ff       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  406a20:	f3 0f 10 5c 24 3c    	movss  xmm3,DWORD PTR [rsp+0x3c]
  406a26:	41 0f b7 4f 22       	movzx  ecx,WORD PTR [r15+0x22]
  406a2b:	f3 0f 59 1d d5 0f 00 	mulss  xmm3,DWORD PTR [rip+0xfd5]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  406a32:	00 
  406a33:	f3 0f 10 54 24 34    	movss  xmm2,DWORD PTR [rsp+0x34]
  406a39:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  406a3e:	48 89 de             	mov    rsi,rbx
  406a41:	f3 0f 58 ea          	addss  xmm5,xmm2
  406a45:	f3 0f 10 64 24 30    	movss  xmm4,DWORD PTR [rsp+0x30]
  406a4b:	48 89 ef             	mov    rdi,rbp
  406a4e:	f3 0f 58 5c 24 18    	addss  xmm3,DWORD PTR [rsp+0x18]
  406a54:	66 0f 7e e8          	movd   eax,xmm5
  406a58:	f3 0f 11 6c 24 38    	movss  DWORD PTR [rsp+0x38],xmm5
  406a5e:	f3 0f 11 5c 24 28    	movss  DWORD PTR [rsp+0x28],xmm3
  406a64:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  406a69:	48 c1 e2 20          	shl    rdx,0x20
  406a6d:	48 09 d0             	or     rax,rdx
  406a70:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  406a75:	66 0f 7e e0          	movd   eax,xmm4
  406a79:	f3 0f 7e 44 24 28    	movq   xmm0,QWORD PTR [rsp+0x28]
  406a7f:	48 89 c2             	mov    rdx,rax
  406a82:	66 0f 7e d0          	movd   eax,xmm2
  406a86:	48 c1 e2 20          	shl    rdx,0x20
  406a8a:	48 09 d0             	or     rax,rdx
  406a8d:	4c 89 e2             	mov    rdx,r12
  406a90:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  406a95:	f3 0f 7e 4c 24 28    	movq   xmm1,QWORD PTR [rsp+0x28]
  406a9b:	e8 c0 fc ff ff       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  406aa0:	f3 0f 10 05 60 0f 00 	movss  xmm0,DWORD PTR [rip+0xf60]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  406aa7:	00 
  406aa8:	41 0f b7 4f 24       	movzx  ecx,WORD PTR [r15+0x24]
  406aad:	f3 0f 59 44 24 20    	mulss  xmm0,DWORD PTR [rsp+0x20]
  406ab3:	f3 0f 10 64 24 30    	movss  xmm4,DWORD PTR [rsp+0x30]
  406ab9:	f3 0f 10 5c 24 18    	movss  xmm3,DWORD PTR [rsp+0x18]
  406abf:	48 89 de             	mov    rsi,rbx
  406ac2:	f3 0f 58 dc          	addss  xmm3,xmm4
  406ac6:	f3 0f 10 54 24 34    	movss  xmm2,DWORD PTR [rsp+0x34]
  406acc:	48 89 ef             	mov    rdi,rbp
  406acf:	f3 0f 11 54 24 20    	movss  DWORD PTR [rsp+0x20],xmm2
  406ad5:	f3 0f 11 64 24 18    	movss  DWORD PTR [rsp+0x18],xmm4
  406adb:	f3 0f 58 04 24       	addss  xmm0,DWORD PTR [rsp]
  406ae0:	66 0f 7e da          	movd   edx,xmm3
  406ae4:	f3 0f 11 5c 24 28    	movss  DWORD PTR [rsp+0x28],xmm3
  406aea:	48 c1 e2 20          	shl    rdx,0x20
  406aee:	66 0f 7e c0          	movd   eax,xmm0
  406af2:	48 09 d0             	or     rax,rdx
  406af5:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  406af9:	66 0f 7e e0          	movd   eax,xmm4
  406afd:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  406b02:	48 89 c2             	mov    rdx,rax
  406b05:	66 0f 7e d0          	movd   eax,xmm2
  406b09:	48 c1 e2 20          	shl    rdx,0x20
  406b0d:	48 09 d0             	or     rax,rdx
  406b10:	4c 89 e2             	mov    rdx,r12
  406b13:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  406b17:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  406b1c:	e8 3f fc ff ff       	call   406760 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  406b21:	f3 0f 10 5c 24 28    	movss  xmm3,DWORD PTR [rsp+0x28]
  406b27:	41 0f b7 4f 26       	movzx  ecx,WORD PTR [r15+0x26]
  406b2c:	f3 0f 10 6c 24 38    	movss  xmm5,DWORD PTR [rsp+0x38]
  406b32:	0f 14 eb             	unpcklps xmm5,xmm3
  406b35:	f3 0f 10 64 24 18    	movss  xmm4,DWORD PTR [rsp+0x18]
  406b3b:	f3 0f 10 54 24 20    	movss  xmm2,DWORD PTR [rsp+0x20]
  406b41:	0f 14 d4             	unpcklps xmm2,xmm4
  406b44:	0f 28 f5             	movaps xmm6,xmm5
  406b47:	0f 16 f2             	movlhps xmm6,xmm2
  406b4a:	0f 29 34 24          	movaps XMMWORD PTR [rsp],xmm6
  406b4e:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  406b53:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  406b58:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  406b5c:	e9 d7 fd ff ff       	jmp    406938 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::QueryAll<float> >(zekku::QueryAll<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x1d8>
  406b61:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  406b68:	00 00 00 
  406b6b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

0000000000406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>:
  406b70:	41 57                	push   r15
  406b72:	41 56                	push   r14
  406b74:	66 49 0f 7e c9       	movq   r9,xmm1
  406b79:	41 55                	push   r13
  406b7b:	41 54                	push   r12
  406b7d:	66 48 0f 7e c0       	movq   rax,xmm0
  406b82:	55                   	push   rbp
  406b83:	53                   	push   rbx
  406b84:	66 48 0f 7e c3       	movq   rbx,xmm0
  406b89:	41 89 cd             	mov    r13d,ecx
  406b8c:	48 83 ec 58          	sub    rsp,0x58
  406b90:	48 c1 eb 20          	shr    rbx,0x20
  406b94:	89 1c 24             	mov    DWORD PTR [rsp],ebx
  406b97:	4c 89 cb             	mov    rbx,r9
  406b9a:	48 c1 eb 20          	shr    rbx,0x20
  406b9e:	f3 0f 10 24 24       	movss  xmm4,DWORD PTR [rsp]
  406ba3:	89 1c 24             	mov    DWORD PTR [rsp],ebx
  406ba6:	44 0f 28 e4          	movaps xmm12,xmm4
  406baa:	f3 0f 10 2c 24       	movss  xmm5,DWORD PTR [rsp]
  406baf:	66 0f 7e 04 24       	movd   DWORD PTR [rsp],xmm0
  406bb4:	f3 44 0f 5c e5       	subss  xmm12,xmm5
  406bb9:	f3 0f 10 76 04       	movss  xmm6,DWORD PTR [rsi+0x4]
  406bbe:	66 44 0f 6e 14 24    	movd   xmm10,DWORD PTR [rsp]
  406bc4:	0f 28 de             	movaps xmm3,xmm6
  406bc7:	44 89 0c 24          	mov    DWORD PTR [rsp],r9d
  406bcb:	f3 0f 10 3e          	movss  xmm7,DWORD PTR [rsi]
  406bcf:	66 44 0f 6e 3c 24    	movd   xmm15,DWORD PTR [rsp]
  406bd5:	45 0f 28 da          	movaps xmm11,xmm10
  406bd9:	f3 41 0f 5c dc       	subss  xmm3,xmm12
  406bde:	44 0f 28 ef          	movaps xmm13,xmm7
  406be2:	f3 45 0f 5c df       	subss  xmm11,xmm15
  406be7:	f3 44 0f 10 46 08    	movss  xmm8,DWORD PTR [rsi+0x8]
  406bed:	41 0f 28 c8          	movaps xmm1,xmm8
  406bf1:	f3 44 0f 11 3c 24    	movss  DWORD PTR [rsp],xmm15
  406bf7:	0f 28 c6             	movaps xmm0,xmm6
  406bfa:	f3 0f 59 db          	mulss  xmm3,xmm3
  406bfe:	0f 28 d7             	movaps xmm2,xmm7
  406c01:	f3 45 0f 5c eb       	subss  xmm13,xmm11
  406c06:	f3 41 0f 59 c8       	mulss  xmm1,xmm8
  406c0b:	44 0f 28 cb          	movaps xmm9,xmm3
  406c0f:	f3 45 0f 59 ed       	mulss  xmm13,xmm13
  406c14:	f3 45 0f 58 cd       	addss  xmm9,xmm13
  406c19:	41 0f 2f c9          	comiss xmm1,xmm9
  406c1d:	73 26                	jae    406c45 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xd5>
  406c1f:	44 0f 28 f4          	movaps xmm14,xmm4
  406c23:	44 0f 28 ce          	movaps xmm9,xmm6
  406c27:	f3 44 0f 58 f5       	addss  xmm14,xmm5
  406c2c:	f3 45 0f 5c ce       	subss  xmm9,xmm14
  406c31:	f3 45 0f 59 c9       	mulss  xmm9,xmm9
  406c36:	f3 45 0f 58 e9       	addss  xmm13,xmm9
  406c3b:	41 0f 2f cd          	comiss xmm1,xmm13
  406c3f:	0f 82 bb 00 00 00    	jb     406d00 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x190>
  406c45:	48 89 f3             	mov    rbx,rsi
  406c48:	41 0f b7 f5          	movzx  esi,r13w
  406c4c:	49 89 d6             	mov    r14,rdx
  406c4f:	48 8d 14 f5 00 00 00 	lea    rdx,[rsi*8+0x0]
  406c56:	00 
  406c57:	49 89 fc             	mov    r12,rdi
  406c5a:	48 29 f2             	sub    rdx,rsi
  406c5d:	48 8b 77 10          	mov    rsi,QWORD PTR [rdi+0x10]
  406c61:	4c 8d 3c d6          	lea    r15,[rsi+rdx*8]
  406c65:	41 0f b7 57 28       	movzx  edx,WORD PTR [r15+0x28]
  406c6a:	66 83 fa ff          	cmp    dx,0xffff
  406c6e:	0f 84 0c 03 00 00    	je     406f80 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x410>
  406c74:	66 83 fa fe          	cmp    dx,0xfffe
  406c78:	0f 84 f2 01 00 00    	je     406e70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x300>
  406c7e:	66 85 d2             	test   dx,dx
  406c81:	74 6e                	je     406cf1 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x181>
  406c83:	31 ed                	xor    ebp,ebp
  406c85:	eb 23                	jmp    406caa <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x13a>
  406c87:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  406c8e:	00 00 
  406c90:	83 c5 01             	add    ebp,0x1
  406c93:	66 39 d5             	cmp    bp,dx
  406c96:	73 59                	jae    406cf1 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x181>
  406c98:	f3 0f 10 4b 08       	movss  xmm1,DWORD PTR [rbx+0x8]
  406c9d:	f3 0f 59 c9          	mulss  xmm1,xmm1
  406ca1:	f3 0f 10 43 04       	movss  xmm0,DWORD PTR [rbx+0x4]
  406ca6:	f3 0f 10 13          	movss  xmm2,DWORD PTR [rbx]
  406caa:	0f b7 c5             	movzx  eax,bp
  406cad:	49 8d 04 c7          	lea    rax,[r15+rax*8]
  406cb1:	f3 0f 5c 40 04       	subss  xmm0,DWORD PTR [rax+0x4]
  406cb6:	f3 0f 5c 10          	subss  xmm2,DWORD PTR [rax]
  406cba:	f3 0f 59 c0          	mulss  xmm0,xmm0
  406cbe:	f3 0f 59 d2          	mulss  xmm2,xmm2
  406cc2:	f3 0f 58 c2          	addss  xmm0,xmm2
  406cc6:	0f 2f c8             	comiss xmm1,xmm0
  406cc9:	72 c5                	jb     406c90 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x120>
  406ccb:	49 8b 76 08          	mov    rsi,QWORD PTR [r14+0x8]
  406ccf:	49 3b 76 10          	cmp    rsi,QWORD PTR [r14+0x10]
  406cd3:	0f 84 bf 00 00 00    	je     406d98 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x228>
  406cd9:	66 89 6e 02          	mov    WORD PTR [rsi+0x2],bp
  406cdd:	83 c5 01             	add    ebp,0x1
  406ce0:	66 44 89 2e          	mov    WORD PTR [rsi],r13w
  406ce4:	48 83 c6 04          	add    rsi,0x4
  406ce8:	66 39 d5             	cmp    bp,dx
  406ceb:	49 89 76 08          	mov    QWORD PTR [r14+0x8],rsi
  406cef:	72 a7                	jb     406c98 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x128>
  406cf1:	48 83 c4 58          	add    rsp,0x58
  406cf5:	5b                   	pop    rbx
  406cf6:	5d                   	pop    rbp
  406cf7:	41 5c                	pop    r12
  406cf9:	41 5d                	pop    r13
  406cfb:	41 5e                	pop    r14
  406cfd:	41 5f                	pop    r15
  406cff:	c3                   	ret    
  406d00:	f3 45 0f 58 fa       	addss  xmm15,xmm10
  406d05:	44 0f 28 ef          	movaps xmm13,xmm7
  406d09:	f3 45 0f 5c ef       	subss  xmm13,xmm15
  406d0e:	f3 45 0f 59 ed       	mulss  xmm13,xmm13
  406d13:	f3 41 0f 58 dd       	addss  xmm3,xmm13
  406d18:	0f 2f cb             	comiss xmm1,xmm3
  406d1b:	0f 83 24 ff ff ff    	jae    406c45 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xd5>
  406d21:	f3 45 0f 58 cd       	addss  xmm9,xmm13
  406d26:	41 0f 2f c9          	comiss xmm1,xmm9
  406d2a:	0f 83 15 ff ff ff    	jae    406c45 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xd5>
  406d30:	41 0f 2f fb          	comiss xmm7,xmm11
  406d34:	72 2a                	jb     406d60 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x1f0>
  406d36:	44 0f 2f ff          	comiss xmm15,xmm7
  406d3a:	72 24                	jb     406d60 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x1f0>
  406d3c:	41 0f 28 dc          	movaps xmm3,xmm12
  406d40:	f3 41 0f 5c d8       	subss  xmm3,xmm8
  406d45:	0f 2f f3             	comiss xmm6,xmm3
  406d48:	72 16                	jb     406d60 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x1f0>
  406d4a:	41 0f 28 d8          	movaps xmm3,xmm8
  406d4e:	f3 41 0f 58 de       	addss  xmm3,xmm14
  406d53:	0f 2f de             	comiss xmm3,xmm6
  406d56:	0f 83 e9 fe ff ff    	jae    406c45 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xd5>
  406d5c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  406d60:	f3 45 0f 5c d8       	subss  xmm11,xmm8
  406d65:	41 0f 2f fb          	comiss xmm7,xmm11
  406d69:	72 86                	jb     406cf1 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x181>
  406d6b:	f3 45 0f 58 f8       	addss  xmm15,xmm8
  406d70:	44 0f 2f ff          	comiss xmm15,xmm7
  406d74:	0f 82 77 ff ff ff    	jb     406cf1 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x181>
  406d7a:	41 0f 2f f4          	comiss xmm6,xmm12
  406d7e:	0f 82 6d ff ff ff    	jb     406cf1 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x181>
  406d84:	44 0f 2f f6          	comiss xmm14,xmm6
  406d88:	0f 82 63 ff ff ff    	jb     406cf1 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x181>
  406d8e:	e9 b2 fe ff ff       	jmp    406c45 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0xd5>
  406d93:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  406d98:	4d 8b 1e             	mov    r11,QWORD PTR [r14]
  406d9b:	48 89 f2             	mov    rdx,rsi
  406d9e:	4c 29 da             	sub    rdx,r11
  406da1:	48 89 d0             	mov    rax,rdx
  406da4:	48 c1 f8 02          	sar    rax,0x2
  406da8:	48 85 c0             	test   rax,rax
  406dab:	0f 84 bf 01 00 00    	je     406f70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x400>
  406db1:	48 8d 0c 00          	lea    rcx,[rax+rax*1]
  406db5:	48 39 c8             	cmp    rax,rcx
  406db8:	0f 87 da 03 00 00    	ja     407198 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x628>
  406dbe:	48 bf ff ff ff ff ff 	movabs rdi,0x3fffffffffffffff
  406dc5:	ff ff 3f 
  406dc8:	49 c7 c4 fc ff ff ff 	mov    r12,0xfffffffffffffffc
  406dcf:	48 39 f9             	cmp    rcx,rdi
  406dd2:	0f 86 a3 03 00 00    	jbe    40717b <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x60b>
  406dd8:	4c 89 e7             	mov    rdi,r12
  406ddb:	48 89 54 24 28       	mov    QWORD PTR [rsp+0x28],rdx
  406de0:	4c 89 5c 24 20       	mov    QWORD PTR [rsp+0x20],r11
  406de5:	48 89 74 24 18       	mov    QWORD PTR [rsp+0x18],rsi
  406dea:	e8 f1 a0 ff ff       	call   400ee0 <operator new(unsigned long)@plt>
  406def:	48 8b 74 24 18       	mov    rsi,QWORD PTR [rsp+0x18]
  406df4:	48 89 c1             	mov    rcx,rax
  406df7:	4c 8b 5c 24 20       	mov    r11,QWORD PTR [rsp+0x20]
  406dfc:	4a 8d 04 20          	lea    rax,[rax+r12*1]
  406e00:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
  406e05:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  406e09:	48 8d 04 11          	lea    rax,[rcx+rdx*1]
  406e0d:	4c 39 de             	cmp    rsi,r11
  406e10:	4c 8d 64 11 04       	lea    r12,[rcx+rdx*1+0x4]
  406e15:	66 44 89 28          	mov    WORD PTR [rax],r13w
  406e19:	66 89 68 02          	mov    WORD PTR [rax+0x2],bp
  406e1d:	0f 84 35 01 00 00    	je     406f58 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x3e8>
  406e23:	4c 89 de             	mov    rsi,r11
  406e26:	48 89 cf             	mov    rdi,rcx
  406e29:	4c 89 5c 24 18       	mov    QWORD PTR [rsp+0x18],r11
  406e2e:	e8 5d a1 ff ff       	call   400f90 <memmove@plt>
  406e33:	4c 8b 5c 24 18       	mov    r11,QWORD PTR [rsp+0x18]
  406e38:	48 89 c1             	mov    rcx,rax
  406e3b:	4c 89 df             	mov    rdi,r11
  406e3e:	48 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],rcx
  406e43:	e8 88 a0 ff ff       	call   400ed0 <operator delete(void*)@plt>
  406e48:	48 8b 4c 24 18       	mov    rcx,QWORD PTR [rsp+0x18]
  406e4d:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  406e51:	49 89 0e             	mov    QWORD PTR [r14],rcx
  406e54:	4d 89 66 08          	mov    QWORD PTR [r14+0x8],r12
  406e58:	41 0f b7 57 28       	movzx  edx,WORD PTR [r15+0x28]
  406e5d:	49 89 46 10          	mov    QWORD PTR [r14+0x10],rax
  406e61:	e9 2a fe ff ff       	jmp    406c90 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x120>
  406e66:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  406e6d:	00 00 00 
  406e70:	0f 28 d6             	movaps xmm2,xmm6
  406e73:	0f 28 c7             	movaps xmm0,xmm7
  406e76:	f3 41 0f 5c 57 04    	subss  xmm2,DWORD PTR [r15+0x4]
  406e7c:	f3 41 0f 5c 07       	subss  xmm0,DWORD PTR [r15]
  406e81:	f3 0f 59 d2          	mulss  xmm2,xmm2
  406e85:	f3 0f 59 c0          	mulss  xmm0,xmm0
  406e89:	f3 0f 58 c2          	addss  xmm0,xmm2
  406e8d:	0f 2f c8             	comiss xmm1,xmm0
  406e90:	0f 83 0e 03 00 00    	jae    4071a4 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x634>
  406e96:	0f 28 ce             	movaps xmm1,xmm6
  406e99:	0f 28 c7             	movaps xmm0,xmm7
  406e9c:	f3 41 0f 5c 4f 0c    	subss  xmm1,DWORD PTR [r15+0xc]
  406ea2:	f3 41 0f 5c 47 08    	subss  xmm0,DWORD PTR [r15+0x8]
  406ea8:	f3 0f 59 c9          	mulss  xmm1,xmm1
  406eac:	f3 0f 59 c0          	mulss  xmm0,xmm0
  406eb0:	f3 0f 58 c1          	addss  xmm0,xmm1
  406eb4:	41 0f 28 c8          	movaps xmm1,xmm8
  406eb8:	f3 41 0f 59 c8       	mulss  xmm1,xmm8
  406ebd:	0f 2f c8             	comiss xmm1,xmm0
  406ec0:	0f 83 6f 03 00 00    	jae    407235 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x6c5>
  406ec6:	0f 28 c6             	movaps xmm0,xmm6
  406ec9:	0f 28 cf             	movaps xmm1,xmm7
  406ecc:	f3 41 0f 5c 47 14    	subss  xmm0,DWORD PTR [r15+0x14]
  406ed2:	f3 41 0f 5c 4f 10    	subss  xmm1,DWORD PTR [r15+0x10]
  406ed8:	f3 0f 59 c0          	mulss  xmm0,xmm0
  406edc:	f3 0f 59 c9          	mulss  xmm1,xmm1
  406ee0:	f3 0f 58 c1          	addss  xmm0,xmm1
  406ee4:	41 0f 28 c8          	movaps xmm1,xmm8
  406ee8:	f3 41 0f 59 c8       	mulss  xmm1,xmm8
  406eed:	0f 2f c8             	comiss xmm1,xmm0
  406ef0:	0f 83 f5 02 00 00    	jae    4071eb <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x67b>
  406ef6:	f3 41 0f 5c 77 1c    	subss  xmm6,DWORD PTR [r15+0x1c]
  406efc:	f3 45 0f 59 c0       	mulss  xmm8,xmm8
  406f01:	f3 41 0f 5c 7f 18    	subss  xmm7,DWORD PTR [r15+0x18]
  406f07:	f3 0f 59 f6          	mulss  xmm6,xmm6
  406f0b:	f3 0f 59 ff          	mulss  xmm7,xmm7
  406f0f:	f3 0f 58 f7          	addss  xmm6,xmm7
  406f13:	44 0f 2f c6          	comiss xmm8,xmm6
  406f17:	0f 83 62 03 00 00    	jae    40727f <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x70f>
  406f1d:	41 0f b7 4f 20       	movzx  ecx,WORD PTR [r15+0x20]
  406f22:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  406f26:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  406f2b:	4c 89 0c 24          	mov    QWORD PTR [rsp],r9
  406f2f:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  406f34:	4c 89 f2             	mov    rdx,r14
  406f37:	48 89 de             	mov    rsi,rbx
  406f3a:	4c 89 e7             	mov    rdi,r12
  406f3d:	e8 2e fc ff ff       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  406f42:	48 83 c4 58          	add    rsp,0x58
  406f46:	5b                   	pop    rbx
  406f47:	5d                   	pop    rbp
  406f48:	41 5c                	pop    r12
  406f4a:	41 5d                	pop    r13
  406f4c:	41 5e                	pop    r14
  406f4e:	41 5f                	pop    r15
  406f50:	c3                   	ret    
  406f51:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  406f58:	4d 85 db             	test   r11,r11
  406f5b:	0f 84 ec fe ff ff    	je     406e4d <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x2dd>
  406f61:	e9 d5 fe ff ff       	jmp    406e3b <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x2cb>
  406f66:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  406f6d:	00 00 00 
  406f70:	41 bc 04 00 00 00    	mov    r12d,0x4
  406f76:	e9 5d fe ff ff       	jmp    406dd8 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x268>
  406f7b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  406f80:	0f 28 dd             	movaps xmm3,xmm5
  406f83:	41 0f b7 4f 20       	movzx  ecx,WORD PTR [r15+0x20]
  406f88:	f3 0f 10 15 74 0a 00 	movss  xmm2,DWORD PTR [rip+0xa74]        # 407a04 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc4>
  406f8f:	00 
  406f90:	48 89 de             	mov    rsi,rbx
  406f93:	f3 0f 59 da          	mulss  xmm3,xmm2
  406f97:	41 0f 28 fa          	movaps xmm7,xmm10
  406f9b:	f3 0f 59 14 24       	mulss  xmm2,DWORD PTR [rsp]
  406fa0:	f3 0f 11 6c 24 3c    	movss  DWORD PTR [rsp+0x3c],xmm5
  406fa6:	f3 44 0f 11 54 24 34 	movss  DWORD PTR [rsp+0x34],xmm10
  406fad:	f3 0f 11 64 24 30    	movss  DWORD PTR [rsp+0x30],xmm4
  406fb3:	f3 0f 11 5c 24 20    	movss  DWORD PTR [rsp+0x20],xmm3
  406fb9:	f3 0f 5c fa          	subss  xmm7,xmm2
  406fbd:	f3 0f 11 54 24 28    	movss  DWORD PTR [rsp+0x28],xmm2
  406fc3:	0f 28 c7             	movaps xmm0,xmm7
  406fc6:	0f 28 fc             	movaps xmm7,xmm4
  406fc9:	66 0f 7e c0          	movd   eax,xmm0
  406fcd:	f3 0f 5c fb          	subss  xmm7,xmm3
  406fd1:	f3 0f 11 7c 24 18    	movss  DWORD PTR [rsp+0x18],xmm7
  406fd7:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
  406fdc:	48 c1 e2 20          	shl    rdx,0x20
  406fe0:	48 09 d0             	or     rax,rdx
  406fe3:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  406fe8:	66 0f 7e d8          	movd   eax,xmm3
  406fec:	f3 0f 7e 44 24 18    	movq   xmm0,QWORD PTR [rsp+0x18]
  406ff2:	48 89 c2             	mov    rdx,rax
  406ff5:	66 0f 7e d0          	movd   eax,xmm2
  406ff9:	48 c1 e2 20          	shl    rdx,0x20
  406ffd:	48 09 d0             	or     rax,rdx
  407000:	4c 89 f2             	mov    rdx,r14
  407003:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  407008:	f3 0f 7e 4c 24 18    	movq   xmm1,QWORD PTR [rsp+0x18]
  40700e:	e8 5d fb ff ff       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  407013:	f3 0f 10 6c 24 3c    	movss  xmm5,DWORD PTR [rsp+0x3c]
  407019:	41 0f b7 4f 22       	movzx  ecx,WORD PTR [r15+0x22]
  40701e:	f3 0f 59 2d e2 09 00 	mulss  xmm5,DWORD PTR [rip+0x9e2]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  407025:	00 
  407026:	f3 0f 10 54 24 28    	movss  xmm2,DWORD PTR [rsp+0x28]
  40702c:	f3 0f 10 64 24 30    	movss  xmm4,DWORD PTR [rsp+0x30]
  407032:	48 89 de             	mov    rsi,rbx
  407035:	0f 28 f2             	movaps xmm6,xmm2
  407038:	4c 89 e7             	mov    rdi,r12
  40703b:	f3 44 0f 10 54 24 34 	movss  xmm10,DWORD PTR [rsp+0x34]
  407042:	f3 41 0f 58 f2       	addss  xmm6,xmm10
  407047:	f3 0f 10 5c 24 20    	movss  xmm3,DWORD PTR [rsp+0x20]
  40704d:	f3 44 0f 11 54 24 38 	movss  DWORD PTR [rsp+0x38],xmm10
  407054:	0f 28 fd             	movaps xmm7,xmm5
  407057:	f3 0f 11 64 24 28    	movss  DWORD PTR [rsp+0x28],xmm4
  40705d:	f3 0f 11 54 24 30    	movss  DWORD PTR [rsp+0x30],xmm2
  407063:	f3 0f 58 fc          	addss  xmm7,xmm4
  407067:	66 0f 7e f0          	movd   eax,xmm6
  40706b:	f3 0f 11 74 24 34    	movss  DWORD PTR [rsp+0x34],xmm6
  407071:	f3 0f 11 7c 24 18    	movss  DWORD PTR [rsp+0x18],xmm7
  407077:	48 8b 54 24 18       	mov    rdx,QWORD PTR [rsp+0x18]
  40707c:	48 c1 e2 20          	shl    rdx,0x20
  407080:	48 09 d0             	or     rax,rdx
  407083:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  407088:	66 0f 7e d8          	movd   eax,xmm3
  40708c:	f3 0f 7e 44 24 18    	movq   xmm0,QWORD PTR [rsp+0x18]
  407092:	48 89 c2             	mov    rdx,rax
  407095:	66 0f 7e d0          	movd   eax,xmm2
  407099:	48 c1 e2 20          	shl    rdx,0x20
  40709d:	48 09 d0             	or     rax,rdx
  4070a0:	4c 89 f2             	mov    rdx,r14
  4070a3:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  4070a8:	f3 0f 7e 4c 24 18    	movq   xmm1,QWORD PTR [rsp+0x18]
  4070ae:	e8 bd fa ff ff       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  4070b3:	f3 0f 10 05 4d 09 00 	movss  xmm0,DWORD PTR [rip+0x94d]        # 407a08 <zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::insert(Pair&&)::__PRETTY_FUNCTION__+0xc8>
  4070ba:	00 
  4070bb:	41 0f b7 4f 24       	movzx  ecx,WORD PTR [r15+0x24]
  4070c0:	f3 0f 59 04 24       	mulss  xmm0,DWORD PTR [rsp]
  4070c5:	f3 0f 10 5c 24 20    	movss  xmm3,DWORD PTR [rsp+0x20]
  4070cb:	f3 0f 10 64 24 28    	movss  xmm4,DWORD PTR [rsp+0x28]
  4070d1:	48 89 de             	mov    rsi,rbx
  4070d4:	f3 0f 58 e3          	addss  xmm4,xmm3
  4070d8:	f3 44 0f 10 54 24 38 	movss  xmm10,DWORD PTR [rsp+0x38]
  4070df:	f3 0f 10 54 24 30    	movss  xmm2,DWORD PTR [rsp+0x30]
  4070e5:	4c 89 e7             	mov    rdi,r12
  4070e8:	f3 0f 11 54 24 20    	movss  DWORD PTR [rsp+0x20],xmm2
  4070ee:	f3 0f 11 5c 24 18    	movss  DWORD PTR [rsp+0x18],xmm3
  4070f4:	f3 44 0f 58 d0       	addss  xmm10,xmm0
  4070f9:	66 0f 7e e2          	movd   edx,xmm4
  4070fd:	f3 0f 11 64 24 28    	movss  DWORD PTR [rsp+0x28],xmm4
  407103:	48 c1 e2 20          	shl    rdx,0x20
  407107:	66 44 0f 7e d0       	movd   eax,xmm10
  40710c:	48 09 d0             	or     rax,rdx
  40710f:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  407113:	66 0f 7e d8          	movd   eax,xmm3
  407117:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  40711c:	48 89 c2             	mov    rdx,rax
  40711f:	66 0f 7e d0          	movd   eax,xmm2
  407123:	48 c1 e2 20          	shl    rdx,0x20
  407127:	48 09 d0             	or     rax,rdx
  40712a:	4c 89 f2             	mov    rdx,r14
  40712d:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  407131:	f3 0f 7e 0c 24       	movq   xmm1,QWORD PTR [rsp]
  407136:	e8 35 fa ff ff       	call   406b70 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const>
  40713b:	f3 0f 10 64 24 28    	movss  xmm4,DWORD PTR [rsp+0x28]
  407141:	41 0f b7 4f 26       	movzx  ecx,WORD PTR [r15+0x26]
  407146:	f3 0f 10 74 24 34    	movss  xmm6,DWORD PTR [rsp+0x34]
  40714c:	0f 14 f4             	unpcklps xmm6,xmm4
  40714f:	f3 0f 10 5c 24 18    	movss  xmm3,DWORD PTR [rsp+0x18]
  407155:	f3 0f 10 54 24 20    	movss  xmm2,DWORD PTR [rsp+0x20]
  40715b:	0f 14 d3             	unpcklps xmm2,xmm3
  40715e:	0f 28 ee             	movaps xmm5,xmm6
  407161:	0f 16 ea             	movlhps xmm5,xmm2
  407164:	0f 29 2c 24          	movaps XMMWORD PTR [rsp],xmm5
  407168:	48 8b 44 24 08       	mov    rax,QWORD PTR [rsp+0x8]
  40716d:	f3 0f 7e 04 24       	movq   xmm0,QWORD PTR [rsp]
  407172:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  407176:	e9 b4 fd ff ff       	jmp    406f2f <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x3bf>
  40717b:	48 85 c9             	test   rcx,rcx
  40717e:	0f 84 2e 01 00 00    	je     4072b2 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x742>
  407184:	4c 8d 24 c5 00 00 00 	lea    r12,[rax*8+0x0]
  40718b:	00 
  40718c:	e9 47 fc ff ff       	jmp    406dd8 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x268>
  407191:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  407198:	49 c7 c4 fc ff ff ff 	mov    r12,0xfffffffffffffffc
  40719f:	e9 34 fc ff ff       	jmp    406dd8 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x268>
  4071a4:	31 f6                	xor    esi,esi
  4071a6:	4c 89 f7             	mov    rdi,r14
  4071a9:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
  4071ae:	66 89 74 24 4e       	mov    WORD PTR [rsp+0x4e],si
  4071b3:	48 8d 74 24 4c       	lea    rsi,[rsp+0x4c]
  4071b8:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  4071bd:	66 89 4c 24 4c       	mov    WORD PTR [rsp+0x4c],cx
  4071c2:	89 0c 24             	mov    DWORD PTR [rsp],ecx
  4071c5:	e8 86 f4 ff ff       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  4071ca:	f3 44 0f 10 43 08    	movss  xmm8,DWORD PTR [rbx+0x8]
  4071d0:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
  4071d5:	f3 0f 10 73 04       	movss  xmm6,DWORD PTR [rbx+0x4]
  4071da:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
  4071df:	f3 0f 10 3b          	movss  xmm7,DWORD PTR [rbx]
  4071e3:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
  4071e6:	e9 ab fc ff ff       	jmp    406e96 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x326>
  4071eb:	48 8d 74 24 4c       	lea    rsi,[rsp+0x4c]
  4071f0:	ba 02 00 00 00       	mov    edx,0x2
  4071f5:	4c 89 f7             	mov    rdi,r14
  4071f8:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
  4071fd:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  407202:	66 89 4c 24 4c       	mov    WORD PTR [rsp+0x4c],cx
  407207:	89 0c 24             	mov    DWORD PTR [rsp],ecx
  40720a:	66 89 54 24 4e       	mov    WORD PTR [rsp+0x4e],dx
  40720f:	e8 3c f4 ff ff       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  407214:	f3 44 0f 10 43 08    	movss  xmm8,DWORD PTR [rbx+0x8]
  40721a:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
  40721f:	f3 0f 10 73 04       	movss  xmm6,DWORD PTR [rbx+0x4]
  407224:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
  407229:	f3 0f 10 3b          	movss  xmm7,DWORD PTR [rbx]
  40722d:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
  407230:	e9 c1 fc ff ff       	jmp    406ef6 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x386>
  407235:	48 8d 74 24 4c       	lea    rsi,[rsp+0x4c]
  40723a:	66 89 4c 24 4c       	mov    WORD PTR [rsp+0x4c],cx
  40723f:	89 0c 24             	mov    DWORD PTR [rsp],ecx
  407242:	4c 89 f7             	mov    rdi,r14
  407245:	b9 01 00 00 00       	mov    ecx,0x1
  40724a:	4c 89 4c 24 20       	mov    QWORD PTR [rsp+0x20],r9
  40724f:	48 89 44 24 18       	mov    QWORD PTR [rsp+0x18],rax
  407254:	66 89 4c 24 4e       	mov    WORD PTR [rsp+0x4e],cx
  407259:	e8 f2 f3 ff ff       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  40725e:	f3 44 0f 10 43 08    	movss  xmm8,DWORD PTR [rbx+0x8]
  407264:	4c 8b 4c 24 20       	mov    r9,QWORD PTR [rsp+0x20]
  407269:	f3 0f 10 73 04       	movss  xmm6,DWORD PTR [rbx+0x4]
  40726e:	48 8b 44 24 18       	mov    rax,QWORD PTR [rsp+0x18]
  407273:	f3 0f 10 3b          	movss  xmm7,DWORD PTR [rbx]
  407277:	8b 0c 24             	mov    ecx,DWORD PTR [rsp]
  40727a:	e9 47 fc ff ff       	jmp    406ec6 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x356>
  40727f:	48 8d 74 24 4c       	lea    rsi,[rsp+0x4c]
  407284:	48 89 04 24          	mov    QWORD PTR [rsp],rax
  407288:	4c 89 f7             	mov    rdi,r14
  40728b:	b8 03 00 00 00       	mov    eax,0x3
  407290:	4c 89 4c 24 18       	mov    QWORD PTR [rsp+0x18],r9
  407295:	66 89 4c 24 4c       	mov    WORD PTR [rsp+0x4c],cx
  40729a:	66 89 44 24 4e       	mov    WORD PTR [rsp+0x4e],ax
  40729f:	e8 ac f3 ff ff       	call   406650 <void std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >::emplace_back<zekku::Handle<unsigned short> >(zekku::Handle<unsigned short>&&)>
  4072a4:	4c 8b 4c 24 18       	mov    r9,QWORD PTR [rsp+0x18]
  4072a9:	48 8b 04 24          	mov    rax,QWORD PTR [rsp]
  4072ad:	e9 6b fc ff ff       	jmp    406f1d <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x3ad>
  4072b2:	48 c7 04 24 00 00 00 	mov    QWORD PTR [rsp],0x0
  4072b9:	00 
  4072ba:	31 c9                	xor    ecx,ecx
  4072bc:	e9 48 fb ff ff       	jmp    406e09 <void zekku::QuadTree<Pair, unsigned short, float, 4ul, zekku::DefaultGetXY<Pair, float> >::query<zekku::CircleQuery<float> >(zekku::CircleQuery<float> const&, std::vector<zekku::Handle<unsigned short>, std::allocator<zekku::Handle<unsigned short> > >&, unsigned short, zekku::AABB<float>) const+0x299>
  4072c1:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4072c8:	00 00 00 
  4072cb:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]

00000000004072d0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)>:
  4072d0:	41 57                	push   r15
  4072d2:	41 56                	push   r14
  4072d4:	4c 8d 77 08          	lea    r14,[rdi+0x8]
  4072d8:	41 55                	push   r13
  4072da:	41 54                	push   r12
  4072dc:	49 89 fd             	mov    r13,rdi
  4072df:	55                   	push   rbp
  4072e0:	53                   	push   rbx
  4072e1:	49 89 d4             	mov    r12,rdx
  4072e4:	48 83 ec 18          	sub    rsp,0x18
  4072e8:	4c 39 f6             	cmp    rsi,r14
  4072eb:	0f 84 9f 01 00 00    	je     407490 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x1c0>
  4072f1:	f3 0f 10 02          	movss  xmm0,DWORD PTR [rdx]
  4072f5:	48 89 f5             	mov    rbp,rsi
  4072f8:	f3 0f 10 4e 20       	movss  xmm1,DWORD PTR [rsi+0x20]
  4072fd:	0f 2f c8             	comiss xmm1,xmm0
  407300:	77 1c                	ja     40731e <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x4e>
  407302:	0f 2f c1             	comiss xmm0,xmm1
  407305:	0f 87 ee 00 00 00    	ja     4073f9 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x129>
  40730b:	f3 0f 10 52 04       	movss  xmm2,DWORD PTR [rdx+0x4]
  407310:	f3 0f 10 4e 24       	movss  xmm1,DWORD PTR [rsi+0x24]
  407315:	0f 2f ca             	comiss xmm1,xmm2
  407318:	0f 86 d2 00 00 00    	jbe    4073f0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x120>
  40731e:	4d 8b 7d 18          	mov    r15,QWORD PTR [r13+0x18]
  407322:	48 89 e8             	mov    rax,rbp
  407325:	48 89 ea             	mov    rdx,rbp
  407328:	49 39 ef             	cmp    r15,rbp
  40732b:	0f 84 ac 00 00 00    	je     4073dd <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x10d>
  407331:	48 89 ef             	mov    rdi,rbp
  407334:	f3 0f 11 44 24 0c    	movss  DWORD PTR [rsp+0xc],xmm0
  40733a:	e8 b1 9b ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  40733f:	f3 0f 10 44 24 0c    	movss  xmm0,DWORD PTR [rsp+0xc]
  407345:	48 89 c2             	mov    rdx,rax
  407348:	f3 0f 10 48 20       	movss  xmm1,DWORD PTR [rax+0x20]
  40734d:	0f 2f c1             	comiss xmm0,xmm1
  407350:	0f 87 22 02 00 00    	ja     407578 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x2a8>
  407356:	0f 2f c8             	comiss xmm1,xmm0
  407359:	77 11                	ja     40736c <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x9c>
  40735b:	f3 41 0f 10 4c 24 04 	movss  xmm1,DWORD PTR [r12+0x4]
  407362:	0f 2f 48 24          	comiss xmm1,DWORD PTR [rax+0x24]
  407366:	0f 87 0c 02 00 00    	ja     407578 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x2a8>
  40736c:	49 8b 5d 10          	mov    rbx,QWORD PTR [r13+0x10]
  407370:	48 85 db             	test   rbx,rbx
  407373:	75 2b                	jne    4073a0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xd0>
  407375:	e9 86 02 00 00       	jmp    407600 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x330>
  40737a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  407380:	0f 2f c1             	comiss xmm0,xmm1
  407383:	77 0d                	ja     407392 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xc2>
  407385:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  40738a:	41 0f 2f 54 24 04    	comiss xmm2,DWORD PTR [r12+0x4]
  407390:	77 18                	ja     4073aa <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xda>
  407392:	48 8b 43 18          	mov    rax,QWORD PTR [rbx+0x18]
  407396:	31 d2                	xor    edx,edx
  407398:	48 85 c0             	test   rax,rax
  40739b:	74 1b                	je     4073b8 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xe8>
  40739d:	48 89 c3             	mov    rbx,rax
  4073a0:	f3 0f 10 4b 20       	movss  xmm1,DWORD PTR [rbx+0x20]
  4073a5:	0f 2f c8             	comiss xmm1,xmm0
  4073a8:	76 d6                	jbe    407380 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xb0>
  4073aa:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  4073ae:	ba 01 00 00 00       	mov    edx,0x1
  4073b3:	48 85 c0             	test   rax,rax
  4073b6:	75 e5                	jne    40739d <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xcd>
  4073b8:	84 d2                	test   dl,dl
  4073ba:	48 89 dd             	mov    rbp,rbx
  4073bd:	0f 85 40 02 00 00    	jne    407603 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x333>
  4073c3:	0f 2f c1             	comiss xmm0,xmm1
  4073c6:	0f 87 76 01 00 00    	ja     407542 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x272>
  4073cc:	0f 2f c8             	comiss xmm1,xmm0
  4073cf:	0f 86 5c 01 00 00    	jbe    407531 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x261>
  4073d5:	31 ed                	xor    ebp,ebp
  4073d7:	48 89 d8             	mov    rax,rbx
  4073da:	48 89 ea             	mov    rdx,rbp
  4073dd:	48 83 c4 18          	add    rsp,0x18
  4073e1:	5b                   	pop    rbx
  4073e2:	5d                   	pop    rbp
  4073e3:	41 5c                	pop    r12
  4073e5:	41 5d                	pop    r13
  4073e7:	41 5e                	pop    r14
  4073e9:	41 5f                	pop    r15
  4073eb:	c3                   	ret    
  4073ec:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4073f0:	0f 2f d1             	comiss xmm2,xmm1
  4073f3:	0f 86 67 01 00 00    	jbe    407560 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x290>
  4073f9:	49 39 6d 20          	cmp    QWORD PTR [r13+0x20],rbp
  4073fd:	0f 84 9d 01 00 00    	je     4075a0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x2d0>
  407403:	48 89 ef             	mov    rdi,rbp
  407406:	f3 0f 11 44 24 0c    	movss  DWORD PTR [rsp+0xc],xmm0
  40740c:	e8 7f 9a ff ff       	call   400e90 <std::_Rb_tree_increment(std::_Rb_tree_node_base*)@plt>
  407411:	f3 0f 10 44 24 0c    	movss  xmm0,DWORD PTR [rsp+0xc]
  407417:	48 89 c2             	mov    rdx,rax
  40741a:	f3 0f 10 48 20       	movss  xmm1,DWORD PTR [rax+0x20]
  40741f:	0f 2f c8             	comiss xmm1,xmm0
  407422:	0f 87 90 01 00 00    	ja     4075b8 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x2e8>
  407428:	0f 2f c1             	comiss xmm0,xmm1
  40742b:	77 11                	ja     40743e <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x16e>
  40742d:	f3 0f 10 48 24       	movss  xmm1,DWORD PTR [rax+0x24]
  407432:	41 0f 2f 4c 24 04    	comiss xmm1,DWORD PTR [r12+0x4]
  407438:	0f 87 7a 01 00 00    	ja     4075b8 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x2e8>
  40743e:	49 8b 5d 10          	mov    rbx,QWORD PTR [r13+0x10]
  407442:	48 85 db             	test   rbx,rbx
  407445:	75 2d                	jne    407474 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x1a4>
  407447:	e9 e0 01 00 00       	jmp    40762c <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x35c>
  40744c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  407450:	0f 2f c1             	comiss xmm0,xmm1
  407453:	77 0d                	ja     407462 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x192>
  407455:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  40745a:	41 0f 2f 54 24 04    	comiss xmm2,DWORD PTR [r12+0x4]
  407460:	77 1c                	ja     40747e <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x1ae>
  407462:	48 8b 43 18          	mov    rax,QWORD PTR [rbx+0x18]
  407466:	31 d2                	xor    edx,edx
  407468:	48 85 c0             	test   rax,rax
  40746b:	0f 84 df 01 00 00    	je     407650 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x380>
  407471:	48 89 c3             	mov    rbx,rax
  407474:	f3 0f 10 4b 20       	movss  xmm1,DWORD PTR [rbx+0x20]
  407479:	0f 2f c8             	comiss xmm1,xmm0
  40747c:	76 d2                	jbe    407450 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x180>
  40747e:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  407482:	ba 01 00 00 00       	mov    edx,0x1
  407487:	eb df                	jmp    407468 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x198>
  407489:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  407490:	48 83 7f 28 00       	cmp    QWORD PTR [rdi+0x28],0x0
  407495:	74 2a                	je     4074c1 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x1f1>
  407497:	48 8b 6f 20          	mov    rbp,QWORD PTR [rdi+0x20]
  40749b:	f3 0f 10 02          	movss  xmm0,DWORD PTR [rdx]
  40749f:	f3 0f 10 4d 20       	movss  xmm1,DWORD PTR [rbp+0x20]
  4074a4:	0f 2f c1             	comiss xmm0,xmm1
  4074a7:	0f 87 f3 00 00 00    	ja     4075a0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x2d0>
  4074ad:	0f 2f c8             	comiss xmm1,xmm0
  4074b0:	77 0f                	ja     4074c1 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x1f1>
  4074b2:	f3 0f 10 42 04       	movss  xmm0,DWORD PTR [rdx+0x4]
  4074b7:	0f 2f 45 24          	comiss xmm0,DWORD PTR [rbp+0x24]
  4074bb:	0f 87 df 00 00 00    	ja     4075a0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x2d0>
  4074c1:	49 8b 5d 10          	mov    rbx,QWORD PTR [r13+0x10]
  4074c5:	48 85 db             	test   rbx,rbx
  4074c8:	0f 84 0a 01 00 00    	je     4075d8 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x308>
  4074ce:	f3 41 0f 10 0c 24    	movss  xmm1,DWORD PTR [r12]
  4074d4:	eb 2a                	jmp    407500 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x230>
  4074d6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4074dd:	00 00 00 
  4074e0:	0f 2f c8             	comiss xmm1,xmm0
  4074e3:	77 0d                	ja     4074f2 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x222>
  4074e5:	f3 0f 10 53 24       	movss  xmm2,DWORD PTR [rbx+0x24]
  4074ea:	41 0f 2f 54 24 04    	comiss xmm2,DWORD PTR [r12+0x4]
  4074f0:	77 18                	ja     40750a <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x23a>
  4074f2:	48 8b 43 18          	mov    rax,QWORD PTR [rbx+0x18]
  4074f6:	31 d2                	xor    edx,edx
  4074f8:	48 85 c0             	test   rax,rax
  4074fb:	74 1b                	je     407518 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x248>
  4074fd:	48 89 c3             	mov    rbx,rax
  407500:	f3 0f 10 43 20       	movss  xmm0,DWORD PTR [rbx+0x20]
  407505:	0f 2f c1             	comiss xmm0,xmm1
  407508:	76 d6                	jbe    4074e0 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x210>
  40750a:	48 8b 43 10          	mov    rax,QWORD PTR [rbx+0x10]
  40750e:	ba 01 00 00 00       	mov    edx,0x1
  407513:	48 85 c0             	test   rax,rax
  407516:	75 e5                	jne    4074fd <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x22d>
  407518:	84 d2                	test   dl,dl
  40751a:	48 89 dd             	mov    rbp,rbx
  40751d:	0f 85 b8 00 00 00    	jne    4075db <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x30b>
  407523:	0f 2f c8             	comiss xmm1,xmm0
  407526:	77 1a                	ja     407542 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x272>
  407528:	0f 2f c1             	comiss xmm0,xmm1
  40752b:	0f 87 a4 fe ff ff    	ja     4073d5 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x105>
  407531:	f3 41 0f 10 44 24 04 	movss  xmm0,DWORD PTR [r12+0x4]
  407538:	0f 2f 43 24          	comiss xmm0,DWORD PTR [rbx+0x24]
  40753c:	0f 86 93 fe ff ff    	jbe    4073d5 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x105>
  407542:	48 83 c4 18          	add    rsp,0x18
  407546:	31 db                	xor    ebx,ebx
  407548:	48 89 ea             	mov    rdx,rbp
  40754b:	48 89 d8             	mov    rax,rbx
  40754e:	5b                   	pop    rbx
  40754f:	5d                   	pop    rbp
  407550:	41 5c                	pop    r12
  407552:	41 5d                	pop    r13
  407554:	41 5e                	pop    r14
  407556:	41 5f                	pop    r15
  407558:	c3                   	ret    
  407559:	0f 1f 80 00 00 00 00 	nop    DWORD PTR [rax+0x0]
  407560:	48 83 c4 18          	add    rsp,0x18
  407564:	48 89 f0             	mov    rax,rsi
  407567:	31 d2                	xor    edx,edx
  407569:	5b                   	pop    rbx
  40756a:	5d                   	pop    rbp
  40756b:	41 5c                	pop    r12
  40756d:	41 5d                	pop    r13
  40756f:	41 5e                	pop    r14
  407571:	41 5f                	pop    r15
  407573:	c3                   	ret    
  407574:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  407578:	48 83 7a 18 00       	cmp    QWORD PTR [rdx+0x18],0x0
  40757d:	bb 00 00 00 00       	mov    ebx,0x0
  407582:	48 89 d8             	mov    rax,rbx
  407585:	48 0f 45 c5          	cmovne rax,rbp
  407589:	48 0f 45 d5          	cmovne rdx,rbp
  40758d:	48 83 c4 18          	add    rsp,0x18
  407591:	5b                   	pop    rbx
  407592:	5d                   	pop    rbp
  407593:	41 5c                	pop    r12
  407595:	41 5d                	pop    r13
  407597:	41 5e                	pop    r14
  407599:	41 5f                	pop    r15
  40759b:	c3                   	ret    
  40759c:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4075a0:	48 83 c4 18          	add    rsp,0x18
  4075a4:	48 89 ea             	mov    rdx,rbp
  4075a7:	31 c0                	xor    eax,eax
  4075a9:	5b                   	pop    rbx
  4075aa:	5d                   	pop    rbp
  4075ab:	41 5c                	pop    r12
  4075ad:	41 5d                	pop    r13
  4075af:	41 5e                	pop    r14
  4075b1:	41 5f                	pop    r15
  4075b3:	c3                   	ret    
  4075b4:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
  4075b8:	48 83 7d 18 00       	cmp    QWORD PTR [rbp+0x18],0x0
  4075bd:	bb 00 00 00 00       	mov    ebx,0x0
  4075c2:	48 89 d8             	mov    rax,rbx
  4075c5:	48 0f 45 c2          	cmovne rax,rdx
  4075c9:	48 0f 44 d5          	cmove  rdx,rbp
  4075cd:	e9 0b fe ff ff       	jmp    4073dd <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x10d>
  4075d2:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
  4075d8:	4c 89 f3             	mov    rbx,r14
  4075db:	49 39 5d 18          	cmp    QWORD PTR [r13+0x18],rbx
  4075df:	74 5f                	je     407640 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x370>
  4075e1:	48 89 df             	mov    rdi,rbx
  4075e4:	48 89 dd             	mov    rbp,rbx
  4075e7:	e8 04 99 ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  4075ec:	f3 41 0f 10 0c 24    	movss  xmm1,DWORD PTR [r12]
  4075f2:	48 89 c3             	mov    rbx,rax
  4075f5:	f3 0f 10 40 20       	movss  xmm0,DWORD PTR [rax+0x20]
  4075fa:	e9 24 ff ff ff       	jmp    407523 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x253>
  4075ff:	90                   	nop
  407600:	4c 89 f3             	mov    rbx,r14
  407603:	49 39 df             	cmp    r15,rbx
  407606:	f3 0f 11 44 24 0c    	movss  DWORD PTR [rsp+0xc],xmm0
  40760c:	74 32                	je     407640 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x370>
  40760e:	48 89 df             	mov    rdi,rbx
  407611:	48 89 dd             	mov    rbp,rbx
  407614:	e8 d7 98 ff ff       	call   400ef0 <std::_Rb_tree_decrement(std::_Rb_tree_node_base*)@plt>
  407619:	f3 0f 10 44 24 0c    	movss  xmm0,DWORD PTR [rsp+0xc]
  40761f:	48 89 c3             	mov    rbx,rax
  407622:	f3 0f 10 48 20       	movss  xmm1,DWORD PTR [rax+0x20]
  407627:	e9 97 fd ff ff       	jmp    4073c3 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xf3>
  40762c:	4c 89 f3             	mov    rbx,r14
  40762f:	49 39 5d 18          	cmp    QWORD PTR [r13+0x18],rbx
  407633:	f3 0f 11 44 24 0c    	movss  DWORD PTR [rsp+0xc],xmm0
  407639:	75 d3                	jne    40760e <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x33e>
  40763b:	0f 1f 44 00 00       	nop    DWORD PTR [rax+rax*1+0x0]
  407640:	48 89 dd             	mov    rbp,rbx
  407643:	e9 fa fe ff ff       	jmp    407542 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x272>
  407648:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40764f:	00 
  407650:	84 d2                	test   dl,dl
  407652:	48 89 dd             	mov    rbp,rbx
  407655:	0f 84 68 fd ff ff    	je     4073c3 <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0xf3>
  40765b:	eb d2                	jmp    40762f <std::_Rb_tree<Pair, Pair, std::_Identity<Pair>, std::less<Pair>, std::allocator<Pair> >::_M_get_insert_hint_unique_pos(std::_Rb_tree_const_iterator<Pair>, Pair const&)+0x35f>
  40765d:	0f 1f 00             	nop    DWORD PTR [rax]

0000000000407660 <__libc_csu_init>:
  407660:	41 57                	push   r15
  407662:	41 56                	push   r14
  407664:	41 89 ff             	mov    r15d,edi
  407667:	41 55                	push   r13
  407669:	41 54                	push   r12
  40766b:	4c 8d 25 66 17 20 00 	lea    r12,[rip+0x201766]        # 608dd8 <__frame_dummy_init_array_entry>
  407672:	55                   	push   rbp
  407673:	48 8d 2d 6e 17 20 00 	lea    rbp,[rip+0x20176e]        # 608de8 <__init_array_end>
  40767a:	53                   	push   rbx
  40767b:	49 89 f6             	mov    r14,rsi
  40767e:	49 89 d5             	mov    r13,rdx
  407681:	4c 29 e5             	sub    rbp,r12
  407684:	48 83 ec 08          	sub    rsp,0x8
  407688:	48 c1 fd 03          	sar    rbp,0x3
  40768c:	e8 4f 97 ff ff       	call   400de0 <_init>
  407691:	48 85 ed             	test   rbp,rbp
  407694:	74 20                	je     4076b6 <__libc_csu_init+0x56>
  407696:	31 db                	xor    ebx,ebx
  407698:	0f 1f 84 00 00 00 00 	nop    DWORD PTR [rax+rax*1+0x0]
  40769f:	00 
  4076a0:	4c 89 ea             	mov    rdx,r13
  4076a3:	4c 89 f6             	mov    rsi,r14
  4076a6:	44 89 ff             	mov    edi,r15d
  4076a9:	41 ff 14 dc          	call   QWORD PTR [r12+rbx*8]
  4076ad:	48 83 c3 01          	add    rbx,0x1
  4076b1:	48 39 dd             	cmp    rbp,rbx
  4076b4:	75 ea                	jne    4076a0 <__libc_csu_init+0x40>
  4076b6:	48 83 c4 08          	add    rsp,0x8
  4076ba:	5b                   	pop    rbx
  4076bb:	5d                   	pop    rbp
  4076bc:	41 5c                	pop    r12
  4076be:	41 5d                	pop    r13
  4076c0:	41 5e                	pop    r14
  4076c2:	41 5f                	pop    r15
  4076c4:	c3                   	ret    
  4076c5:	90                   	nop
  4076c6:	66 2e 0f 1f 84 00 00 	nop    WORD PTR cs:[rax+rax*1+0x0]
  4076cd:	00 00 00 

00000000004076d0 <__libc_csu_fini>:
  4076d0:	f3 c3                	repz ret 

Disassembly of section .fini:

00000000004076d4 <_fini>:
  4076d4:	48 83 ec 08          	sub    rsp,0x8
  4076d8:	48 83 c4 08          	add    rsp,0x8
  4076dc:	c3                   	ret    
